import{_ as c,r as o,o as l,c as i,d as s,w as a,e as t,a as e,b as p}from"./app-IMuBw9Ml.js";const u="/assets/image-9OFRedU0.png",r={},k=e(`<p>在上一篇中我们简单的了解了 slice ，在这一篇中我们将继续深入了解一下。</p><h2 id="slice-数据结构" tabindex="-1"><a class="header-anchor" href="#slice-数据结构" aria-hidden="true">#</a> Slice 数据结构</h2><p>首先我们先来看一下 Slice 的数据结构，从 code - 1** **中我们可以看到 Slice 是由 3 部分构成，首先第一是名为 unsafe.Pointer（通用指针类型） 类型的 array，从命名中我们可以得知它是一个指向 Array 的指针，其余两个皆为 int 类型分别为 len 和 cap 分别代表 Slice 当前的长度，另一个代表 Slice 当前的容量。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> slice <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	array unsafe<span class="token punctuation">.</span>Pointer
	<span class="token builtin">len</span>   <span class="token builtin">int</span>
	<span class="token builtin">cap</span>   <span class="token builtin">int</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),d=e(`<br><ul><li>array unsafe.Pointer 类型，用于指向不同类型的 Array。</li><li>len int 类型，用于表示当前 Slice 的长度，即当前元素的个数。</li><li>cap int 类型，用于表示当前 Slice 的容量，即当前指针指向底层数组元素为起始位向后的总元素数量。</li></ul><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><p>通过刚才数据结构 code - 1 中，想必我们已经对 Slice 有了一个更清楚的认知，Slice 本身并不是动态 Array，它更像是对 Array 的又一层封装，通过它内部实现的数据结构对底层 Array 的引用并将数据读写限定在指定区域内，其 Slice 本身只是一个只读对象。 既然 Slice 只是对底层 Array 的一个引用，那么通过 code - 2 中我们可以发现，一个 Array 可以被多个 slice 所引用，并且修改 Slice 上的元素其本质上也就是在修改所引用的底层 Array 中的元素，在此我们可以发现 Slice 是一个引用类型。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;fmt&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">revise</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> i <span class="token builtin">int</span><span class="token punctuation">,</span> v <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    arrayA <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">}</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;arrayA ---&gt; %d\\n&quot;</span><span class="token punctuation">,</span> arrayA<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;address(arrayA) = %p\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arrayA<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;len(arrayA) = %d cap(arrayA) = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>arrayA<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>arrayA<span class="token punctuation">)</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>
    sliceA <span class="token operator">:=</span> arrayA<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;sliceA ---&gt; %d\\n&quot;</span><span class="token punctuation">,</span> sliceA<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;address(sliceA) = %p\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>sliceA<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;len(sliceA) = %d cap(sliceA) = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>sliceA<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>sliceA<span class="token punctuation">)</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>
    sliceB <span class="token operator">:=</span> arrayA<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;sliceB ---&gt; %d\\n&quot;</span><span class="token punctuation">,</span> sliceB<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;address(sliceB) = %p\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>sliceB<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;len(sliceB) = %d cap(sliceB) = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>sliceB<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>sliceB<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">revise</span><span class="token punctuation">(</span>sliceB<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;sliceA ---&gt; %d\\n&quot;</span><span class="token punctuation">,</span> sliceA<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;address(sliceA) = %p\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>sliceA<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;len(sliceA) = %d cap(sliceA) = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>sliceA<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>sliceA<span class="token punctuation">)</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;sliceB ---&gt; %d\\n&quot;</span><span class="token punctuation">,</span> sliceB<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;address(sliceB) = %p\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>sliceB<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;len(sliceB) = %d cap(sliceB) = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>sliceB<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>sliceB<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// arrayA ---&gt; [0 1 2 3 4 5 6 7 8 9]</span>
<span class="token comment">// address(arrayA) = 0xc000072000</span>
<span class="token comment">// len(arrayA) = 10 cap(arrayA) = 10</span>

<span class="token comment">// sliceA ---&gt; [4 5 6 7]</span>
<span class="token comment">// address(sliceA) = 0xc000010030</span>
<span class="token comment">// len(sliceA) = 4 cap(sliceA) = 6</span>

<span class="token comment">// sliceB ---&gt; [2 3 4 5]</span>
<span class="token comment">// address(sliceB) = 0xc000010060</span>
<span class="token comment">// len(sliceB) = 4 cap(sliceB) = 8</span>

<span class="token comment">// sliceA ---&gt; [4 0 6 7]</span>
<span class="token comment">// address(sliceA) = 0xc000010030</span>
<span class="token comment">// len(sliceA) = 4 cap(sliceA) = 6</span>

<span class="token comment">// sliceB ---&gt; [2 3 4 0]</span>
<span class="token comment">// address(sliceB) = 0xc000010060</span>
<span class="token comment">// len(sliceB) = 4 cap(sliceB) = 8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),m=p("br",null,null,-1),v=p("figure",null,[p("img",{src:u,alt:"",tabindex:"0",loading:"lazy"}),p("figcaption")],-1),b=e(`<br><h2 id="make" tabindex="-1"><a class="header-anchor" href="#make" aria-hidden="true">#</a> Make</h2><p>Slice 的声明方式有很多，但都是字面量上的不同，下面我们从源代码 code - 3 中看看 make 函数的是如何做的，在此期间我们先来关注一下 len 与 cap 之间的关系，在 L3 中我们看到如果 len &gt; cap 会直接报出 Panic，为此我们可以推断出 len 与 cap 之间的关系始终保持在 0 &lt; len &lt;= cap 。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">makeslice</span><span class="token punctuation">(</span>et <span class="token operator">*</span>_type<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token builtin">int</span><span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer <span class="token punctuation">{</span>
	mem<span class="token punctuation">,</span> overflow <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">MulUintptr</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">cap</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> overflow <span class="token operator">||</span> mem <span class="token operator">&gt;</span> maxAlloc <span class="token operator">||</span> <span class="token builtin">len</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token builtin">len</span> <span class="token operator">&gt;</span> <span class="token builtin">cap</span> <span class="token punctuation">{</span>
		<span class="token comment">// NOTE: Produce a &#39;len out of range&#39; error instead of a</span>
		<span class="token comment">// &#39;cap out of range&#39; error when someone does make([]T, bignumber).</span>
		<span class="token comment">// &#39;cap out of range&#39; is true too, but since the cap is only being</span>
		<span class="token comment">// supplied implicitly, saying len is clearer.</span>
		<span class="token comment">// See golang.org/issue/4085.</span>
		mem<span class="token punctuation">,</span> overflow <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">MulUintptr</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> overflow <span class="token operator">||</span> mem <span class="token operator">&gt;</span> maxAlloc <span class="token operator">||</span> <span class="token builtin">len</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token function">panicmakeslicelen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token function">panicmakeslicecap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token function">mallocgc</span><span class="token punctuation">(</span>mem<span class="token punctuation">,</span> et<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),f=e(`<br><ul><li>0 &lt; len &lt;= cap</li><li>type.size 与 cap 的乘积不能越界，并且要小于 maxAlloc（允许用户分配的最大虚拟内存空间）</li><li>type.size 与 len 的乘积不能越界，并且要小于 maxAlloc。</li></ul><h2 id="append" tabindex="-1"><a class="header-anchor" href="#append" aria-hidden="true">#</a> Append</h2><p>Append 函数是向 Slice 尾部添加元素，返回新的 slice 对象，但如果此时 Slice 的 cap 值小于当前 len 加上 append 中传入值的数量，就会调用 runtime.growslice 函数进行扩容，下面就让我们来深入了解一下函数 runtime.growslice 是如何对 Slice 进行扩容的。 首先我们先来看看扩容规则，其中 et 代表 slice 中的元素类型，old 是扩容前的切片，cap 是期望容量，也就是扩容后至少需要的最小容量，即 old.cap + 本次新增的元素数量。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">growslice</span><span class="token punctuation">(</span>et <span class="token operator">*</span>_type<span class="token punctuation">,</span> old slice<span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token builtin">int</span><span class="token punctuation">)</span> slice <span class="token punctuation">{</span>
    <span class="token operator">...</span>
	newcap <span class="token operator">:=</span> old<span class="token punctuation">.</span><span class="token builtin">cap</span>
	doublecap <span class="token operator">:=</span> newcap <span class="token operator">+</span> newcap
	<span class="token keyword">if</span> <span class="token builtin">cap</span> <span class="token operator">&gt;</span> doublecap <span class="token punctuation">{</span>
		newcap <span class="token operator">=</span> <span class="token builtin">cap</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> threshold <span class="token operator">=</span> <span class="token number">256</span>
		<span class="token keyword">if</span> old<span class="token punctuation">.</span><span class="token builtin">cap</span> <span class="token operator">&lt;</span> threshold <span class="token punctuation">{</span>
			newcap <span class="token operator">=</span> doublecap
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// Check 0 &lt; newcap to detect overflow</span>
			<span class="token comment">// and prevent an infinite loop.</span>
			<span class="token keyword">for</span> <span class="token number">0</span> <span class="token operator">&lt;</span> newcap <span class="token operator">&amp;&amp;</span> newcap <span class="token operator">&lt;</span> <span class="token builtin">cap</span> <span class="token punctuation">{</span>
				<span class="token comment">// Transition from growing 2x for small slices</span>
				<span class="token comment">// to growing 1.25x for large slices. This formula</span>
				<span class="token comment">// gives a smooth-ish transition between the two.</span>
				newcap <span class="token operator">+=</span> <span class="token punctuation">(</span>newcap <span class="token operator">+</span> <span class="token number">3</span><span class="token operator">*</span>threshold<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span>
			<span class="token punctuation">}</span>
			<span class="token comment">// Set newcap to the requested cap when</span>
			<span class="token comment">// the newcap calculation overflowed.</span>
			<span class="token keyword">if</span> newcap <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
				newcap <span class="token operator">=</span> <span class="token builtin">cap</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),g=e(`<br><ul><li>当前期望容量 &gt; 2 倍扩容前 Slice 容量 。 <ul><li>新容量 = 当前期望容量。</li></ul></li><li>当前期望容量 &lt; 2 倍扩容前 Slice 容量 &amp;&amp; 扩容前 Slice 容量 &gt; 256。 <ul><li>新容量 = 2 倍扩容前 Slice 容量。</li></ul></li><li>当前期望容量 &lt; 2 倍扩容前 Slice 容量 &amp;&amp; 扩容前 Slice 容量 &lt; 256。 <ul><li>新容量会从 2 倍扩容前 Slice 容量平滑的过渡到 1.25 倍扩容前 Slice 容量。</li></ul></li></ul><p>其次就是内存字节对齐，通过刚刚的扩容规则中 code - 4 中我们已经大致了解了各种情况中所要扩容的大小，但那并不是最终所要扩容的容量还会进行接下来的计算。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">growslice</span><span class="token punctuation">(</span>et <span class="token operator">*</span>_type<span class="token punctuation">,</span> old slice<span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token builtin">int</span><span class="token punctuation">)</span> slice <span class="token punctuation">{</span>
    <span class="token operator">...</span>
	<span class="token keyword">switch</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> et<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
		lenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">)</span>
		newlenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">cap</span><span class="token punctuation">)</span>
		capmem <span class="token operator">=</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span><span class="token punctuation">)</span>
		overflow <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">&gt;</span> maxAlloc
		newcap <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>capmem<span class="token punctuation">)</span>
	<span class="token keyword">case</span> et<span class="token punctuation">.</span>size <span class="token operator">==</span> goarch<span class="token punctuation">.</span>PtrSize<span class="token punctuation">:</span>
		lenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">*</span> goarch<span class="token punctuation">.</span>PtrSize
		newlenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">cap</span><span class="token punctuation">)</span> <span class="token operator">*</span> goarch<span class="token punctuation">.</span>PtrSize
		capmem <span class="token operator">=</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">*</span> goarch<span class="token punctuation">.</span>PtrSize<span class="token punctuation">)</span>
		overflow <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">&gt;</span> maxAlloc<span class="token operator">/</span>goarch<span class="token punctuation">.</span>PtrSize
		newcap <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>capmem <span class="token operator">/</span> goarch<span class="token punctuation">.</span>PtrSize<span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token function">isPowerOfTwo</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">var</span> shift <span class="token builtin">uintptr</span>
		<span class="token keyword">if</span> goarch<span class="token punctuation">.</span>PtrSize <span class="token operator">==</span> <span class="token number">8</span> <span class="token punctuation">{</span>
			<span class="token comment">// Mask shift for better code generation.</span>
			shift <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span><span class="token function">Ctz64</span><span class="token punctuation">(</span><span class="token function">uint64</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">63</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			shift <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span><span class="token function">Ctz32</span><span class="token punctuation">(</span><span class="token function">uint32</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">31</span>
		<span class="token punctuation">}</span>
		lenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> shift
		newlenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">cap</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> shift
		capmem <span class="token operator">=</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> shift<span class="token punctuation">)</span>
		overflow <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span>maxAlloc <span class="token operator">&gt;&gt;</span> shift<span class="token punctuation">)</span>
		newcap <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>capmem <span class="token operator">&gt;&gt;</span> shift<span class="token punctuation">)</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		lenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">*</span> et<span class="token punctuation">.</span>size
		newlenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">cap</span><span class="token punctuation">)</span> <span class="token operator">*</span> et<span class="token punctuation">.</span>size
		capmem<span class="token punctuation">,</span> overflow <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">MulUintptr</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span><span class="token punctuation">)</span>
		capmem <span class="token operator">=</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span>capmem<span class="token punctuation">)</span>
		newcap <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>capmem <span class="token operator">/</span> et<span class="token punctuation">.</span>size<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),w=p("br",null,null,-1);function h(y,A){const n=o("center");return l(),i("div",null,[k,s(n,null,{default:a(()=>[t("code - 1 : Slice 数据结构")]),_:1}),d,s(n,null,{default:a(()=>[t("code - 2 : 声明 Slice")]),_:1}),m,v,s(n,null,{default:a(()=>[t("图 1 : Slice 内存布局")]),_:1}),b,s(n,null,{default:a(()=>[t("code - 3 : makeslice 函数")]),_:1}),f,s(n,null,{default:a(()=>[t("code - 4 : growslice 函数扩容规则")]),_:1}),g,s(n,null,{default:a(()=>[t("code - 5 : growslice 函数内存字节对齐")]),_:1}),w])}const _=c(r,[["render",h],["__file","index.html.vue"]]);export{_ as default};
