import{_ as l,r as o,o as i,c as u,d as a,w as e,e as s,b as n,a as p}from"./app-7QKrQFIj.js";const d="/assets/list-YaeJ4crh.svg",r="/assets/linked_list-5lWejW2O.svg",k="/assets/head_node-R_7DT24R.svg",v="/assets/create_node-NpsnekFk.svg",m="/assets/linked_list_type-cdKZejf4.svg",b={},h=n("p",null,"链表是一种线性数据结构，其中的每一个元素都是一个节点，其中每一个节点都通过指针相连接，指针记录了下一个节点的内存地址，通过它可以从当前节点访问到下一个节点。",-1),_=n("figure",null,[n("img",{src:d,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),f=n("br",null,null,-1),g=n("p",null,"要知道计算机中的内存空间是所有程序的公共资源，在一个复杂的系统运行环境下，空闲的内存空间可能散落在内存各处，我们知道，存储数组的内存空间必须是连续的，而当数组非常大时，内存可能无法提供如此大的连续空间，此时链表的灵活性优势就体现出来了。",-1),w=n("figure",null,[n("img",{src:r,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),y=p(`<br><p>链表中的每个节点由两部分构成，一是本身存储的数据信息（数据域），二是指向后续节点的指针（指针域）这两部分信息组成的存储结构称之为链表的“节点”</p><h2 id="链表的结构定义" tabindex="-1"><a class="header-anchor" href="#链表的结构定义" aria-hidden="true">#</a> 链表的结构定义</h2><p>从图 2 中可以看出分散存储是链表最显著的特征，但为了能够保持节点之间的顺序关系，每个节点在存储数据的同时都要配置一个指针，用于指向它的直接后继元素。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stddef.h&gt;</span></span>

<span class="token comment">// 链表节点结构体定义</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> value<span class="token punctuation">;</span> <span class="token comment">// 节点数据域</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> next<span class="token punctuation">;</span> <span class="token comment">// 节点指针域，指向下一个节点的地址</span>
<span class="token punctuation">}</span> Node<span class="token punctuation">,</span> <span class="token operator">*</span>P_Node<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    P_Node head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// 初始化链表</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),L=n("br",null,null,-1),N=n("p",null,"链表的首个节点被称为“头节点”，头节点通常包含指向下一个节点的指针。对于单链表来说，头结点是整个链表的入口，通过它可以遍历链表中的其他所有节点。如果链表为空，则头结点不存在，或者它的指针指向 NULL。 链表还拥有一个头指针，永远指向链表中第一个节点的位置，也就是链表中的“头节点”。",-1),x=n("figure",null,[n("img",{src:k,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),U=p(`<br><p>头指针与头节点的区别：</p><ul><li>头指针只声明没有分配存储空间。</li><li>头节点进行了声明并分配了一个结点大小的实际物理内存。</li></ul><p>在链表的实现中，有时人们会定义两个结构体，一个用于表示链表节点，另一个用于表示整个链表。这样做的原因主要是为了更好地管理链表的状态和提供更清晰的数据封装。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stddef.h&gt;</span></span>

<span class="token comment">// 链表节点结构体定义</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> value<span class="token punctuation">;</span> <span class="token comment">// 节点数据域</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> next<span class="token punctuation">;</span> <span class="token comment">// 节点指针域，指向下一个节点的地址</span>
<span class="token punctuation">}</span> Node<span class="token punctuation">,</span> <span class="token operator">*</span>P_Node<span class="token punctuation">;</span>

<span class="token comment">// 链表结构体定义</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">List</span> <span class="token punctuation">{</span>
    P_Node head<span class="token punctuation">;</span> <span class="token comment">// 链表头结点</span>
    <span class="token keyword">int</span> size<span class="token punctuation">;</span> <span class="token comment">// 链表大小（节点数量）</span>
<span class="token punctuation">}</span> List<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    List list <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token constant">NULL</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 初始化链表</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),P=n("br",null,null,-1),q=n("p",null,[s("从以上代码中可以看出，链表节点 Node 除了包含值，还需额外保存一个指针，"),n("strong",null,"因此在相同数据量下，链表比数组占用更多的内存空间。")],-1),z=n("h2",{id:"链表的常用操作",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#链表的常用操作","aria-hidden":"true"},"#"),s(" 链表的常用操作")],-1),V=n("h3",{id:"创建节点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#创建节点","aria-hidden":"true"},"#"),s(" 创建节点")],-1),B={href:"https://en.cppreference.com/w/c/memory/malloc",target:"_blank",rel:"noopener noreferrer"},E=p(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 创建新节点函数</span>
P_Node <span class="token function">create_node</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    P_Node new_node <span class="token operator">=</span> <span class="token punctuation">(</span>P_Node<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分配内存空间</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>new_node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Memory allocation failed.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    new_node<span class="token operator">-&gt;</span>value <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token comment">// 初始化数据域</span>
    new_node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// 初始化指针域</span>

    <span class="token keyword">return</span> new_node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),j=n("br",null,null,-1),C=n("figure",null,[n("img",{src:v,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),I=p(`<br><h3 id="插入节点" tabindex="-1"><a class="header-anchor" href="#插入节点" aria-hidden="true">#</a> 插入节点</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 在链表末尾添加节点函数</span>
<span class="token keyword">void</span> <span class="token function">append_node</span><span class="token punctuation">(</span>List <span class="token operator">*</span>list<span class="token punctuation">,</span> P_Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token operator">-&gt;</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果链表为空，则将节点设为头节点</span>
        list<span class="token operator">-&gt;</span>head <span class="token operator">=</span> node<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    P_Node last <span class="token operator">=</span> list<span class="token operator">-&gt;</span>head<span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>last<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        last <span class="token operator">=</span> last<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    last<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span> <span class="token comment">// 将节点添加到链表末尾</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),M=p(`<br><h3 id="查找节点" tabindex="-1"><a class="header-anchor" href="#查找节点" aria-hidden="true">#</a> 查找节点</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 查找链表中的第一个具有给定值 val 的节点（如果没有则返回 NULL）</span>
P_Node <span class="token function">search_node</span><span class="token punctuation">(</span>List list<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span>head <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span>head<span class="token operator">-&gt;</span>value <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> list<span class="token punctuation">.</span>head<span class="token punctuation">;</span> <span class="token comment">// 找到了返回与给定值相同的节点</span>
        <span class="token punctuation">}</span>
        list<span class="token punctuation">.</span>head <span class="token operator">=</span> list<span class="token punctuation">.</span>head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// 如果没有找到，则返回 NULL</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),R=p(`<br><h3 id="删除节点" tabindex="-1"><a class="header-anchor" href="#删除节点" aria-hidden="true">#</a> 删除节点</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">delete_node</span><span class="token punctuation">(</span>List <span class="token operator">*</span>list<span class="token punctuation">,</span> P_Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token operator">-&gt;</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果链表为空，则无需删除</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token operator">-&gt;</span>head <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果要删除的节点是链表中第一个节点</span>
        list<span class="token operator">-&gt;</span>head <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> <span class="token comment">// 直接修改链表头指向下一个节点</span>
        node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// 清除已删除节点的 next，使其与链表彻底隔离</span>
        <span class="token function">free</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放 malloc 函数申请的空间</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    P_Node last <span class="token operator">=</span> list<span class="token operator">-&gt;</span>head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>last<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>last<span class="token operator">-&gt;</span>next <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            last<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
            <span class="token function">free</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        last <span class="token operator">=</span> last<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),T=p(`<br><h3 id="打印节点" tabindex="-1"><a class="header-anchor" href="#打印节点" aria-hidden="true">#</a> 打印节点</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">print_list</span><span class="token punctuation">(</span>List list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span>head <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d--&gt;&quot;</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span>head<span class="token operator">-&gt;</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span>head <span class="token operator">=</span> list<span class="token punctuation">.</span>head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;NULL\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),W=p(`<br><h3 id="完整代码" tabindex="-1"><a class="header-anchor" href="#完整代码" aria-hidden="true">#</a> 完整代码</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stddef.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token comment">// 链表节点结构体定义</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> value<span class="token punctuation">;</span> <span class="token comment">// 节点数据域</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> next<span class="token punctuation">;</span> <span class="token comment">// 节点指针域，指向下一个节点的地址</span>
<span class="token punctuation">}</span> Node<span class="token punctuation">,</span> <span class="token operator">*</span>P_Node<span class="token punctuation">;</span>

<span class="token comment">// 链表结构体定义</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">List</span> <span class="token punctuation">{</span>
    P_Node head<span class="token punctuation">;</span> <span class="token comment">// 链表头结点</span>
    <span class="token keyword">int</span> size<span class="token punctuation">;</span> <span class="token comment">// 链表大小（节点数量）</span>
<span class="token punctuation">}</span> List<span class="token punctuation">;</span>

P_Node <span class="token function">create_node</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    P_Node new_node <span class="token operator">=</span> <span class="token punctuation">(</span>P_Node<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分配内存空间</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>new_node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Memory allocation failed.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    new_node<span class="token operator">-&gt;</span>value <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token comment">// 初始化数据域</span>
    new_node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// 初始化指针域</span>

    <span class="token keyword">return</span> new_node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">append_node</span><span class="token punctuation">(</span>List <span class="token operator">*</span>list<span class="token punctuation">,</span> P_Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token operator">-&gt;</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果链表为空，则将节点设为头节点</span>
        list<span class="token operator">-&gt;</span>head <span class="token operator">=</span> node<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    P_Node last <span class="token operator">=</span> list<span class="token operator">-&gt;</span>head<span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>last<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        last <span class="token operator">=</span> last<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    last<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span> <span class="token comment">// 将节点添加到链表末尾</span>
<span class="token punctuation">}</span>

<span class="token comment">// 查找链表中的第一个具有给定值 val 的节点（如果没有则返回 NULL）</span>
P_Node <span class="token function">search_node</span><span class="token punctuation">(</span>List list<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span>head <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span>head<span class="token operator">-&gt;</span>value <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> list<span class="token punctuation">.</span>head<span class="token punctuation">;</span> <span class="token comment">// 找到了返回与给定值相同的节点</span>
        <span class="token punctuation">}</span>
        list<span class="token punctuation">.</span>head <span class="token operator">=</span> list<span class="token punctuation">.</span>head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// 如果没有找到，则返回 NULL</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">delete_node</span><span class="token punctuation">(</span>List <span class="token operator">*</span>list<span class="token punctuation">,</span> P_Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token operator">-&gt;</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果链表为空，则无需删除</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token operator">-&gt;</span>head <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果要删除的节点是链表中第一个节点</span>
        list<span class="token operator">-&gt;</span>head <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> <span class="token comment">// 直接修改链表头指向下一个节点</span>
        node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// 清除已删除节点的 next，使其与链表彻底隔离</span>
        <span class="token function">free</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放 malloc 函数申请的空间</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    P_Node last <span class="token operator">=</span> list<span class="token operator">-&gt;</span>head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>last<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>last<span class="token operator">-&gt;</span>next <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            last<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
            <span class="token function">free</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        last <span class="token operator">=</span> last<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">print_list</span><span class="token punctuation">(</span>List list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span>head <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d--&gt;&quot;</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span>head<span class="token operator">-&gt;</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span>head <span class="token operator">=</span> list<span class="token punctuation">.</span>head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;NULL\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    List list <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">10</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 初始化链表</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">append_node</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token function">create_node</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">print_list</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">delete_node</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token function">search_node</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delete_node</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token function">search_node</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delete_node</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token function">search_node</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delete_node</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token function">search_node</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delete_node</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token function">search_node</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delete_node</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token function">search_node</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delete_node</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token function">search_node</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delete_node</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token function">search_node</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delete_node</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token function">search_node</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delete_node</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token function">search_node</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">print_list</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),D=p(`<br><h2 id="常见链表类型" tabindex="-1"><a class="header-anchor" href="#常见链表类型" aria-hidden="true">#</a> 常见链表类型</h2><p>常见的链表类型包括三种：</p><ul><li>单向链表：即前面介绍的普通链表。单向链表的节点包含值和指向下一节点的引用两项数据。我们将首个节点称为头节点，将最后一个节点称为尾节点，尾节点指向空 NULL 。</li><li>环形链表：如果我们令单向链表的尾节点指向头节点（首尾相接），则得到一个环形链表。在环形链表中，任意节点都可以视作头节点。</li><li>双向链表：与单向链表相比，双向链表记录了两个方向的引用。双向链表的节点定义同时包含指向后继节点（下一个节点）和前驱节点（上一个节点）的引用（指针）。相较于单向链表，双向链表更具灵活性，可以朝两个方向遍历链表，但相应地也需要占用更多的内存空间。</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> data<span class="token punctuation">;</span> <span class="token comment">// 节点数据域</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> next<span class="token punctuation">;</span> <span class="token comment">// 节点指针域，指向下一个节点的地址</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> prev<span class="token punctuation">;</span> <span class="token comment">// 节点指针域，指向上一个节点的地址</span>
<span class="token punctuation">}</span> Node<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),F=n("br",null,null,-1),J=n("figure",null,[n("img",{src:m,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),K=n("br",null,null,-1);function O(S,Y){const t=o("center"),c=o("ExternalLinkIcon");return i(),u("div",null,[h,_,a(t,null,{default:e(()=>[s("图 1：链表")]),_:1}),f,g,w,a(t,null,{default:e(()=>[s("图 2：链表的各个节点可以分散存储在内存各处（它们的内存地址无须连续）")]),_:1}),y,a(t,null,{default:e(()=>[s("code - 1：链表节点结构体定义（1）")]),_:1}),L,N,x,a(t,null,{default:e(()=>[s("图 3：头指针与头节点")]),_:1}),U,a(t,null,{default:e(()=>[s("code - 2：链表节点结构体定义（2）")]),_:1}),P,q,z,V,n("p",null,[s("创建链表节点一般情况下需要使用 "),n("a",B,[s("malloc"),a(c)]),s(" 方法，该方法返回一个指针。如果分配内存成功，返回可用内存的起始地址，如果失败，则返回 NULL。需要注意的是 malloc 返回的指针类型是通用指针类型 void * 需要根据程序需要进行强制类型转换。**每个使用 malloc 分配的内存可以确保是地址连续的内存空间。多次使用 malloc 分配内存时，不能确保每个独立内存的起始地址是连续的。**使用 malloc 方法得到的内存不会执行内存清零操作，由于动态内存区可被重复使用，因此，程序作者一定要对内存进行初始化操作。")]),E,a(t,null,{default:e(()=>[s("code - 3：创建链表节点")]),_:1}),j,C,a(t,null,{default:e(()=>[s("图 4：创建链表节点")]),_:1}),I,a(t,null,{default:e(()=>[s("code - 4：插入节点")]),_:1}),M,a(t,null,{default:e(()=>[s("code - 5：查找节点")]),_:1}),R,a(t,null,{default:e(()=>[s("code - 6：删除节点")]),_:1}),T,a(t,null,{default:e(()=>[s("code - 7：打印节点")]),_:1}),W,a(t,null,{default:e(()=>[s("code - 8：完整代码")]),_:1}),D,a(t,null,{default:e(()=>[s("code - 9：双向链表")]),_:1}),F,J,a(t,null,{default:e(()=>[s("图 5：常见链表类型")]),_:1}),K])}const A=l(b,[["render",O],["__file","index.html.vue"]]);export{A as default};
