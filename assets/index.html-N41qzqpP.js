import{_ as p,r as c,o as l,c as i,b as t,w as e,d as s,e as n,a as o}from"./app-vFDikrNs.js";const u="/assets/js_type-Ne2E26JT.svg",r="/assets/quote-uPWs6vii.svg",d="/assets/shallow_copy-BkJyy4ZF.svg",k="/assets/deep_copy-4C0rzuBM.svg",m={},v=n("h2",{id:"js-数据类型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#js-数据类型","aria-hidden":"true"},"#"),s(" JS 数据类型")],-1),b=n("p",null,"JavaScript 是一种动态类型的语言，这意味着变量可以在程序执行期间更改其数据类型。JavaScript 提供了多种数据类型，可以大致分为两类：基本数据类型（也称为原始值）和引用数据类型。",-1),_=n("figure",null,[n("img",{src:u,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),g=o(`<br><h3 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a> 基本数据类型</h3><p>基本数据类型直接存储在栈内存中，它们的值是不可变的，这是因为当我们想从新给基础类型赋值来“改变”它们的值时，实际上是创建了一个新的基本数据类型实例，并将其分配给当前的变量名中。</p><p>这样的好处在于，基本数据类型的值不可变，所以在代码中传递这些值时不需要担心它们被意外地修改。这有助于编写无副作用的纯函数，并提高程序的可预测性和稳定性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> myNum <span class="token operator">=</span> <span class="token number">42</span> <span class="token comment">// 创建一个数值变量</span>
myNum <span class="token operator">=</span> <span class="token number">43</span> <span class="token comment">// 不是改变原来的数值，而是创建一个新的数值并重新分配给 myNum</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,5),y=o(`<br><p>在 code - 1 中，myNum 变量最初存储的是整数 42，然后通过重新赋值将其改为 43。实际上，这是创建了两个不同的 Number 实例，而不是直接改变了原始数值的值。</p><h3 id="引用数据类型" tabindex="-1"><a class="header-anchor" href="#引用数据类型" aria-hidden="true">#</a> 引用数据类型</h3><p>引用数据类型存储在堆内存中，它们的值是可以改变的，值得注意的是 引用数据类型都是以 object 的基础上派生的，所以除了 null 类型以外，所有的引用类型都是 typeof 运算符返回结果为 object 的对象。</p><p>如果你需要区分具体的引用类型，可以使用 instanceof 操作符或者检查构造函数名称。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
window<span class="token punctuation">.</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
window<span class="token punctuation">.</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// Array</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),h=n("br",null,null,-1),f=n("h2",{id:"浅拷贝与深拷贝",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#浅拷贝与深拷贝","aria-hidden":"true"},"#"),s(" 浅拷贝与深拷贝")],-1),j=n("p",null,"在 JavaScript 中，深拷贝和浅拷贝一般情况都是在引用数据类型的基础上所讨论的，它们是两种不同的复制对象的方式，区别就在于复制的深度以及对原始对象和副本之间关系的影响。",-1),w=n("p",null,"这主要是因为在引用类型中，当我们将变量赋值给另一个变量时，实际上是将它们的引用地址复制了一份。这样，当我们对其中一个变量进行修改时，另一个变量也会受到影响。因此，为了避免这种情况的发生，所以我们通常需要使用拷贝的手段来创建一个新的副本。",-1),q=n("figure",null,[n("img",{src:r,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),x=o(`<br><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> objA <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Li Ming&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span>
<span class="token keyword">let</span> objB <span class="token operator">=</span> objA

objA<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Xiao Hua&quot;</span>

window<span class="token punctuation">.</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objA<span class="token punctuation">)</span> <span class="token comment">// { name: &quot;Xiao Hua&quot;, age: 18 }</span>
window<span class="token punctuation">.</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objB<span class="token punctuation">)</span> <span class="token comment">// { name: &quot;Xiao Hua&quot;, age: 18 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),A=n("br",null,null,-1),N=n("h3",{id:"浅拷贝",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#浅拷贝","aria-hidden":"true"},"#"),s(" 浅拷贝")],-1),J=n("p",null,"浅拷贝只复制了对象的第一层属性值，而不复制其内部的引用。当对象包含其他对象或数组作为属性时，浅拷贝只会创建这些嵌套对象或数组的引用副本，而不是实际的对象或数组本身。因此，如果修改了原对象中的嵌套对象或数组，那么这个修改也会反映到浅拷贝后的副本上，因为它们共享相同的引用。",-1),S=n("figure",null,[n("img",{src:d,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),B=o(`<br><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> objA <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Li Ming&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
<span class="token keyword">let</span> objB <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>objA <span class="token punctuation">}</span>

objA<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Xiao Hua&quot;</span>
objA<span class="token punctuation">.</span>score<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>

window<span class="token punctuation">.</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objA<span class="token punctuation">)</span> <span class="token comment">// { name: &quot;Xiao Hua&quot;, score: [100, 60, 90] }</span>
window<span class="token punctuation">.</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objB<span class="token punctuation">)</span> <span class="token comment">// { name: &quot;Li Ming&quot;, score: [100, 60, 90] }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),M=o(`<br><p>值得注意的是在 code - 5 中，我们修改了原对象中嵌套的数组，但这个修改没有反映到浅拷贝后的副本上，这是因为我们相当于重写了一个数组，如果重写的话，那么他相当于在堆内存中重新开辟了一块空间这样修改之后的这个数组与之前修改的数组会分别处在两个不同地址的内存空间中且他们互不影响，同理此种情况也适用于对象与函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> objA <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Li Ming&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
<span class="token keyword">let</span> objB <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>objA <span class="token punctuation">}</span>

objA<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Xiao Hua&quot;</span>
objA<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span>

window<span class="token punctuation">.</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objA<span class="token punctuation">)</span> <span class="token comment">// { name: &quot;Xiao Hua&quot;, score: [100, 60, 90] }</span>
window<span class="token punctuation">.</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objB<span class="token punctuation">)</span> <span class="token comment">// { name: &quot;Li Ming&quot;, score: [80, 60, 90] }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),O=n("br",null,null,-1),L=n("h3",{id:"深拷贝",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#深拷贝","aria-hidden":"true"},"#"),s(" 深拷贝")],-1),H=n("p",null,"深拷贝会递归地复制整个对象及其所有嵌套的对象和数组。它会在内存中为每个被复制的对象分配新的空间，并将所有的属性值都复制过去。这意味着即使原对象中的嵌套对象或数组发生了变化，也不会影响到深拷贝后的副本，因为它们各自拥有独立的内存空间。",-1),X=n("figure",null,[n("img",{src:k,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),C=o(`<br><p>实现深拷贝的方法有很多种，只要达到它们各自拥有独立的内存空间且互不干扰，例如使用 JSON.stringify 方法将对象转换为 JSON 字符串，然后使用 JSON.parse 方法将 JSON 字符串解析为新的对象，这样也可以实现深拷贝。但是，这种方法有一些局限性，例如它不能处理函数和 undefined。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> objA <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Li Ming&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function-variable function">select</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> objB <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>objA<span class="token punctuation">)</span><span class="token punctuation">)</span>

window<span class="token punctuation">.</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objA<span class="token punctuation">)</span> <span class="token comment">// { name: &quot;Li Ming&quot;, score: [80, 60, 90], select: ƒ, age: undefined }</span>
window<span class="token punctuation">.</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objB<span class="token punctuation">)</span> <span class="token comment">// { name: &quot;Li Ming&quot;, score: [80, 60, 90] }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),z=o(`<br><p>我们也可以手动去实现一个深拷贝，实现该方法通常需要递归地复制对象的所有属性，并创建任何嵌套对象或数组的新副本。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 对于非对象和null值，直接返回</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj

  <span class="token comment">// 根据obj的类型来决定新创建对象的类型</span>
  <span class="token keyword">let</span> copy <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 递归调用deepCopy处理每个属性</span>
      copy<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> copy
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),V=n("br",null,null,-1);function E(P,T){const a=c("center");return l(),i("div",null,[v,b,_,t(a,null,{default:e(()=>[s("图 1：JS 数据类型")]),_:1}),g,t(a,null,{default:e(()=>[s("code - 1：给基础类型赋值")]),_:1}),y,t(a,null,{default:e(()=>[s("code - 2：区分具体的引用类型")]),_:1}),h,f,j,w,q,t(a,null,{default:e(()=>[s("图 2：引用数据类型")]),_:1}),x,t(a,null,{default:e(()=>[s("code - 3：修改原变量时另一个变量也会受到影响")]),_:1}),A,N,J,S,t(a,null,{default:e(()=>[s("图 3：浅拷贝")]),_:1}),B,t(a,null,{default:e(()=>[s("code - 4：修改原对象中的数组，反映到浅拷贝后的副本上")]),_:1}),M,t(a,null,{default:e(()=>[s("code - 5：重写一个数组并赋值")]),_:1}),O,L,H,X,t(a,null,{default:e(()=>[s("图 3：深拷贝")]),_:1}),C,t(a,null,{default:e(()=>[s("code - 6：JSON.parse 与 JSON.stringify")]),_:1}),z,t(a,null,{default:e(()=>[s("code - 7：手动实现深拷贝")]),_:1}),V])}const W=p(m,[["render",E],["__file","index.html.vue"]]);export{W as default};
