import{_ as o,r as c,o as l,c as i,d as e,w as t,e as s,b as n,a as p}from"./app-7QKrQFIj.js";const u="/assets/queue-HcorcXeU.svg",r="/assets/queue_push_pop-R6GAhRJN.svg",d="/assets/queue_list-BiNePROH.svg",k="/assets/queue_list_push-qxdi9pWT.svg",v="/assets/queue_list_pop-51h_-DOM.svg",m="/assets/queue_array-siSr1qAp.svg",b="/assets/queue_array_push-q2NRd60c.svg",_="/assets/queue_array_pop-bRZZqoFr.svg",g="/assets/modulo_arithmetic-8tum6-_1.svg",f={},h=n("p",null,"在计算机科学中，数据结构是软件开发的基础，它们负责组织和存储数据以优化算法性能。其中，队列是一种基础且广泛应用的线性数据结构，尤其在多任务处理、消息传递、操作系统调度等领域具有重要作用。本文将重点探讨如何在 C 语言中实现并操作队列。",-1),q=n("h2",{id:"队列的概念",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#队列的概念","aria-hidden":"true"},"#"),s(" 队列的概念")],-1),y=n("p",null,[s("队列（queue）遵循"),n("strong",null,"先进先出"),s("的原则，就像现实生活中排队等待服务的情景一样，最先到达的元素最先离开。")],-1),w=n("figure",null,[n("img",{src:u,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),x=n("br",null,null,-1),z=n("h2",{id:"队列的常用操作",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#队列的常用操作","aria-hidden":"true"},"#"),s(" 队列的常用操作")],-1),N=n("p",null,"我们将队列头部称为“队首”，尾部称为“队尾”，队列有两个主要的操作：“入队”与“出队”，将把元素加入队尾的操作称为“入队”，删除队首元素的操作称为“出队”。",-1),L=n("figure",null,[n("img",{src:r,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),P=p('<br><h2 id="队列的实现" tabindex="-1"><a class="header-anchor" href="#队列的实现" aria-hidden="true">#</a> 队列的实现</h2><p>为了实现队列，我们需要一种数据结构，可以在一端添加元素，并在另一端删除元素，链表和数组都符合要求。</p><h3 id="基于链表实现" tabindex="-1"><a class="header-anchor" href="#基于链表实现" aria-hidden="true">#</a> 基于链表实现</h3><p>我们可以将链表的“头节点”和“尾节点”分别视为“队首”和“队尾”，规定队尾仅可添加节点，队首仅可删除节点。</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',6),Q=p(`<br><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> data<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Node<span class="token punctuation">,</span> <span class="token operator">*</span>P_Node<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>
    P_Node front<span class="token punctuation">;</span> <span class="token comment">// 队头指针</span>
    P_Node rear<span class="token punctuation">;</span>  <span class="token comment">// 队尾指针</span>
    <span class="token keyword">int</span> size<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Queue<span class="token punctuation">,</span> <span class="token operator">*</span>P_Queue<span class="token punctuation">;</span>

P_Queue <span class="token function">create_queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    P_Queue queue <span class="token operator">=</span> <span class="token punctuation">(</span>P_Queue<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>queue <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        queue<span class="token operator">-&gt;</span>front <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        queue<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        queue<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> queue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

P_Node <span class="token function">create_node</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    P_Node node <span class="token operator">=</span> <span class="token punctuation">(</span>P_Node<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node<span class="token operator">-&gt;</span>data <span class="token operator">=</span> value<span class="token punctuation">;</span>
        node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),U=n("br",null,null,-1),R=n("p",null,"入队操作：将要入队的节点插入到当前队列尾节点的后面，最后将尾节点变更为当前将要入队的节点。",-1),B=n("figure",null,[n("img",{src:k,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),V=p(`<br><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>P_Queue queue<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    P_Node node <span class="token operator">=</span> <span class="token function">create_node</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to allocate node\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token operator">-&gt;</span>front <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 当队列中没有节点时，头节点与尾节点均指向将要入队的节点</span>
        queue<span class="token operator">-&gt;</span>front <span class="token operator">=</span> queue<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 将要入队的节点插入到当前队列尾节点的后面</span>
        queue<span class="token operator">-&gt;</span>rear<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
        <span class="token comment">// 更换尾节点的指向，保证队列的尾节点总是指向实际的最后一个节点。</span>
        queue<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    queue<span class="token operator">-&gt;</span>size<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),C=n("br",null,null,-1),A=n("p",null,"出队操作：将当前队列头节点变更为头节点后下一个节点。",-1),F=n("figure",null,[n("img",{src:v,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),H=p(`<br><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span>P_Queue queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token operator">-&gt;</span>size <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> queue<span class="token operator">-&gt;</span>front <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Queue is null\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    P_Node temp <span class="token operator">=</span> queue<span class="token operator">-&gt;</span>front<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> temp<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    queue<span class="token operator">-&gt;</span>front <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    queue<span class="token operator">-&gt;</span>size<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),O=n("br",null,null,-1),S=n("h3",{id:"基于数组实现",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#基于数组实现","aria-hidden":"true"},"#"),s(" 基于数组实现")],-1),T=n("p",null,"在数组中删除首元素时需要对当前数组进行遍历以确定首元素所在位置，这会导致出队操作效率较低。然而，我们可以采用以下巧妙方法来避免这个问题。 我们可以使用一个变量 front 指向队首元素的索引，并维护一个变量 size 用于记录队列长度。定义 rear = front + size ，这个公式计算出的 rear 指向队尾元素之后的下一个位置，基于此设计，数组中包含元素的有效区间为 [front, rear - 1]。",-1),Z=n("figure",null,[n("img",{src:m,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),D=p(`<br><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>nums<span class="token punctuation">;</span>
    <span class="token keyword">int</span> front<span class="token punctuation">;</span>
    <span class="token keyword">int</span> size<span class="token punctuation">;</span>
    <span class="token keyword">int</span> cap<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Queue<span class="token punctuation">,</span> <span class="token operator">*</span>P_Queue<span class="token punctuation">;</span>

P_Queue <span class="token function">create_queue</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    P_Queue queue <span class="token operator">=</span> <span class="token punctuation">(</span>P_Queue<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>queue <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        queue<span class="token operator">-&gt;</span>cap <span class="token operator">=</span> cap<span class="token punctuation">;</span>
        queue<span class="token operator">-&gt;</span>nums <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> queue<span class="token operator">-&gt;</span>cap<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token operator">-&gt;</span>nums <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        queue<span class="token operator">-&gt;</span>front <span class="token operator">=</span> queue<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> queue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),E=n("br",null,null,-1),G=n("p",null,"入队操作：将要入队的元素赋值给 rear 索引处，并将 size 增加 1 。",-1),J=n("figure",null,[n("img",{src:b,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),M=p(`<br><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>P_Queue queue<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token operator">-&gt;</span>size <span class="token operator">==</span> queue<span class="token operator">-&gt;</span>cap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Queue is full\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 将输入元素赋值给 rear 索引处</span>
    <span class="token keyword">int</span> rear <span class="token operator">=</span> <span class="token punctuation">(</span>queue<span class="token operator">-&gt;</span>front <span class="token operator">+</span> queue<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span> <span class="token operator">%</span> queue<span class="token operator">-&gt;</span>cap<span class="token punctuation">;</span>
    queue<span class="token operator">-&gt;</span>nums<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>

    <span class="token comment">// 并将 size 增加 1</span>
    queue<span class="token operator">-&gt;</span>size<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),W=n("br",null,null,-1),X=n("figure",null,[n("img",{src:_,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),j=p(`<br><p>出队操作：只需将 front 增加 1 ，并将 size 减少 1 。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span>P_Queue queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token operator">-&gt;</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Queue is empty\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> elem <span class="token operator">=</span> queue<span class="token operator">-&gt;</span>nums<span class="token punctuation">[</span>queue<span class="token operator">-&gt;</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> elem<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 将 front 增加 1</span>
    queue<span class="token operator">-&gt;</span>front <span class="token operator">=</span> <span class="token punctuation">(</span>queue<span class="token operator">-&gt;</span>front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> queue<span class="token operator">-&gt;</span>cap<span class="token punctuation">;</span>

    <span class="token comment">// 将 size 减少 1</span>
    queue<span class="token operator">-&gt;</span>size<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),I=n("br",null,null,-1),K=n("h2",{id:"为什么要用模运算",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#为什么要用模运算","aria-hidden":"true"},"#"),s(" 为什么要用模运算")],-1),Y=n("p",null,"模运算对于处理循环序列非常有用，例如，在当前数组或链表的索引循环中，通过使用模运算可以让索引值始终保持在有效范围内。例如，当你有一个长度为 n 的数组时，计算下标 i % n 可以确保下标总是在 0 到（n - 1）之间。",-1),$=n("figure",null,[n("img",{src:g,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),nn=n("br",null,null,-1);function sn(an,en){const a=c("center");return l(),i("div",null,[h,q,y,w,e(a,null,{default:t(()=>[s("图 1：队列")]),_:1}),x,z,N,L,e(a,null,{default:t(()=>[s("图 2：队列遵循先入先出")]),_:1}),P,e(a,null,{default:t(()=>[s("图 3：基于链表实现队列")]),_:1}),Q,e(a,null,{default:t(()=>[s("code - 1：链式实现队列")]),_:1}),U,R,B,e(a,null,{default:t(()=>[s("图 4：基于链表实现队列入队操作")]),_:1}),V,e(a,null,{default:t(()=>[s("code - 2：链式实现队列出队操作")]),_:1}),C,A,F,e(a,null,{default:t(()=>[s("图 5：基于链表实现队列出队操作")]),_:1}),H,e(a,null,{default:t(()=>[s("code - 3：链式实现队列入队操作")]),_:1}),O,S,T,Z,e(a,null,{default:t(()=>[s("图 6：基于数组实现队列")]),_:1}),D,e(a,null,{default:t(()=>[s("code - 4：数组实现队列")]),_:1}),E,G,J,e(a,null,{default:t(()=>[s("图 7：基于数组实现队列入队操作")]),_:1}),M,e(a,null,{default:t(()=>[s("code - 5：数组实现队列入队操作")]),_:1}),W,X,e(a,null,{default:t(()=>[s("图 8：基于数组实现队列出队操作")]),_:1}),j,e(a,null,{default:t(()=>[s("code - 6：数组实现队列出队操作")]),_:1}),I,K,Y,$,e(a,null,{default:t(()=>[s("图 9：模运算")]),_:1}),nn])}const pn=o(f,[["render",sn],["__file","index.html.vue"]]);export{pn as default};
