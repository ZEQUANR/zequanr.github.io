const n=JSON.parse('{"key":"v-53bd3924","path":"/Go/Array/","title":"Array","lang":"zh-CN","frontmatter":{"title":"Array","icon":"material-symbols:data-array","author":"王泽权","date":"2023-01-06T00:00:00.000Z","category":["Go"],"tag":["Go"],"sticky":true,"star":true,"copyright":"王泽权","description":"Go 语言中的数组可以简单理解为存储同一种数据类型且存储数量（长度）固定的序列，数组在规划内存的详细布局时很有用，它不仅是切片的构建块，Go 语言中许多基础的数据结构都是通过数组来实现数据的存储工作。 数组这个概念在许多语言中皆有存在，而 Go 语言是一门属于 C 语言家族的编程语言，但在 Go 语言和 C 语言中，数组的工作方式有很大的不同。 package main import ( \\t\\"fmt\\" \\"reflect\\" ) func show(x [4]int) { fmt.Printf(\\"Address(Array) = %p --&gt; %d\\\\n\\", &amp;x, x) } func compare(x [4]int, y [5]int) { fmt.Printf(\\"copyArray == compareArray %t \\\\n\\", reflect.TypeOf(x) == reflect.TypeOf(y)) } func main() { Array := [4]int{ 0, 1, 2, 3 } var copyArray [4]int var compareArray [5]int copyArray = Array fmt.Printf(\\"copyArray --&gt; %d \\\\n\\", copyArray) fmt.Printf(\\"Address(Array) = %p --&gt; %d\\\\n\\", &amp;Array, Array) fmt.Printf(\\"Address(copyArray) = %p --&gt; %d\\\\n\\", &amp;copyArray, copyArray) show(Array) compare(copyArray, compareArray) } // L22: copyArray --&gt; [0 1 2 3] // L23: Address(Array) = 0xc0000a0000 --&gt; [0 1 2 3] // L24: Address(copyArray) = 0xc0000a0020 --&gt; [0 1 2 3] // L25: Address(Array) = 0xc0000a00c0 --&gt; [0 1 2 3] // L26: copyArray == compareArray false","head":[["meta",{"property":"og:url","content":"https://zequanr.github.io/Go/Array/"}],["meta",{"property":"og:site_name","content":"ZEQUANR"}],["meta",{"property":"og:title","content":"Array"}],["meta",{"property":"og:description","content":"Go 语言中的数组可以简单理解为存储同一种数据类型且存储数量（长度）固定的序列，数组在规划内存的详细布局时很有用，它不仅是切片的构建块，Go 语言中许多基础的数据结构都是通过数组来实现数据的存储工作。 数组这个概念在许多语言中皆有存在，而 Go 语言是一门属于 C 语言家族的编程语言，但在 Go 语言和 C 语言中，数组的工作方式有很大的不同。 package main import ( \\t\\"fmt\\" \\"reflect\\" ) func show(x [4]int) { fmt.Printf(\\"Address(Array) = %p --&gt; %d\\\\n\\", &amp;x, x) } func compare(x [4]int, y [5]int) { fmt.Printf(\\"copyArray == compareArray %t \\\\n\\", reflect.TypeOf(x) == reflect.TypeOf(y)) } func main() { Array := [4]int{ 0, 1, 2, 3 } var copyArray [4]int var compareArray [5]int copyArray = Array fmt.Printf(\\"copyArray --&gt; %d \\\\n\\", copyArray) fmt.Printf(\\"Address(Array) = %p --&gt; %d\\\\n\\", &amp;Array, Array) fmt.Printf(\\"Address(copyArray) = %p --&gt; %d\\\\n\\", &amp;copyArray, copyArray) show(Array) compare(copyArray, compareArray) } // L22: copyArray --&gt; [0 1 2 3] // L23: Address(Array) = 0xc0000a0000 --&gt; [0 1 2 3] // L24: Address(copyArray) = 0xc0000a0020 --&gt; [0 1 2 3] // L25: Address(Array) = 0xc0000a00c0 --&gt; [0 1 2 3] // L26: copyArray == compareArray false"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://zequanr.github.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-25T09:54:30.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Array"}],["meta",{"property":"article:author","content":"王泽权"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:published_time","content":"2023-01-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-25T09:54:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Array\\",\\"image\\":[\\"https://zequanr.github.io/\\"],\\"datePublished\\":\\"2023-01-06T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-25T09:54:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"王泽权\\"}]}"]]},"headers":[{"level":2,"title":"数据结构","slug":"数据结构","link":"#数据结构","children":[]},{"level":2,"title":"类型声明","slug":"类型声明","link":"#类型声明","children":[]}],"git":{"createdTime":1706176470000,"updatedTime":1706176470000,"contributors":[{"name":"ZEQUANR","email":"675897584@qq.com","commits":1}]},"readingTime":{"minutes":4.99,"words":1496},"filePathRelative":"Go/Array/README.md","localizedDate":"2023年1月6日","excerpt":"<p>Go 语言中的数组可以简单理解为存储同一种数据类型且存储数量（长度）固定的序列，数组在规划内存的详细布局时很有用，它不仅是切片的构建块，Go 语言中许多基础的数据结构都是通过数组来实现数据的存储工作。</p>\\n<p>数组这个概念在许多语言中皆有存在，而 Go 语言是一门属于 C 语言家族的编程语言，但在 Go 语言和 C 语言中，数组的工作方式有很大的不同。</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">package</span> main\\n\\n<span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">(</span>\\n\\t<span class=\\"token string\\">\\"fmt\\"</span>\\n    <span class=\\"token string\\">\\"reflect\\"</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">show</span><span class=\\"token punctuation\\">(</span>x <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Address(Array) = %p --&gt; %d\\\\n\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">&amp;</span>x<span class=\\"token punctuation\\">,</span> x<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">compare</span><span class=\\"token punctuation\\">(</span>x <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">,</span> y <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"copyArray == compareArray  %t \\\\n\\"</span><span class=\\"token punctuation\\">,</span> reflect<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">TypeOf</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> reflect<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">TypeOf</span><span class=\\"token punctuation\\">(</span>y<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    Array <span class=\\"token operator\\">:=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">{</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span> <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">var</span> copyArray <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">int</span>\\n    <span class=\\"token keyword\\">var</span> compareArray <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">int</span>\\n    copyArray <span class=\\"token operator\\">=</span> Array\\n\\n    fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"copyArray --&gt; %d \\\\n\\"</span><span class=\\"token punctuation\\">,</span> copyArray<span class=\\"token punctuation\\">)</span>\\n    fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Address(Array) = %p --&gt; %d\\\\n\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">&amp;</span>Array<span class=\\"token punctuation\\">,</span> Array<span class=\\"token punctuation\\">)</span>\\n    fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Address(copyArray) = %p --&gt; %d\\\\n\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">&amp;</span>copyArray<span class=\\"token punctuation\\">,</span> copyArray<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token function\\">show</span><span class=\\"token punctuation\\">(</span>Array<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token function\\">compare</span><span class=\\"token punctuation\\">(</span>copyArray<span class=\\"token punctuation\\">,</span> compareArray<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// L22: copyArray --&gt; [0 1 2 3] </span>\\n<span class=\\"token comment\\">// L23: Address(Array) = 0xc0000a0000 --&gt; [0 1 2 3]</span>\\n<span class=\\"token comment\\">// L24: Address(copyArray) = 0xc0000a0020 --&gt; [0 1 2 3]</span>\\n<span class=\\"token comment\\">// L25: Address(Array) = 0xc0000a00c0 --&gt; [0 1 2 3]</span>\\n<span class=\\"token comment\\">// L26: copyArray == compareArray  false</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
