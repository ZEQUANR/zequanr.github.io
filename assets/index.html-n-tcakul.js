import{_ as o,r as i,o as c,c as l,d as e,w as t,e as s,b as n,a as p}from"./app-IMuBw9Ml.js";const u="/assets/maximum-and-minimum-heap-NutveNpQ.svg",d="/assets/index-map-wGE3vzHu.svg",r="/assets/minimum-heap-T34O0Dxo.svg",k="/assets/heap-interface-3Son-4lm.svg",m="/assets/up-lIqhm2D8.svg",v="/assets/down-ZgsjUOm7.svg",b="/assets/init-EbI5RlTa.svg",h="/assets/push-JCx8qf9n.svg",f={},g=n("p",null,"heap 是一种常见的数据结构，本周将带大家来了解一下 Go 语言标准库中的 Heap 包，首先在此之前我们需要对堆(heap) 有所概念，简单理解就是用数组实现的完全二叉树，在 Go 官方概述中有这样说道“堆是一棵树，其属性是每个节点都是其子树中的最小值节点”，那么堆的属性又是什么呢？",-1),_=n("p",null,[s("所谓的“堆属性”指的就是最大堆与最小堆，这两者之间最大的区别在于数据的排列方式不同，如图 1 所示在最大堆中，父节点的值比每一个子节点的值都要大。在最小堆中，父节点的值比每一个子节点的值都要小，在 Go 语言中所采用的是最小堆，树中最小的元素是根，索引为 0。 "),n("img",{src:u,alt:"",loading:"lazy"})],-1),w=p(`<br><p>通过刚刚的讲述想必我们已经对堆有了一个基础的概念，那问题来了，虽然堆在物理结构上是一个一维的数组，但在存储逻辑上是一棵完全二叉树，所以堆的数据结构是非线性的，那它即没有指针指向当前节点的父节点或子节点，也没有多余的空间用来存储当前节点信息，我们该如何对当前节点元素完成父子节点的定位操作。</p><p>其实不然，我们只需要通过对数组中的索引(index) 进行简单计算就可得到当前节点的父节点以及子节点，并不需要过多的存储空间，如 code - 1 所示我们可以给当前节点与其父或子节点创建一个映射关系，使得他们可以一一对应。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> index<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right <span class="token builtin">int</span>

index <span class="token operator">=</span> <span class="token number">3</span>

parent <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>
left <span class="token operator">=</span> index <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span>
right <span class="token operator">=</span> index <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),x=n("br",null,null,-1),y=n("figure",null,[n("img",{src:d,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),L=n("br",null,null,-1),j=n("p",null,"值得注意的是堆并不是真正的完全二叉树，他们之间虽有许多相似之处，但差别还是很大的首先我们都知道在完全二叉树中左子节点必须比父节点小，右子节点必须必比父节点大，而在堆中则不需要这样，最小堆中子节点都必须要比父节点大，并且在存储方面完全二叉树所占用的内存空间也要比堆大上许多，而且我们也一直在强调是完全二叉树并非普通的二叉树，其原因我们也可想而知如图 3 所示在堆中当前层级的所有节点都没有填满之前是不允许开始下一层的填充的，这也符合完全二叉树的定义。",-1),I=n("figure",null,[n("img",{src:r,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),P=p(`<br><p>关于 heap 的概念就先讲到这里，言归正传，首先我们先开看一下 heap 包中的 interface 都定义了哪些方法，从 code - 2 中我们可以看到 heap 包中的 Interface 继承了 sort 中 Interface 的方法，那我们就来简单了解一下 sort 包中的 interface 中都有什么方法，如 code - 3 中所示共有三个方法分别为：Len()、Less()、Swap()，在加上 heap 包中 Interface 上的 Push() 与 Pop() 方法共为五个方法，这五个方法需要使用者根据不同的数据类型去实现。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// src/container/heap/heap.go</span>

<span class="token comment">// Note that Push and Pop in this interface are for package heap&#39;s</span>
<span class="token comment">// implementation to call. To add and remove things from the heap,</span>
<span class="token comment">// use heap.Push and heap.Pop.</span>
<span class="token keyword">type</span> Interface <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	sort<span class="token punctuation">.</span>Interface
	<span class="token function">Push</span><span class="token punctuation">(</span>x any<span class="token punctuation">)</span> <span class="token comment">// add x as element Len()</span>
	<span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> any   <span class="token comment">// remove and return element Len() - 1.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),S=p(`<br><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// src/sort/sort.go</span>

<span class="token comment">// An implementation of Interface can be sorted by the routines in this package.</span>
<span class="token comment">// The methods refer to elements of the underlying collection by integer index.</span>
<span class="token keyword">type</span> Interface <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token comment">// Len is the number of elements in the collection.</span>
	<span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>

	<span class="token comment">// Less reports whether the element with index i</span>
	<span class="token comment">// must sort before the element with index j.</span>
	<span class="token comment">//</span>
	<span class="token comment">// If both Less(i, j) and Less(j, i) are false,</span>
	<span class="token comment">// then the elements at index i and j are considered equal.</span>
	<span class="token comment">// Sort may place equal elements in any order in the final result,</span>
	<span class="token comment">// while Stable preserves the original input order of equal elements.</span>
	<span class="token comment">//</span>
	<span class="token comment">// Less must describe a transitive ordering:</span>
	<span class="token comment">//  - if both Less(i, j) and Less(j, k) are true, then Less(i, k) must be true as well.</span>
	<span class="token comment">//  - if both Less(i, j) and Less(j, k) are false, then Less(i, k) must be false as well.</span>
	<span class="token comment">//</span>
	<span class="token comment">// Note that floating-point comparison (the &lt; operator on float32 or float64 values)</span>
	<span class="token comment">// is not a transitive ordering when not-a-number (NaN) values are involved.</span>
	<span class="token comment">// See Float64Slice.Less for a correct implementation for floating-point values.</span>
	<span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>

	<span class="token comment">// Swap swaps the elements with indexes i and j.</span>
	<span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),N=n("br",null,null,-1),T=n("p",null,[s("了解了 Interface 的定义之后，接下来就来看看 heap 包中的代码都有些什么？如图 4 除了 Interface 中我们需要定义的五个方法外，包中还包括 7 个方法，通过函数名中我们可以观察到，其中有 5 个方法的函数名为首字母大写，那这也说明此 5 个方法为 heap 包中所对外提供的方法，剩余两个仅为本包中的方法。 "),n("img",{src:k,alt:"",loading:"lazy"})],-1),z=p(`<br><p>第一个先来看看 up 方法 code - 4，首先来看传入的函数参数分别是什么 Interface 类型的 h 与 int 类型的 j，其中 h 就是我们刚刚看到的 code - 2，j 就代表我们当前所传入的节点位置，参数看完了就来看看具体的逻辑，L4：启用一个 for 循环，L5：根据传入的 j 计算出当前的父节点 i，L6：如果当前节点是堆顶或者父节点的值小于等于子节点的值则直接退出循环，L9：父子节点数值交换，L10：j 被赋值为父节点进行下一次循环。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// src/container/heap/heap.go</span>

<span class="token keyword">func</span> <span class="token function">up</span><span class="token punctuation">(</span>h Interface<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		i <span class="token operator">:=</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token comment">// parent</span>
		<span class="token keyword">if</span> i <span class="token operator">==</span> j <span class="token operator">||</span> <span class="token operator">!</span>h<span class="token punctuation">.</span><span class="token function">Less</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
		h<span class="token punctuation">.</span><span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
		j <span class="token operator">=</span> i
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),q=n("br",null,null,-1),R=n("figure",null,[n("img",{src:m,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),O=p(`<br><p>随后就是 down() 方法，老样子我们先来看看传入的参数 Interface 类型的 h 以及 int 类型的 i0 和 n 其中 i0 代表当前最小堆的一个父节点，n 代表当前最小堆的数组长度，在来看具体逻辑，L5：启用一个 for 循环，L6：计算出左子节点赋值给 j1，L7：判断左子节点是否大于等于当前数组的长度或者在 L6 的计算中是否存在溢出两者中有一方条件达成即退出循环，L10：运行到此处时说明 L7 的判断条件并没有成立，将左子节点记录下来赋值给 j，L11：计算出右子节点赋值给 j2，判断右子节点是否存在并且右子节点是否小于左子节点，是的话之前被记录下来的左子节点 j 从新赋值成右子节点，反之则继续执行接下来的语句不会对 j 进行任何操作，L14：判断之前记录下来的子节点 j 所存储的数值是否大于等于其父节点所存储的数值，是的话则直接退出循环，否的话父子节点数值交换且之前记录下来的子节点 j 变成父节点进行下一次循环，最后在返回一个 bool 值，bool 值为 true 时说明当前的父节点并不是之前传入的父节点了对此进行过操作，为 false 时说明没有对其进行操作。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// src/container/heap/heap.go</span>

<span class="token keyword">func</span> <span class="token function">down</span><span class="token punctuation">(</span>h Interface<span class="token punctuation">,</span> i0<span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	i <span class="token operator">:=</span> i0
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		j1 <span class="token operator">:=</span> <span class="token number">2</span><span class="token operator">*</span>i <span class="token operator">+</span> <span class="token number">1</span>
		<span class="token keyword">if</span> j1 <span class="token operator">&gt;=</span> n <span class="token operator">||</span> j1 <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span> <span class="token comment">// j1 &lt; 0 after int overflow</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
		j <span class="token operator">:=</span> j1 <span class="token comment">// left child</span>
		<span class="token keyword">if</span> j2 <span class="token operator">:=</span> j1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j2 <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span><span class="token function">Less</span><span class="token punctuation">(</span>j2<span class="token punctuation">,</span> j1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			j <span class="token operator">=</span> j2 <span class="token comment">// = 2*i + 2  // right child</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>h<span class="token punctuation">.</span><span class="token function">Less</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
		h<span class="token punctuation">.</span><span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
		i <span class="token operator">=</span> j
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> i <span class="token operator">&gt;</span> i0
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),F=n("br",null,null,-1),C=n("figure",null,[n("img",{src:v,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),G=p(`<br><p>Init() 方法，从函数名中我们也能猜到这是一个初始化的方法，具体过程也相对简单，要留心的是在 L9 中我们获取的是数组的长度，比我们的索引位要多 1 ，所以在 L10 计算节点的过程中我们可以理解为 (index + 1) / 2 - 1 该算式等价于 (index - 1) / 2，这么看来计算所得为最后一个节点的父节点，随后依次调用 down() 方法进行初始化操作。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// src/sort/sort.go</span>

<span class="token comment">// Init establishes the heap invariants required by the other routines in this package.</span>
<span class="token comment">// Init is idempotent with respect to the heap invariants</span>
<span class="token comment">// and may be called whenever the heap invariants may have been invalidated.</span>
<span class="token comment">// The complexity is O(n) where n = h.Len().</span>
<span class="token keyword">func</span> <span class="token function">Init</span><span class="token punctuation">(</span>h Interface<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// heapify</span>
	n <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> n<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{</span>
		<span class="token function">down</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),V=n("br",null,null,-1),B=n("figure",null,[n("img",{src:b,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),E=p(`<br><p>push() 方法，从注解中我们也可以看到该方法将元素 x 推入堆中，随后调用 up() 方法从下到上依次校验，既是从下到上所以当我们定义 push() 函数添加元素时也只能在最后位置添加。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// src/sort/sort.go</span>

<span class="token comment">// Push pushes the element x onto the heap.</span>
<span class="token comment">// The complexity is O(log n) where n = h.Len().</span>
<span class="token keyword">func</span> <span class="token function">Push</span><span class="token punctuation">(</span>h Interface<span class="token punctuation">,</span> x any<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	h<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
	<span class="token function">up</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> h<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),H=n("br",null,null,-1),D=n("figure",null,[n("img",{src:h,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),A=p(`<br><p>Pop() 方法，从堆中删除并返回最小元素，首先计算出当前数组中最后一个元素所在节点位置即当前元素索引，随后调用 Swap() 方法将最后一个元素与堆顶元素交换，在调用 down() 方法对堆从上到下调整各节点位置使之保持最小堆属性，在使用我们定义 Pop 方法弹出并删除该元素。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// src/sort/sort.go</span>

<span class="token comment">// Pop removes and returns the minimum element (according to Less) from the heap.</span>
<span class="token comment">// The complexity is O(log n) where n = h.Len().</span>
<span class="token comment">// Pop is equivalent to Remove(h, 0).</span>
<span class="token keyword">func</span> <span class="token function">Pop</span><span class="token punctuation">(</span>h Interface<span class="token punctuation">)</span> any <span class="token punctuation">{</span>
	n <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
	h<span class="token punctuation">.</span><span class="token function">Swap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
	<span class="token function">down</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
	<span class="token keyword">return</span> h<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),J=p(`<br><p>Remove() 方法，从堆中删除并返回索引为 i 的元素，该方法与 Pop() 方法类似，不过该方法可以指定元素，首先计算出当前数组中最后一个元素所在节点位置即当前元素索引，随后判断如果正是当前元素直接返回，不是就与最后一个元素进行交换并调用 down() 方法进行判断，还记得我们 down() 方法是有返回值的吗，它会判断自己有没有对节点进行操作，当我们判断 down() 方法没有进行操作时则说明目标位置在堆的最后一层，这时执行 up 操作向上层进行调整。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// src/sort/sort.go</span>

<span class="token comment">// Remove removes and returns the element at index i from the heap.</span>
<span class="token comment">// The complexity is O(log n) where n = h.Len().</span>
<span class="token keyword">func</span> <span class="token function">Remove</span><span class="token punctuation">(</span>h Interface<span class="token punctuation">,</span> i <span class="token builtin">int</span><span class="token punctuation">)</span> any <span class="token punctuation">{</span>
	n <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
	<span class="token keyword">if</span> n <span class="token operator">!=</span> i <span class="token punctuation">{</span>
		h<span class="token punctuation">.</span><span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n<span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">down</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">up</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> h<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),M=p(`<br><p>Fix() 方法，修复在索引 i 的元素更改其值后重新建立堆排序的问题，该函数与 Remove() 方法中的部分逻辑等效，在这里就不在从新介绍了。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// src/sort/sort.go</span>

<span class="token comment">// Fix re-establishes the heap ordering after the element at index i has changed its value.</span>
<span class="token comment">// Changing the value of the element at index i and then calling Fix is equivalent to,</span>
<span class="token comment">// but less expensive than, calling Remove(h, i) followed by a Push of the new value.</span>
<span class="token comment">// The complexity is O(log n) where n = h.Len().</span>
<span class="token keyword">func</span> <span class="token function">Fix</span><span class="token punctuation">(</span>h Interface<span class="token punctuation">,</span> i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">down</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> i<span class="token punctuation">,</span> h<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">up</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Q=n("br",null,null,-1);function U(Z,K){const a=i("center");return c(),l("div",null,[g,_,e(a,null,{default:t(()=>[s("图 1 ：最大堆与最小堆")]),_:1}),w,e(a,null,{default:t(()=>[s("code - 1 ：index 映射关系")]),_:1}),x,y,e(a,null,{default:t(()=>[s("图 2 ：index 映射关系")]),_:1}),L,j,I,e(a,null,{default:t(()=>[s("图 3 ：Minimum Heap")]),_:1}),P,e(a,null,{default:t(()=>[s("code - 2 ：heap 包 Interface")]),_:1}),S,e(a,null,{default:t(()=>[s("code - 3 ：sort 包 Interface")]),_:1}),N,T,e(a,null,{default:t(()=>[s("图 4 ：heap 包整体结构")]),_:1}),z,e(a,null,{default:t(()=>[s("code - 4 ：up() 方法")]),_:1}),q,R,e(a,null,{default:t(()=>[s("图 5 ：up() 方法")]),_:1}),O,e(a,null,{default:t(()=>[s("code - 5 ：down() 方法")]),_:1}),F,C,e(a,null,{default:t(()=>[s("图 6 ：down() 方法")]),_:1}),G,e(a,null,{default:t(()=>[s("code - 6：Init() 方法")]),_:1}),V,B,e(a,null,{default:t(()=>[s("图 7 ：Init() 方法")]),_:1}),E,e(a,null,{default:t(()=>[s("code - 7 ：Push() 方法")]),_:1}),H,D,e(a,null,{default:t(()=>[s("图 8 ：Push() 方法")]),_:1}),A,e(a,null,{default:t(()=>[s("code - 8 ：Pop() 方法")]),_:1}),J,e(a,null,{default:t(()=>[s("code - 9 ：Remove() 方法")]),_:1}),M,e(a,null,{default:t(()=>[s("code - 10 ：Fix() 方法")]),_:1}),Q])}const X=o(f,[["render",U],["__file","index.html.vue"]]);export{X as default};
