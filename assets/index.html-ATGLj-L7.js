import{_ as l,r as p,o as c,c as i,d as a,w as e,e as s,b as n,a as u}from"./app-WYeiPlGe.js";const r="/assets/b_one-AUzWUWeQ.svg",k="/assets/b_two-N3q_JHKA.svg",d="/assets/b_three-c4Ehukqk.svg",m="/assets/b_four-cBZsfaqF.svg",_="/assets/b_five-eapVb-OY.svg",v="/assets/b_seven-hCb90MHn.svg",b={},g=n("p",null,"给定一个拥有 n 个不同元素的有序（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。",-1),f=n("p",null,"当遇到这样的题目时我们就可以采用二分查找来完成，二分查找又称折半查找，是一种常见的查找算法，它的基本思想是将一个有序的数组按照中间值分成两个部分，然后判断目标值与中间值的大小关系，如果相等，则查找成功，如果目标值比中间值小，则在左半部分继续查找，如果目标值比中间值大，则在右半部分继续查找，直到找到目标值或者查找范围为空为止。",-1),h=n("p",null,"二分查找的具体实现过程如下：",-1),y=n("ol",null,[n("li",null,"设置查找范围的左右边界 left 和 right，分别指向数组的第一个元素和最后一个元素。")],-1),w=n("figure",null,[n("img",{src:r,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),x=n("br",null,null,-1),z=n("ol",{start:"2"},[n("li",null,"计算中间位置 mid，mid = (left + right) / 2。")],-1),q=n("figure",null,[n("img",{src:k,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),N=n("br",null,null,-1),V=n("ol",{start:"3"},[n("li",null,[s("判断目标值与中间值的大小关系： "),n("ul",null,[n("li",null,"如果目标值等于中间值，则查找成功，返回 mid。")])])],-1),B=n("figure",null,[n("img",{src:d,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),E=n("br",null,null,-1),C=n("ul",null,[n("li",null,"如果目标值比中间值小，则在左半部分继续查找，即 right = mid - 1。")],-1),S=n("figure",null,[n("img",{src:m,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),A=n("br",null,null,-1),H=n("ul",null,[n("li",null,"如果目标值比中间值大，则在右半部分继续查找，即 left = mid + 1。")],-1),I=n("figure",null,[n("img",{src:_,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),L=n("br",null,null,-1),U=n("ul",null,[n("li",null,"如果查找范围为空，即 left > right，则说明目标值不存在于数组中，查找失败。")],-1),W=n("figure",null,[n("img",{src:v,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),Y=n("br",null,null,-1),F={href:"https://codepen.io/zequanr/embed/Yzdarmr",target:"_blank",rel:"noopener noreferrer"},J=u(`<p>如 code - 1 所示，一个完整且正常的二分查找并不是很容易可以完成的，这里强调几个要点：</p><ol><li>在第 7 行由于 left 和 right 都是 int 类型，因此 left + right 可能会超出 int 类型的取值范围，为了避免大数越界，我们通常采用公式 left + (right - left) / 2 来计算 mid 值。</li><li>在第 6 行 while 循环的条件中是 &lt;=，而不是 &lt;，因为初始化 right 的赋值是 len - 1，即最后一个元素的索引，而不是 len，前者相当于两端都闭区间 [ left, right ]，后者相当于左闭右开区间 [ left, right )。</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> sorted<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token keyword">const</span> length <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sorted<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sorted<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>sorted<span class="token punctuation">,</span> key<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;sorted[%d] = %d, search succeed.\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d not found, search failed.\\n&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),K=n("br",null,null,-1);function M(O,Q){const t=p("center"),o=p("ExternalLinkIcon");return c(),i("div",null,[g,f,h,y,w,a(t,null,{default:e(()=>[s("图 1：左右边界值")]),_:1}),x,z,q,a(t,null,{default:e(()=>[s("图 2：计算中间位置")]),_:1}),N,V,B,a(t,null,{default:e(()=>[s("图 3：目标值等于中间值")]),_:1}),E,C,S,a(t,null,{default:e(()=>[s("图 4：目标值比中间值小")]),_:1}),A,H,I,a(t,null,{default:e(()=>[s("图 5：目标值比中间值大")]),_:1}),L,U,W,a(t,null,{default:e(()=>[s("图 6：查找范围为空")]),_:1}),Y,n("p",null,[n("a",F,[s("二分查找动态演示"),a(o)])]),J,a(t,null,{default:e(()=>[s("code - 1：二分查找")]),_:1}),K])}const Z=l(b,[["render",M],["__file","index.html.vue"]]);export{Z as default};
