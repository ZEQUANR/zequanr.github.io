import{_ as p,r as c,o as i,c as l,d as e,w as t,e as n,a as o,b as s}from"./app-CqhsR5WX.js";const u={},r=o(`<p>Promise 是 JavaScript 中处理异步操作的一种标准化解决方案，它提供了一种统一的、链式调用的编程模型来处理异步流程。Promise 对象代表一个异步操作的最终结果（完成或失败），并允许我们以同步风格编写异步代码，从而显著提升了代码的可读性和维护性。</p><h2 id="promise的基本概念" tabindex="-1"><a class="header-anchor" href="#promise的基本概念" aria-hidden="true">#</a> Promise的基本概念</h2><p>在 JavaScrip t中，Promise 是一个构造函数，通过<code>new Promise(executor)</code>创建实例。执行器（executor）是一个带有两个参数（resolve 和 reject）的函数，分别用于表示异步操作成功或失败时的回调：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 异步操作逻辑</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token comment">/* 成功条件 */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token comment">/* 失败条件 */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),d=o(`<br><ul><li><code>resolve(value)</code>：当异步操作成功时被调用，并将结果传递给后续的<code>.then()</code>方法。</li><li><code>reject(reason)</code>：当异步操作失败时被调用，并将错误原因传递给后续的<code>.catch()</code>方法。</li></ul><h2 id="promise-的状态与特点" tabindex="-1"><a class="header-anchor" href="#promise-的状态与特点" aria-hidden="true">#</a> Promise 的状态与特点</h2><h3 id="状态不可逆" tabindex="-1"><a class="header-anchor" href="#状态不可逆" aria-hidden="true">#</a> 状态不可逆</h3><p>Promise 有三种状态：pending（进行中）、fulfilled（已成功）和 rejected（已失败）。一旦状态改变，就不可再变，即从 pending 变为 fulfilled 或 rejected 后，无法再回到 pending 状态。</p><h3 id="链式调用" tabindex="-1"><a class="header-anchor" href="#链式调用" aria-hidden="true">#</a> 链式调用</h3><p>Promise 支持<code>.then()</code>和<code>.catch()</code>方法进行链式调用，每个<code>.then()</code>方法返回一个新的 Promise，可以进一步处理上一步的结果或者抛出的异常。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>promise
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Success:&#39;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">anotherAsyncOperation</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">newResult</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Another operation:&#39;</span><span class="token punctuation">,</span> newResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Error:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),k=o(`<br><h3 id="promise-all-和-promise-race" tabindex="-1"><a class="header-anchor" href="#promise-all-和-promise-race" aria-hidden="true">#</a> Promise.all() 和 Promise.race()</h3><ul><li><code>Promise.all(iterable)</code>接受一组 Promise 实例作为参数，只有当所有 Promise 都变为fulfilled 状态时，才会触发成功的回调；若其中任意一个变为 rejected，则立即触发失败的回调。</li><li><code>Promise.race(iterable)</code>则是只要迭代器中的某个 Promise 变为 fulfilled 或 rejected 状态，就立刻触发对应的回调。</li></ul><h2 id="promise-的最佳实践" tabindex="-1"><a class="header-anchor" href="#promise-的最佳实践" aria-hidden="true">#</a> Promise 的最佳实践</h2><ul><li><strong>避免嵌套地狱</strong> 使用 Promise 的链式调用代替传统的多层嵌套回调，可以有效改善代码的可读性和维护性。</li><li><strong>使用 async/await</strong> 在支持 ES7 及以上版本的环境中，可以利用 async 函数和 await 关键字，使得异步代码看起来更接近于同步代码，进一步提升代码的可读性。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">processData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> data1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchSomeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> data2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">processData1</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">finalResult</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;An error occurred:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),m=s("br",null,null,-1),v=s("ul",null,[s("li",null,[s("strong",null,"规范化错误处理"),n(" 确保每一个可能产生错误的 Promise 链路都有相应的错误捕获机制，遵循“尽早且一致地处理错误”的原则。")])],-1);function h(b,f){const a=c("center");return i(),l("div",null,[r,e(a,null,{default:t(()=>[n("code - 1：new Promise()")]),_:1}),d,e(a,null,{default:t(()=>[n("code - 2：Promise 链式调用")]),_:1}),k,e(a,null,{default:t(()=>[n("code - 3：async 函数与 await 关键字")]),_:1}),m,v])}const w=p(u,[["render",h],["__file","index.html.vue"]]);export{w as default};
