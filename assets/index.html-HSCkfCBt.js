import{_ as o,r as i,o as c,c as l,d as a,w as t,e,a as p,b as n}from"./app-oKetCDPw.js";const u="/assets/ring-struct-c1_LWG29.svg",r="/assets/ring-new-ltt7Tit3.svg",d="/assets/ring-init-s1YOrHzs.svg",k="/assets/Next-and-Prev-hK5QW-Bh.svg",v="/assets/ring-move-2sGOc75T.svg",m="/assets/ring-link-7CpDS8se.svg",b="/assets/ring-unlink-GeCqd_wY.svg",g="/assets/ring-len-4sCGJEof.svg",f="/assets/ring-func-VXemElPT.svg",h={},x=p(`<p>今天给大家带来的是 Go 语言提供的内置容器 Ring，简单理解 Ring 就是一个双向循环链表，但 Ring 并没有表头与表尾的概念，Ring 的表头与表尾相连，构成一个环。</p><h2 id="ring-数据结构" tabindex="-1"><a class="header-anchor" href="#ring-数据结构" aria-hidden="true">#</a> Ring 数据结构</h2><p>老规矩我们先来了解一下 Ring 的数据结构，从 code - 1 中我们可以看到 Ring 的数据结构分别由两个指针 next、prev 和用于存储数据的 value 组成，首先从指针的命名中我们也可以得出是指向下一个或上一个 Ring 类型，简单思考一下，如图 1 通过这种数据结构我们可以创建一个环状的数据结构，有点像循环队列。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// src/container/ring/ring.go</span>

<span class="token comment">// A Ring is an element of a circular list, or ring.</span>
<span class="token comment">// Rings do not have a beginning or end; a pointer to any ring element</span>
<span class="token comment">// serves as reference to the entire ring. Empty rings are represented</span>
<span class="token comment">// as nil Ring pointers. The zero value for a Ring is a one-element</span>
<span class="token comment">// ring with a nil Value.</span>
type Ring struct <span class="token punctuation">{</span>
	next<span class="token punctuation">,</span> prev <span class="token operator">*</span>Ring
	Value      any <span class="token comment">// for use by client; untouched by this library</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),_=n("br",null,null,-1),y=n("figure",null,[n("img",{src:u,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),w=p(`<br><h2 id="new" tabindex="-1"><a class="header-anchor" href="#new" aria-hidden="true">#</a> New</h2><p>数据结构我们看完了，那么首先来看的肯定就是我们 New() 函数了，从注解中我们可以了解到 New() 函数是创建一个包含 n 个元素的 Ring，下面我们来看看该方法是如何创建的吧，从 code - 2 所示该方法接收一个 int 类型的 n 返回一个 Ring 类型的 pointer，并且创建开始之前会判断 n 是不是小于 0，小于则直接返回空，那么从这里我们就可以知道 Ring 类型至少要有一个元素，随后就是生成一个 Ring 结构体实例，再声明一个变量让其等于刚刚声明的结构体，为的是要保留一下当前地址，随后就是运用 for 循环向后面添加 Ring 的数据结构，最后再首尾相连，最后我们可以发现 new() 函数只是创建出了数据结构，并没有对值做初始化操作。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// src/container/ring/ring.go</span>

<span class="token comment">// New creates a ring of n elements.</span>
func <span class="token function">New</span><span class="token punctuation">(</span>n int<span class="token punctuation">)</span> <span class="token operator">*</span>Ring <span class="token punctuation">{</span>
	<span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> nil
	<span class="token punctuation">}</span>
	<span class="token literal-property property">r</span> <span class="token operator">:</span><span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span>Ring<span class="token punctuation">)</span>
	<span class="token literal-property property">p</span> <span class="token operator">:</span><span class="token operator">=</span> r
	<span class="token keyword">for</span> <span class="token literal-property property">i</span> <span class="token operator">:</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token operator">&amp;</span>Ring<span class="token punctuation">{</span><span class="token literal-property property">prev</span><span class="token operator">:</span> p<span class="token punctuation">}</span>
		p <span class="token operator">=</span> p<span class="token punctuation">.</span>next
	<span class="token punctuation">}</span>
	p<span class="token punctuation">.</span>next <span class="token operator">=</span> r
	r<span class="token punctuation">.</span>prev <span class="token operator">=</span> p
	<span class="token keyword">return</span> r
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),R=n("br",null,null,-1),N=n("figure",null,[n("img",{src:r,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),j=p(`<br><h2 id="init" tabindex="-1"><a class="header-anchor" href="#init" aria-hidden="true">#</a> init</h2><p>init() 方法，从函数名中我们可以猜到它是用来初始化操作的，那么作为本包中唯一一个没有被导出的方法，我们需要留意一下该方法在 Next()、Prev() 和 Move() 方法中被调用，随后我们会先对这三个方法做探讨，接下来先看看 init() 方法它进行哪些操作 code - 3，init() 方法接收 Ring 结构体的指针，并将结构体中 next 与 prev 属性指向了其自身，从而构成了一个单元素循环的链表简称环。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// src/container/ring/ring.go</span>

<span class="token function">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Ring<span class="token punctuation">)</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Ring <span class="token punctuation">{</span>
	r<span class="token punctuation">.</span>next <span class="token operator">=</span> r
	r<span class="token punctuation">.</span>prev <span class="token operator">=</span> r
	<span class="token keyword">return</span> r
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),L=n("br",null,null,-1),q=n("figure",null,[n("img",{src:d,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),P=p(`<br><h2 id="next-prev" tabindex="-1"><a class="header-anchor" href="#next-prev" aria-hidden="true">#</a> Next &amp;&amp; Prev</h2><p>Next() 方法与 Prev() 方法，这两个方法逻辑是一致的都是返回下一个或者上一个环元素，R 不能为空，值得注意的就是在工作期间会去检查下一个或者上一个环元素是否为空，空就直接调用 init() 方法，但我们要知道的是在 New() 方法中就已经保障的 Ring 为一个闭环的数据结构，所以在何种情况下会触发该条件是值得我们深思的。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// src/container/ring/ring.go</span>

<span class="token comment">// Next returns the next ring element. r must not be empty.</span>
<span class="token function">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Ring<span class="token punctuation">)</span> <span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Ring <span class="token punctuation">{</span>
	<span class="token keyword">if</span> r<span class="token punctuation">.</span>next <span class="token operator">==</span> nil <span class="token punctuation">{</span>
		<span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> r<span class="token punctuation">.</span>next
<span class="token punctuation">}</span>

<span class="token comment">// Prev returns the previous ring element. r must not be empty.</span>
<span class="token function">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Ring<span class="token punctuation">)</span> <span class="token function">Prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Ring <span class="token punctuation">{</span>
	<span class="token keyword">if</span> r<span class="token punctuation">.</span>next <span class="token operator">==</span> nil <span class="token punctuation">{</span>
		<span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> r<span class="token punctuation">.</span>prev
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),V=n("br",null,null,-1),T=n("figure",null,[n("img",{src:k,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),z=p(`<br><h2 id="move" tabindex="-1"><a class="header-anchor" href="#move" aria-hidden="true">#</a> Move</h2><p>Move() 方法，这个方法与我们刚刚了解的 Next() 方法与 Prev() 方法其实相差不大，简单的说就是把单步操作编变成了多步操作，该函数的具体逻辑就是通过 n 来代表你要查询的几步，再通过 n 的正负值来选择查询的方向。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// src/container/ring/ring.go</span>

<span class="token comment">// Move moves n % r.Len() elements backward (n &lt; 0) or forward (n &gt;= 0)</span>
<span class="token comment">// in the ring and returns that ring element. r must not be empty.</span>
<span class="token function">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Ring<span class="token punctuation">)</span> <span class="token function">Move</span><span class="token punctuation">(</span>n int<span class="token punctuation">)</span> <span class="token operator">*</span>Ring <span class="token punctuation">{</span>
	<span class="token keyword">if</span> r<span class="token punctuation">.</span>next <span class="token operator">==</span> nil <span class="token punctuation">{</span>
		<span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">switch</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token operator">:</span>
		<span class="token keyword">for</span> <span class="token punctuation">;</span> n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
			r <span class="token operator">=</span> r<span class="token punctuation">.</span>prev
		<span class="token punctuation">}</span>
	<span class="token keyword">case</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token operator">:</span>
		<span class="token keyword">for</span> <span class="token punctuation">;</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> n<span class="token operator">--</span> <span class="token punctuation">{</span>
			r <span class="token operator">=</span> r<span class="token punctuation">.</span>next
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> r
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),M=n("br",null,null,-1),D=n("figure",null,[n("img",{src:v,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),U=p(`<br><h2 id="link" tabindex="-1"><a class="header-anchor" href="#link" aria-hidden="true">#</a> Link</h2><p>Link() 方法，从函数名中我们可以看出这是将两个 Ring 连接成一个新的 Ring 方法，将 Ring r 与 Ring s 连接起来，再将 r.next 与 s.prev 相连，从而形成一个闭环，最后再返回 r.next 元素。 但如果 r 和 s 指向同一个环，把它们连起来会使 r 和 s 之间的元素从环上消失。被删除的元素构成一个子环，其返回结果是对该子环上元素的引用（如果没有元素被删除，结果仍然是 r.next() 的原始值，而不是nil)。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// src/container/ring/ring.go</span>

<span class="token comment">// Link connects ring r with ring s such that r.Next()</span>
<span class="token comment">// becomes s and returns the original value for r.Next().</span>
<span class="token comment">// r must not be empty.</span>
<span class="token comment">//</span>
<span class="token comment">// If r and s point to the same ring, linking</span>
<span class="token comment">// them removes the elements between r and s from the ring.</span>
<span class="token comment">// The removed elements form a subring and the result is a</span>
<span class="token comment">// reference to that subring (if no elements were removed,</span>
<span class="token comment">// the result is still the original value for r.Next(),</span>
<span class="token comment">// and not nil).</span>
<span class="token comment">//</span>
<span class="token comment">// If r and s point to different rings, linking</span>
<span class="token comment">// them creates a single ring with the elements of s inserted</span>
<span class="token comment">// after r. The result points to the element following the</span>
<span class="token comment">// last element of s after insertion.</span>
<span class="token function">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Ring<span class="token punctuation">)</span> <span class="token function">Link</span><span class="token punctuation">(</span>s <span class="token operator">*</span>Ring<span class="token punctuation">)</span> <span class="token operator">*</span>Ring <span class="token punctuation">{</span>
	<span class="token literal-property property">n</span> <span class="token operator">:</span><span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> s <span class="token operator">!=</span> nil <span class="token punctuation">{</span>
		<span class="token literal-property property">p</span> <span class="token operator">:</span><span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">Prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment">// Note: Cannot use multiple assignment because</span>
		<span class="token comment">// evaluation order of LHS is not specified.</span>
		r<span class="token punctuation">.</span>next <span class="token operator">=</span> s
		s<span class="token punctuation">.</span>prev <span class="token operator">=</span> r
		n<span class="token punctuation">.</span>prev <span class="token operator">=</span> p
		p<span class="token punctuation">.</span>next <span class="token operator">=</span> n
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> n
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),C=n("br",null,null,-1),G=n("figure",null,[n("img",{src:m,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),B=p(`<br><h2 id="unlike" tabindex="-1"><a class="header-anchor" href="#unlike" aria-hidden="true">#</a> Unlike</h2><p>Unlike() 方法，从 code - 7 中我们可以发现该方法只是对 Link() 与 Move() 方法的调用，那我们大致就可以了解该方法其实是对 Link() 方法的扩展，还记得之前我们提到过的当 Link() 方法中 r 和 s 指向同一个环时会被分成两个环，所以我们先通过 Move() 方法移动当前 Ring 的元素位置，在进行 Link() 方法来实现移除操作，最后再返回子环，其本质就是在同一个环上两个不同元素位置的 Link() 方法操作。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// src/container/ring/ring.go</span>

<span class="token comment">// Unlink removes n % r.Len() elements from the ring r, starting</span>
<span class="token comment">// at r.Next(). If n % r.Len() == 0, r remains unchanged.</span>
<span class="token comment">// The result is the removed subring. r must not be empty.</span>
<span class="token function">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Ring<span class="token punctuation">)</span> <span class="token function">Unlink</span><span class="token punctuation">(</span>n int<span class="token punctuation">)</span> <span class="token operator">*</span>Ring <span class="token punctuation">{</span>
	<span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> nil
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token function">Link</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">Move</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),E=n("br",null,null,-1),I=n("figure",null,[n("img",{src:b,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),Y=p(`<br><h2 id="len" tabindex="-1"><a class="header-anchor" href="#len" aria-hidden="true">#</a> Len</h2><p>Len() 方法，该方法就相对简单许多，通过便利 Ring 得出当前元素数量，其具体逻辑为声明一个 n 用来计数操作，通过 Next() 方法便利下一个元素并进行判断是否为起始元素，是的话停止便利返回 n 即为当前元素数量。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// src/container/ring/ring.go</span>

<span class="token comment">// Len computes the number of elements in ring r.</span>
<span class="token comment">// It executes in time proportional to the number of elements.</span>
<span class="token function">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Ring<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> int <span class="token punctuation">{</span>
	<span class="token literal-property property">n</span> <span class="token operator">:</span><span class="token operator">=</span> <span class="token number">0</span>
	<span class="token keyword">if</span> r <span class="token operator">!=</span> nil <span class="token punctuation">{</span>
		n <span class="token operator">=</span> <span class="token number">1</span>
		<span class="token keyword">for</span> <span class="token literal-property property">p</span> <span class="token operator">:</span><span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p <span class="token operator">!=</span> r<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>next <span class="token punctuation">{</span>
			n<span class="token operator">++</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> n
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),O=n("br",null,null,-1),S=n("figure",null,[n("img",{src:g,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),H=p(`<br><h2 id="do" tabindex="-1"><a class="header-anchor" href="#do" aria-hidden="true">#</a> Do</h2><p>Do() 方法，该方法与 Len() 方法基本一致，都是通过 Next() 方法进行遍历元素，只不过该方法接收一个函数，并在内部对每个元素调用所传入的函数用以来完成某些任务。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// src/container/ring/ring.go</span>

<span class="token comment">// Do calls function f on each element of the ring, in forward order.</span>
<span class="token comment">// The behavior of Do is undefined if f changes *r.</span>
<span class="token function">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Ring<span class="token punctuation">)</span> <span class="token function">Do</span><span class="token punctuation">(</span><span class="token parameter">f <span class="token function">func</span><span class="token punctuation">(</span>any<span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> r <span class="token operator">!=</span> nil <span class="token punctuation">{</span>
		<span class="token function">f</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Value<span class="token punctuation">)</span>
		<span class="token keyword">for</span> <span class="token literal-property property">p</span> <span class="token operator">:</span><span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p <span class="token operator">!=</span> r<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>next <span class="token punctuation">{</span>
			<span class="token function">f</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>Value<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),W=n("br",null,null,-1),A=n("p",null,"到这为止我们已经把 Ring 包里的方法全部阅读一遍了，对此我们应该对此包的方法做一个简单的梳理如图 9 所示，这是 Ring 包中每个方法之间的调用关系，并且我们可以发现 Len() 方法与 Do() 方法， Unlink() 方法与 Link() 方法， Next() 方法与 Prev() 方法的实现逻辑基本是一样的。",-1),J=n("figure",null,[n("img",{src:f,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),K=p(`<br><h2 id="testing" tabindex="-1"><a class="header-anchor" href="#testing" aria-hidden="true">#</a> Testing</h2><p>在结尾的最后，我们放上一些测试代码，供大家理解，在此就不做过多解释了。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;container/ring&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>
  <span class="token string">&quot;reflect&quot;</span>
<span class="token punctuation">)</span>

func <span class="token function">dump</span><span class="token punctuation">(</span><span class="token parameter">r <span class="token operator">*</span>ring<span class="token punctuation">.</span>Ring</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> r <span class="token operator">==</span> nil <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;empty&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	i<span class="token punctuation">,</span> <span class="token literal-property property">n</span> <span class="token operator">:</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token literal-property property">p</span> <span class="token operator">:</span><span class="token operator">=</span> r<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%4d: %p = {&lt;- %p | %p -&gt;}\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> p<span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">Prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		i<span class="token operator">++</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

func <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">r</span> <span class="token operator">:</span><span class="token operator">=</span> ring<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>

    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;TYpeof(r) = %T\\n&quot;</span><span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token function">dump</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>

    r<span class="token punctuation">.</span>Value <span class="token operator">=</span> <span class="token number">0</span>
    r<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> <span class="token boolean">false</span>
    r<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> <span class="token number">1.23</span>
    r<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> <span class="token string">&quot;hello \\&quot;world&quot;</span>
    r<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>int<span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span>
    r<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> ring<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> <span class="token literal-property property">i</span> <span class="token operator">:</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Value<span class="token punctuation">)</span>
        r <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// TYpeof(r) = *reflect.rtype</span>
<span class="token comment">// 0: 0xc000050020 = {&lt;- 0xc0000500c0 | 0xc000050040 -&gt;}</span>
<span class="token comment">// 1: 0xc000050040 = {&lt;- 0xc000050020 | 0xc000050060 -&gt;}</span>
<span class="token comment">// 2: 0xc000050060 = {&lt;- 0xc000050040 | 0xc000050080 -&gt;}</span>
<span class="token comment">// 3: 0xc000050080 = {&lt;- 0xc000050060 | 0xc0000500a0 -&gt;}</span>
<span class="token comment">// 4: 0xc0000500a0 = {&lt;- 0xc000050080 | 0xc0000500c0 -&gt;}</span>
<span class="token comment">// 5: 0xc0000500c0 = {&lt;- 0xc0000500a0 | 0xc000050020 -&gt;}</span>

<span class="token comment">// 0</span>
<span class="token comment">// false</span>
<span class="token comment">// 1.23</span>
<span class="token comment">// hello &quot;world</span>
<span class="token comment">// [0 1 2 3]</span>
<span class="token comment">// &amp;{0xc000050100 0xc000050100 &lt;nil&gt;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),Q=n("br",null,null,-1);function X(F,Z){const s=i("center");return c(),l("div",null,[x,a(s,null,{default:t(()=>[e("code - 1：Ring 数据结构")]),_:1}),_,y,a(s,null,{default:t(()=>[e("图 1：Ring 数据结构")]),_:1}),w,a(s,null,{default:t(()=>[e("code - 2：new() 方法")]),_:1}),R,N,a(s,null,{default:t(()=>[e("图 2：new() 方法详解")]),_:1}),j,a(s,null,{default:t(()=>[e("code - 3：init() 方法")]),_:1}),L,q,a(s,null,{default:t(()=>[e("图 3：init() 方法详解")]),_:1}),P,a(s,null,{default:t(()=>[e("code - 4：Next() 方法与 Prev() 方法")]),_:1}),V,T,a(s,null,{default:t(()=>[e("图 4：Next() 方法详解")]),_:1}),z,a(s,null,{default:t(()=>[e("code - 5：Move() 方法")]),_:1}),M,D,a(s,null,{default:t(()=>[e("图 5：Move() 方法详解")]),_:1}),U,a(s,null,{default:t(()=>[e("code - 6：Link() 方法")]),_:1}),C,G,a(s,null,{default:t(()=>[e("图 6：Link () 方法详解")]),_:1}),B,a(s,null,{default:t(()=>[e("code - 7：Unlink () 方法")]),_:1}),E,I,a(s,null,{default:t(()=>[e("图 7：Unlink () 方法详解")]),_:1}),Y,a(s,null,{default:t(()=>[e("code - 8：Len () 方法")]),_:1}),O,S,a(s,null,{default:t(()=>[e("图 8：Len () 方法详解")]),_:1}),H,a(s,null,{default:t(()=>[e("code - 9：Do () 方法")]),_:1}),W,A,J,a(s,null,{default:t(()=>[e("图 9：Ring 包中每个方法之间的调用关系")]),_:1}),K,a(s,null,{default:t(()=>[e("code - 10：Ring 测试")]),_:1}),Q])}const nn=o(h,[["render",X],["__file","index.html.vue"]]);export{nn as default};
