const e=JSON.parse('{"key":"v-e67300a0","path":"/FrontEnd/JavaScript/AsynchronousProgramming/Promise/","title":"Promise","lang":"zh-CN","frontmatter":{"title":"Promise","icon":"bi:hourglass-split","author":"王泽权","date":"2022-08-19T00:00:00.000Z","category":["JavaScript"],"tag":["JavaScript"],"sticky":true,"star":true,"copyright":"王泽权","description":"Promise 是 JavaScript 中处理异步操作的一种标准化解决方案，它提供了一种统一的、链式调用的编程模型来处理异步流程。Promise 对象代表一个异步操作的最终结果（完成或失败），并允许我们以同步风格编写异步代码，从而显著提升了代码的可读性和维护性。 Promise的基本概念 在 JavaScrip t中，Promise 是一个构造函数，通过new Promise(executor)创建实例。执行器（executor）是一个带有两个参数（resolve 和 reject）的函数，分别用于表示异步操作成功或失败时的回调：","head":[["meta",{"property":"og:url","content":"https://zequanr.github.io/FrontEnd/JavaScript/AsynchronousProgramming/Promise/"}],["meta",{"property":"og:site_name","content":"ZEQUANR"}],["meta",{"property":"og:title","content":"Promise"}],["meta",{"property":"og:description","content":"Promise 是 JavaScript 中处理异步操作的一种标准化解决方案，它提供了一种统一的、链式调用的编程模型来处理异步流程。Promise 对象代表一个异步操作的最终结果（完成或失败），并允许我们以同步风格编写异步代码，从而显著提升了代码的可读性和维护性。 Promise的基本概念 在 JavaScrip t中，Promise 是一个构造函数，通过new Promise(executor)创建实例。执行器（executor）是一个带有两个参数（resolve 和 reject）的函数，分别用于表示异步操作成功或失败时的回调："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-28T08:30:49.000Z"}],["meta",{"property":"article:author","content":"王泽权"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:published_time","content":"2022-08-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-28T08:30:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Promise\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-28T08:30:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"王泽权\\"}]}"]]},"headers":[{"level":2,"title":"Promise的基本概念","slug":"promise的基本概念","link":"#promise的基本概念","children":[]},{"level":2,"title":"Promise 的状态与特点","slug":"promise-的状态与特点","link":"#promise-的状态与特点","children":[{"level":3,"title":"状态不可逆","slug":"状态不可逆","link":"#状态不可逆","children":[]},{"level":3,"title":"链式调用","slug":"链式调用","link":"#链式调用","children":[]},{"level":3,"title":"Promise.all() 和 Promise.race()","slug":"promise-all-和-promise-race","link":"#promise-all-和-promise-race","children":[]}]},{"level":2,"title":"Promise 的最佳实践","slug":"promise-的最佳实践","link":"#promise-的最佳实践","children":[]}],"git":{"createdTime":1706430649000,"updatedTime":1706430649000,"contributors":[{"name":"ZEQUANR","email":"675897584@qq.com","commits":1}]},"readingTime":{"minutes":2.34,"words":703},"filePathRelative":"FrontEnd/JavaScript/AsynchronousProgramming/Promise/README.md","localizedDate":"2022年8月19日","excerpt":"<p>Promise 是 JavaScript 中处理异步操作的一种标准化解决方案，它提供了一种统一的、链式调用的编程模型来处理异步流程。Promise 对象代表一个异步操作的最终结果（完成或失败），并允许我们以同步风格编写异步代码，从而显著提升了代码的可读性和维护性。</p>\\n<h2> Promise的基本概念</h2>\\n<p>在 JavaScrip t中，Promise 是一个构造函数，通过<code>new Promise(executor)</code>创建实例。执行器（executor）是一个带有两个参数（resolve 和 reject）的函数，分别用于表示异步操作成功或失败时的回调：</p>","autoDesc":true}');export{e as data};
