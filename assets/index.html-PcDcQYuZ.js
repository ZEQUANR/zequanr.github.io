import{_ as o,r as c,o as i,c as l,d as t,w as e,e as s,b as n,a as p}from"./app-efyOAJky.js";const u="/assets/image-GlM_AUlv.png",r="/assets/Go-Sort-InsertSort-qkZD5mz0.svg",d="/assets/Go-Sort-HeapSort-hcNlmCu2.svg",k="/assets/Go-Sort-siftDown-EQx73jog.svg",v="/assets/Go-Sort-Find-cQZmVkEk.svg",m="/assets/Go-Sort-IsSorted-b4OCUeFo.svg",b={},f=n("p",null,"本周给大家带来的是 Go 语言标准库中的 sort 包， 该包提供了对切片和用户定义的集合进行排序的操作。",-1),h=n("h2",{id:"introduce",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#introduce","aria-hidden":"true"},"#"),s(" Introduce")],-1),g=n("p",null,"在本篇文章开始之前，我们需要先对 sort 包中的内容要有一个大致的了解，这对于我们接下来的学习有很大的帮助，如图 1 所示画出一个大概的关系图，要知道 sort 包并不只是有排序功能的。",-1),w=n("figure",null,[n("img",{src:u,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),S=p(`<br><h2 id="data-type" tabindex="-1"><a class="header-anchor" href="#data-type" aria-hidden="true">#</a> Data Type</h2><p>首先我们先从 sort 中的数据类型看起，在刚刚所看的图 1 中我们可以看到 sort 包中，共定义了四种数据类型，其中有三种是我们一般情况下经常会用到的数据类型，Go 语言的开发者们已经为我们写好了所需要的方法，而除去这三种基础类型后，还提供了一个接口类型，我们只需要在我们定义的数据类型中实现了接口中的三个方法就可以完成排序操作。</p><h3 id="interface" tabindex="-1"><a class="header-anchor" href="#interface" aria-hidden="true">#</a> Interface</h3><p>老规矩先从 interface 的定义开始看起，从 code - 1 中我们可以看到在该 interface 中定义了三个方法，Len() 方法从注解中我们可以知道 Len 是集合中元素的个数，Less() 方法是对于集合中位于 i 位置的元素与位于 j 位置的元素做比较,位于 j 位置的元素大则返回 true 反之返回 false，Swap() 方法是对于集合中位于 i 位置的元素与位于 j 位置的元素进行交换操作。</p><p>那么从当前 interface 里的方法定义中我们可以知道，这些都是排序过程中经常会用到的操作，但对于不同的数据类型，这三个方法在定义中都会有略微的不同，更何况加上用户定义的数据类型，此时就展现了 interface 所带来的便利，sort 包的实现者无需知道要排序的数据类型是什么，只要按照当前所制定好的“协议”对当前所要排序类型实现了这三个方法，那么通过调用这三种方法就可进行排序操作。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// In go1.19.2/src/sort/sort.go starting as line 14.</span>

<span class="token keyword">type</span> Interface <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token comment">// Len is the number of elements in the collection.</span>
	<span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>

	<span class="token comment">// Less reports whether the element with index i</span>
	<span class="token comment">// must sort before the element with index j.</span>
	<span class="token comment">//</span>
	<span class="token comment">// If both Less(i, j) and Less(j, i) are false,</span>
	<span class="token comment">// then the elements at index i and j are considered equal.</span>
	<span class="token comment">// Sort may place equal elements in any order in the final result,</span>
	<span class="token comment">// while Stable preserves the original input order of equal elements.</span>
	<span class="token comment">//</span>
	<span class="token comment">// Less must describe a transitive ordering:</span>
	<span class="token comment">//  - if both Less(i, j) and Less(j, k) are true, then Less(i, k) must be true as well.</span>
	<span class="token comment">//  - if both Less(i, j) and Less(j, k) are false, then Less(i, k) must be false as well.</span>
	<span class="token comment">//</span>
	<span class="token comment">// Note that floating-point comparison (the &lt; operator on float32 or float64 values)</span>
	<span class="token comment">// is not a transitive ordering when not-a-number (NaN) values are involved.</span>
	<span class="token comment">// See Float64Slice.Less for a correct implementation for floating-point values.</span>
	<span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>

	<span class="token comment">// Swap swaps the elements with indexes i and j.</span>
	<span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),y=p(`<br><h3 id="int-float64-string" tabindex="-1"><a class="header-anchor" href="#int-float64-string" aria-hidden="true">#</a> Int &amp;&amp; Float64 &amp;&amp; String</h3><p>接下来就到了我们之前所说的三个基础的数据类型，我们从 code - 2 ～ 4 中可以看到这三种基础类型也是去实现了我们 code - 1 中的 interface 里的方法，并没有去单独实现。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// In go1.19.2/src/sort/sort.go starting as line 112.</span>

<span class="token comment">// IntSlice attaches the methods of Interface to []int, sorting in increasing order.</span>
<span class="token keyword">type</span> IntSlice <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>x IntSlice<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>           <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x IntSlice<span class="token punctuation">)</span> <span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x IntSlice<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">}</span>

<span class="token comment">// Sort is a convenience method: x.Sort() calls Sort(x).</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x IntSlice<span class="token punctuation">)</span> <span class="token function">Sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">Sort</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),_=p(`<br><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// In go1.19.2/src/sort/sort.go starting as line 123.</span>

<span class="token comment">// Float64Slice implements Interface for a []float64, sorting in increasing order,</span>
<span class="token comment">// with not-a-number (NaN) values ordered before other values.</span>
<span class="token keyword">type</span> Float64Slice <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">float64</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>x Float64Slice<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">}</span>

<span class="token comment">// Less reports whether x[i] should be ordered before x[j], as required by the sort Interface.</span>
<span class="token comment">// Note that floating-point comparison by itself is not a transitive relation: it does not</span>
<span class="token comment">// report a consistent ordering for not-a-number (NaN) values.</span>
<span class="token comment">// This implementation of Less places NaN values before any others, by using:</span>
<span class="token comment">//</span>
<span class="token comment">//	x[i] &lt; x[j] || (math.IsNaN(x[i]) &amp;&amp; !math.IsNaN(x[j]))</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x Float64Slice<span class="token punctuation">)</span> <span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x Float64Slice<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">}</span>

<span class="token comment">// isNaN is a copy of math.IsNaN to avoid a dependency on the math package.</span>
<span class="token keyword">func</span> <span class="token function">isNaN</span><span class="token punctuation">(</span>f <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> f <span class="token operator">!=</span> f
<span class="token punctuation">}</span>

<span class="token comment">// Sort is a convenience method: x.Sort() calls Sort(x).</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x Float64Slice<span class="token punctuation">)</span> <span class="token function">Sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">Sort</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),x=p(`<br><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// In go1.19.2/src/sort/sort.go starting as line 145.</span>

<span class="token comment">// StringSlice attaches the methods of Interface to []string, sorting in increasing order.</span>
<span class="token keyword">type</span> StringSlice <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>x StringSlice<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>           <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x StringSlice<span class="token punctuation">)</span> <span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x StringSlice<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">}</span>

<span class="token comment">// Sort is a convenience method: x.Sort() calls Sort(x).</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>x StringSlice<span class="token punctuation">)</span> <span class="token function">Sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">Sort</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),j=p(`<br><h2 id="functions" tabindex="-1"><a class="header-anchor" href="#functions" aria-hidden="true">#</a> Functions</h2><p>那么数据类型我们看看完了，接下来我们需要了解的就是当前 sort 包中都提供了什么方法，以及这些方法是如何实现的。</p><h3 id="sort" tabindex="-1"><a class="header-anchor" href="#sort" aria-hidden="true">#</a> Sort</h3><p>第一个要看的方法那一定就是我们的 Sort 方法了，Sort 方法的实现如下图所示，传入一个满足 interface 接口的实例，通过接口方法 Len 获取到当前数据的长度，在通过调用 bits 包中 Len 方法获取到当前存储数据长度的最小位数，执行 pdqsort 方法完成排序。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// In go1.19.2/src/sort/sort.go starting as line 42.</span>

<span class="token keyword">func</span> <span class="token function">Sort</span><span class="token punctuation">(</span>data Interface<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	n <span class="token operator">:=</span> data<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	limit <span class="token operator">:=</span> bits<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token function">uint</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token function">pdqsort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> limit<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),I=p(`<br><p>接下来我们看一下 pdqsort 方法的代码实现，如 code - 6 所示，希望大家理解在教科书上出现的排序方法仅仅是为了理解排序问题而做出的课程安排，现实中的排序算法要复杂很多。</p><p>在 pdqsort 方法中我们可以看到，该方法中一共包含了三种排序算法，分别为插入排序、堆排序、快速排序，首先我们先忽略细节，看一下 pdqsort 方法的大体实现逻辑，当我们的数据结构长度小于 12 时直接调用插入排序，每进行一次递归我们的 limit 都会减 1，当 limit 等于 0 也就是递归执行次数消耗完毕时调用堆排序。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// In go1.19.2/src/sort/zsortinterface.go starting as line 61.</span>

<span class="token comment">// pdqsort sorts data[a:b].</span>
<span class="token comment">// The algorithm based on pattern-defeating quicksort(pdqsort), but without the optimizations from BlockQuicksort.</span>
<span class="token comment">// pdqsort paper: https://arxiv.org/pdf/2106.05123.pdf</span>
<span class="token comment">// C++ implementation: https://github.com/orlp/pdqsort</span>
<span class="token comment">// Rust implementation: https://docs.rs/pdqsort/latest/pdqsort/</span>
<span class="token comment">// limit is the number of allowed bad (very unbalanced) pivots before falling back to heapsort.</span>
<span class="token keyword">func</span> <span class="token function">pdqsort</span><span class="token punctuation">(</span>data Interface<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> limit <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> maxInsertion <span class="token operator">=</span> <span class="token number">12</span>

	<span class="token keyword">var</span> <span class="token punctuation">(</span>
		wasBalanced    <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// whether the last partitioning was reasonably balanced</span>
		wasPartitioned <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// whether the slice was already partitioned</span>
	<span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		length <span class="token operator">:=</span> b <span class="token operator">-</span> a

		<span class="token keyword">if</span> length <span class="token operator">&lt;=</span> maxInsertion <span class="token punctuation">{</span>
			<span class="token function">insertionSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// Fall back to heapsort if too many bad choices were made.</span>
		<span class="token keyword">if</span> limit <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token function">heapSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// If the last partitioning was imbalanced, we need to breaking patterns.</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>wasBalanced <span class="token punctuation">{</span>
			<span class="token function">breakPatterns</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
			limit<span class="token operator">--</span>
		<span class="token punctuation">}</span>

		pivot<span class="token punctuation">,</span> hint <span class="token operator">:=</span> <span class="token function">choosePivot</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
		<span class="token keyword">if</span> hint <span class="token operator">==</span> decreasingHint <span class="token punctuation">{</span>
			<span class="token function">reverseRange</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
			<span class="token comment">// The chosen pivot was pivot-a elements after the start of the array.</span>
			<span class="token comment">// After reversing it is pivot-a elements before the end of the array.</span>
			<span class="token comment">// The idea came from Rust&#39;s implementation.</span>
			pivot <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>pivot <span class="token operator">-</span> a<span class="token punctuation">)</span>
			hint <span class="token operator">=</span> increasingHint
		<span class="token punctuation">}</span>

		<span class="token comment">// The slice is likely already sorted.</span>
		<span class="token keyword">if</span> wasBalanced <span class="token operator">&amp;&amp;</span> wasPartitioned <span class="token operator">&amp;&amp;</span> hint <span class="token operator">==</span> increasingHint <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token function">partialInsertionSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// Probably the slice contains many duplicate elements, partition the slice into</span>
		<span class="token comment">// elements equal to and elements greater than the pivot.</span>
		<span class="token keyword">if</span> a <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>data<span class="token punctuation">.</span><span class="token function">Less</span><span class="token punctuation">(</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			mid <span class="token operator">:=</span> <span class="token function">partitionEqual</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> pivot<span class="token punctuation">)</span>
			a <span class="token operator">=</span> mid
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>

		mid<span class="token punctuation">,</span> alreadyPartitioned <span class="token operator">:=</span> <span class="token function">partition</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> pivot<span class="token punctuation">)</span>
		wasPartitioned <span class="token operator">=</span> alreadyPartitioned

		leftLen<span class="token punctuation">,</span> rightLen <span class="token operator">:=</span> mid<span class="token operator">-</span>a<span class="token punctuation">,</span> b<span class="token operator">-</span>mid
		balanceThreshold <span class="token operator">:=</span> length <span class="token operator">/</span> <span class="token number">8</span>
		<span class="token keyword">if</span> leftLen <span class="token operator">&lt;</span> rightLen <span class="token punctuation">{</span>
			wasBalanced <span class="token operator">=</span> leftLen <span class="token operator">&gt;=</span> balanceThreshold
			<span class="token function">pdqsort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> a<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> limit<span class="token punctuation">)</span>
			a <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			wasBalanced <span class="token operator">=</span> rightLen <span class="token operator">&gt;=</span> balanceThreshold
			<span class="token function">pdqsort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> limit<span class="token punctuation">)</span>
			b <span class="token operator">=</span> mid
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),L=p(`<br><h4 id="insertionsort" tabindex="-1"><a class="header-anchor" href="#insertionsort" aria-hidden="true">#</a> insertionSort</h4><p>插入排序相对来说大家都很了解，具体逻辑如图 2 所示，以数据结构索引位 1 开始向前一个元素进行比较，当 Less 方法返回 false 时进行元素交换，以此类推。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// In go1.19.2/src/sort/zsortinterface.go starting as line 10.</span>

<span class="token comment">// insertionSort sorts data[a:b] using insertion sort.</span>
<span class="token keyword">func</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span>data Interface<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> j <span class="token operator">:=</span> i<span class="token punctuation">;</span> j <span class="token operator">&gt;</span> a <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span><span class="token function">Less</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">--</span> <span class="token punctuation">{</span>
			data<span class="token punctuation">.</span><span class="token function">Swap</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),N=n("br",null,null,-1),q=n("figure",null,[n("img",{src:r,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),F=p(`<br><h4 id="heapsort" tabindex="-1"><a class="header-anchor" href="#heapsort" aria-hidden="true">#</a> heapSort</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// In go1.19.2/src/sort/zsortinterface.go starting as line 38.</span>

<span class="token keyword">func</span> <span class="token function">heapSort</span><span class="token punctuation">(</span>data Interface<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	first <span class="token operator">:=</span> a
	lo <span class="token operator">:=</span> <span class="token number">0</span>
	hi <span class="token operator">:=</span> b <span class="token operator">-</span> a

	<span class="token comment">// Build heap with greatest element at top.</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{</span>
		<span class="token function">siftDown</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> i<span class="token punctuation">,</span> hi<span class="token punctuation">,</span> first<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// Pop elements, largest first, into end of data.</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> hi <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{</span>
		data<span class="token punctuation">.</span><span class="token function">Swap</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> first<span class="token operator">+</span>i<span class="token punctuation">)</span>
		<span class="token function">siftDown</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> i<span class="token punctuation">,</span> first<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),z=n("br",null,null,-1),D=n("figure",null,[n("img",{src:d,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),T=p(`<br><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// In go1.19.2/src/sort/zsortinterface.go starting as line 20.</span>

<span class="token comment">// siftDown implements the heap property on data[lo:hi].</span>
<span class="token comment">// first is an offset into the array where the root of the heap lies.</span>
<span class="token keyword">func</span> <span class="token function">siftDown</span><span class="token punctuation">(</span>data Interface<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> hi<span class="token punctuation">,</span> first <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	root <span class="token operator">:=</span> lo
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		child <span class="token operator">:=</span> <span class="token number">2</span><span class="token operator">*</span>root <span class="token operator">+</span> <span class="token number">1</span>
		<span class="token keyword">if</span> child <span class="token operator">&gt;=</span> hi <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> child<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> hi <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span><span class="token function">Less</span><span class="token punctuation">(</span>first<span class="token operator">+</span>child<span class="token punctuation">,</span> first<span class="token operator">+</span>child<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			child<span class="token operator">++</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>data<span class="token punctuation">.</span><span class="token function">Less</span><span class="token punctuation">(</span>first<span class="token operator">+</span>root<span class="token punctuation">,</span> first<span class="token operator">+</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
		data<span class="token punctuation">.</span><span class="token function">Swap</span><span class="token punctuation">(</span>first<span class="token operator">+</span>root<span class="token punctuation">,</span> first<span class="token operator">+</span>child<span class="token punctuation">)</span>
		root <span class="token operator">=</span> child
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),B=n("br",null,null,-1),V=n("figure",null,[n("img",{src:k,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),G=p(`<br><h3 id="find-search" tabindex="-1"><a class="header-anchor" href="#find-search" aria-hidden="true">#</a> Find &amp;&amp; Search</h3><p>Find 与 Search 方法实现逻辑基本一致，都是使用了二分查找算法，具体逻辑如图 5 所示。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// In go1.19.2/src/sort/search.go starting as line 99.</span>

<span class="token keyword">func</span> <span class="token function">Find</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> cmp <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> found <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// The invariants here are similar to the ones in Search.</span>
	<span class="token comment">// Define cmp(-1) &gt; 0 and cmp(n) &lt;= 0</span>
	<span class="token comment">// Invariant: cmp(i-1) &gt; 0, cmp(j) &lt;= 0</span>
	i<span class="token punctuation">,</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> n
	<span class="token keyword">for</span> i <span class="token operator">&lt;</span> j <span class="token punctuation">{</span>
		h <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token function">uint</span><span class="token punctuation">(</span>i<span class="token operator">+</span>j<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// avoid overflow when computing h</span>
		<span class="token comment">// i ≤ h &lt; j</span>
		<span class="token keyword">if</span> <span class="token function">cmp</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			i <span class="token operator">=</span> h <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// preserves cmp(i-1) &gt; 0</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			j <span class="token operator">=</span> h <span class="token comment">// preserves cmp(j) &lt;= 0</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// i == j, cmp(i-1) &gt; 0 and cmp(j) &lt;= 0</span>
	<span class="token keyword">return</span> i<span class="token punctuation">,</span> i <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> <span class="token function">cmp</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),P=p(`<br><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// In go1.19.2/src/sort/search.go starting as line 58.</span>

<span class="token keyword">func</span> <span class="token function">Search</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token comment">// Define f(-1) == false and f(n) == true.</span>
	<span class="token comment">// Invariant: f(i-1) == false, f(j) == true.</span>
	i<span class="token punctuation">,</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> n
	<span class="token keyword">for</span> i <span class="token operator">&lt;</span> j <span class="token punctuation">{</span>
		h <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token function">uint</span><span class="token punctuation">(</span>i<span class="token operator">+</span>j<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// avoid overflow when computing h</span>
		<span class="token comment">// i ≤ h &lt; j</span>
		<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">f</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			i <span class="token operator">=</span> h <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// preserves f(i-1) == false</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			j <span class="token operator">=</span> h <span class="token comment">// preserves f(j) == true</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// i == j, f(i-1) == false, and f(j) (= f(i)) == true  =&gt;  answer is i.</span>
	<span class="token keyword">return</span> i
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),O=n("br",null,null,-1),C=n("figure",null,[n("img",{src:v,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),E=p(`<br><h3 id="issorted" tabindex="-1"><a class="header-anchor" href="#issorted" aria-hidden="true">#</a> IsSorted</h3><p>IsSorted 方法用来检查我们的数据是否进行过排序，其实现逻辑也很简单，我们通过接口方法 Len 获取到数据结构的长度，通过当前数据长度定位到数据结构中的倒数第一个与倒数第二个元素，并对其进行比较以此类推，如果后一位元素始终大于前一位元素，那么判定当前数据已排序。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// In go1.19.2/src/sort/sort.go, starting as line 98.</span>

<span class="token comment">// IsSorted reports whether data is sorted.</span>
<span class="token keyword">func</span> <span class="token function">IsSorted</span><span class="token punctuation">(</span>data Interface<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	n <span class="token operator">:=</span> data<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> data<span class="token punctuation">.</span><span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),H=n("br",null,null,-1),Q=n("figure",null,[n("img",{src:m,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),R=p(`<br><h3 id="slice-slicestable" tabindex="-1"><a class="header-anchor" href="#slice-slicestable" aria-hidden="true">#</a> Slice &amp;&amp; SliceStable</h3><p>Slice 方法只需要提供给定的 less 函数，就会对传入切片 x 进行排序，如果 x 不是切片它会 panic，那么到这里我们不禁会想到一个问题 Slice 方法为什么只需要一个 less 方法就可以进行排序操作？</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// In go1.19.2/src/sort/slice.go, starting as line 18.</span>

func <span class="token function">Slice</span><span class="token punctuation">(</span>x any<span class="token punctuation">,</span> less <span class="token function">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token keyword">int</span><span class="token punctuation">)</span> bool<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	rv <span class="token operator">:</span><span class="token operator">=</span> <span class="token function">reflectValueOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
	swap <span class="token operator">:</span><span class="token operator">=</span> <span class="token function">reflectSwapper</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
	length <span class="token operator">:</span><span class="token operator">=</span> rv<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	limit <span class="token operator">:</span><span class="token operator">=</span> bits<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token function">uint</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token function">pdqsort_func</span><span class="token punctuation">(</span>lessSwap<span class="token punctuation">{</span>less<span class="token punctuation">,</span> swap<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">,</span> limit<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),A=p(`<br><p>思考一下可以想到，在 sort 包中 nterface 接口中， Len 方法与 Swap方法一般是不需要改动的，况且还是在切片类型中，而 Less 方法则需要指出具体的元素比较项，若每写一个新类型就需要实现这三种方法会比较麻烦，Go 的开发者解决了这个问题，在切片类型中我们只需提供 less 方法即可进行排序操作。</p><p>那么 Slice 方法是如何实现的呢？从 code - 14 中我们可以看到，Slice 方法通过调用 reflect 包的方法获得 Len 方法与 Swap 方法，对此我们暂时先不做深入研究。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// In go1.19.2/src/sort/slice_go18.go, starting as line 8.</span>

package sort

import <span class="token string">&quot;reflect&quot;</span>

var reflectValueOf <span class="token operator">=</span> reflect<span class="token punctuation">.</span>ValueOf
var reflectSwapper <span class="token operator">=</span> reflect<span class="token punctuation">.</span>Swapper
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),U=p(`<br><p>SliceStable 方法相比于 Slice 方法它们唯一的区别在于 SliceStable 方法会对传入的切片 x 进行排序的同时保持相等元素的原始顺序不变，从 code - 15 中我们可以看到在 SliceStable 方法里所调用的排序方法并不相同。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// In go1.19.2/src/sort/slice.go, starting as line 32.</span>

func <span class="token function">SliceStable</span><span class="token punctuation">(</span>x any<span class="token punctuation">,</span> less <span class="token function">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token keyword">int</span><span class="token punctuation">)</span> bool<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	rv <span class="token operator">:</span><span class="token operator">=</span> <span class="token function">reflectValueOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
	swap <span class="token operator">:</span><span class="token operator">=</span> <span class="token function">reflectSwapper</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
	<span class="token function">stable_func</span><span class="token punctuation">(</span>lessSwap<span class="token punctuation">{</span>less<span class="token punctuation">,</span> swap<span class="token punctuation">}</span><span class="token punctuation">,</span> rv<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Z=p(`<br><p>最后如 code - 16 所示，我们也可以在 sort 包中找到 Slice 与 SliceStable 方法排序方法中的函数中的 lessSwap 结构。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// In go1.19.2/src/sort/sort.go, starting as line 74.</span>

<span class="token comment">// lessSwap is a pair of Less and Swap function for use with the</span>
<span class="token comment">// auto-generated func-optimized variant of sort.go in</span>
<span class="token comment">// zfuncversion.go.</span>
type lessSwap <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Less <span class="token function">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token keyword">int</span><span class="token punctuation">)</span> bool
	Swap <span class="token function">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),M=p(`<br><h3 id="sliceissorted" tabindex="-1"><a class="header-anchor" href="#sliceissorted" aria-hidden="true">#</a> SliceIsSorted</h3><p>SliceIsSorted 方法会检查所传入的切片 x 是否根据提供的 less 方法进行排序， 如果 x 不是切片它会 panic，该函数的具体实现逻辑与 IsSorted 方法基本一致。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// In go1.19.2/src/sort/slice.go, starting as line 40.</span>

<span class="token comment">// SliceIsSorted reports whether the slice x is sorted according to the provided less function.</span>
<span class="token comment">// It panics if x is not a slice.</span>
func <span class="token function">SliceIsSorted</span><span class="token punctuation">(</span>x any<span class="token punctuation">,</span> less <span class="token function">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token keyword">int</span><span class="token punctuation">)</span> bool<span class="token punctuation">)</span> bool <span class="token punctuation">{</span>
	rv <span class="token operator">:</span><span class="token operator">=</span> <span class="token function">reflectValueOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
	n <span class="token operator">:</span><span class="token operator">=</span> rv<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:</span><span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token function">less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> false
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> true
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),J=n("br",null,null,-1);function K(W,X){const a=c("center");return i(),l("div",null,[f,h,g,w,t(a,null,{default:e(()=>[s("图 1：sort 包")]),_:1}),S,t(a,null,{default:e(()=>[s("code - 1：sort 包中的 interface 类型")]),_:1}),y,t(a,null,{default:e(()=>[s("code - 2：sort 包中的 int 类型")]),_:1}),_,t(a,null,{default:e(()=>[s("code - 3：sort 包中的 float64 类型")]),_:1}),x,t(a,null,{default:e(()=>[s("code - 4：sort 包中的 string 类型")]),_:1}),j,t(a,null,{default:e(()=>[s("code - 5：sort 方法")]),_:1}),I,t(a,null,{default:e(()=>[s("code - 6：pdqsort 方法")]),_:1}),L,t(a,null,{default:e(()=>[s("code - 7：insertionSort 方法")]),_:1}),N,q,t(a,null,{default:e(()=>[s("图 2：insertionSort")]),_:1}),F,t(a,null,{default:e(()=>[s("code - 8：heapSort 方法")]),_:1}),z,D,t(a,null,{default:e(()=>[s("图 3：heapSort")]),_:1}),T,t(a,null,{default:e(()=>[s("code - 9：siftDown 方法")]),_:1}),B,V,t(a,null,{default:e(()=>[s("图 4：siftDown")]),_:1}),G,t(a,null,{default:e(()=>[s("code - 10：Find 方法")]),_:1}),P,t(a,null,{default:e(()=>[s("code - 11：Search 方法")]),_:1}),O,C,t(a,null,{default:e(()=>[s("图 5：Slice")]),_:1}),E,t(a,null,{default:e(()=>[s("code - 12：IsSorted 方法")]),_:1}),H,Q,t(a,null,{default:e(()=>[s("图 6：IsSorted")]),_:1}),R,t(a,null,{default:e(()=>[s("code - 13：Slice 方法")]),_:1}),A,t(a,null,{default:e(()=>[s("code - 14：import 方法")]),_:1}),U,t(a,null,{default:e(()=>[s("code - 15：SliceStable 方法")]),_:1}),Z,t(a,null,{default:e(()=>[s("code - 16：lessSwap Struct")]),_:1}),M,t(a,null,{default:e(()=>[s("code - 17：SliceIsSorted 方法")]),_:1}),J])}const $=o(b,[["render",K],["__file","index.html.vue"]]);export{$ as default};
