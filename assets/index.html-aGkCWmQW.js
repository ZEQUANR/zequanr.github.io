const t=JSON.parse('{"key":"v-549eb9d8","path":"/FrontEnd/JavaScript/DesignPattern/StructuralPatterns/","title":"创建型设计模式","lang":"zh-CN","frontmatter":{"title":"创建型设计模式","icon":"uil:create-dashboard","article":false,"description":"结构型设计模式 适配器模式 将一个类的接口转换成客户希望的另一个接口。使得原本由于接口不兼容而不能一起工作的类能够协同工作。 装饰器模式 在运行时动态地向对象添加新的行为，同时保持类的单一职责原则。 代理模式 为其他对象提供一种代理以控制对这个对象的访问。 外观模式 提供了一个统一的接口，用来访问子系统中的一群接口。 桥接模式 将抽象部分与它的实现部分分离，使它们都可以独立地变化。 组合模式 允许你将对象组合成树形结构来表现“整体-部分”的层次结构。","head":[["meta",{"property":"og:url","content":"https://zequanr.github.io/FrontEnd/JavaScript/DesignPattern/StructuralPatterns/"}],["meta",{"property":"og:site_name","content":"ZEQUANR"}],["meta",{"property":"og:title","content":"创建型设计模式"}],["meta",{"property":"og:description","content":"结构型设计模式 适配器模式 将一个类的接口转换成客户希望的另一个接口。使得原本由于接口不兼容而不能一起工作的类能够协同工作。 装饰器模式 在运行时动态地向对象添加新的行为，同时保持类的单一职责原则。 代理模式 为其他对象提供一种代理以控制对这个对象的访问。 外观模式 提供了一个统一的接口，用来访问子系统中的一群接口。 桥接模式 将抽象部分与它的实现部分分离，使它们都可以独立地变化。 组合模式 允许你将对象组合成树形结构来表现“整体-部分”的层次结构。"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-24T08:24:26.000Z"}],["meta",{"property":"article:author","content":"ZEQUANR"}],["meta",{"property":"article:modified_time","content":"2024-01-24T08:24:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"创建型设计模式\\",\\"description\\":\\"结构型设计模式 适配器模式 将一个类的接口转换成客户希望的另一个接口。使得原本由于接口不兼容而不能一起工作的类能够协同工作。 装饰器模式 在运行时动态地向对象添加新的行为，同时保持类的单一职责原则。 代理模式 为其他对象提供一种代理以控制对这个对象的访问。 外观模式 提供了一个统一的接口，用来访问子系统中的一群接口。 桥接模式 将抽象部分与它的实现部分分离，使它们都可以独立地变化。 组合模式 允许你将对象组合成树形结构来表现“整体-部分”的层次结构。\\"}"]]},"headers":[{"level":3,"title":"结构型设计模式","slug":"结构型设计模式","link":"#结构型设计模式","children":[]}],"git":{"createdTime":1706084666000,"updatedTime":1706084666000,"contributors":[{"name":"ZEQUANR","email":"675897584@qq.com","commits":1}]},"readingTime":{"minutes":0.74,"words":222},"filePathRelative":"FrontEnd/JavaScript/DesignPattern/StructuralPatterns/README.md","localizedDate":"2024年1月24日","excerpt":"<h3> 结构型设计模式</h3>\\n<ul>\\n<li><a href=\\"/FrontEnd/JavaScript/DesignPattern/StructuralPatterns/AdapterPattern\\">适配器模式</a>\\n<ul>\\n<li>将一个类的接口转换成客户希望的另一个接口。使得原本由于接口不兼容而不能一起工作的类能够协同工作。</li>\\n</ul>\\n</li>\\n<li><a href=\\"/FrontEnd/JavaScript/DesignPattern/StructuralPatterns/DecoratorPattern\\">装饰器模式</a>\\n<ul>\\n<li>在运行时动态地向对象添加新的行为，同时保持类的单一职责原则。</li>\\n</ul>\\n</li>\\n<li><a href=\\"/FrontEnd/JavaScript/DesignPattern/StructuralPatterns/ProxyPattern\\">代理模式</a>\\n<ul>\\n<li>为其他对象提供一种代理以控制对这个对象的访问。</li>\\n</ul>\\n</li>\\n<li><a href=\\"/FrontEnd/JavaScript/DesignPattern/StructuralPatterns/FacadePattern\\">外观模式</a>\\n<ul>\\n<li>提供了一个统一的接口，用来访问子系统中的一群接口。</li>\\n</ul>\\n</li>\\n<li><a href=\\"/FrontEnd/JavaScript/DesignPattern/StructuralPatterns/BridgePattern\\">桥接模式</a>\\n<ul>\\n<li>将抽象部分与它的实现部分分离，使它们都可以独立地变化。</li>\\n</ul>\\n</li>\\n<li><a href=\\"/FrontEnd/JavaScript/DesignPattern/StructuralPatterns/CompositePattern\\">组合模式</a>\\n<ul>\\n<li>允许你将对象组合成树形结构来表现“整体-部分”的层次结构。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{t as data};
