import{_ as t,o as a,c as r,a as e}from"./app-efyOAJky.js";const l={},n=e('<h3 id="结构型设计模式" tabindex="-1"><a class="header-anchor" href="#结构型设计模式" aria-hidden="true">#</a> 结构型设计模式</h3><ul><li><a href="/FrontEnd/JavaScript/DesignPattern/StructuralPatterns/AdapterPattern">适配器模式</a><ul><li>将一个类的接口转换成客户希望的另一个接口。使得原本由于接口不兼容而不能一起工作的类能够协同工作。</li></ul></li><li><a href="/FrontEnd/JavaScript/DesignPattern/StructuralPatterns/DecoratorPattern">装饰器模式</a><ul><li>在运行时动态地向对象添加新的行为，同时保持类的单一职责原则。</li></ul></li><li><a href="/FrontEnd/JavaScript/DesignPattern/StructuralPatterns/ProxyPattern">代理模式</a><ul><li>为其他对象提供一种代理以控制对这个对象的访问。</li></ul></li><li><a href="/FrontEnd/JavaScript/DesignPattern/StructuralPatterns/FacadePattern">外观模式</a><ul><li>提供了一个统一的接口，用来访问子系统中的一群接口。</li></ul></li><li><a href="/FrontEnd/JavaScript/DesignPattern/StructuralPatterns/BridgePattern">桥接模式</a><ul><li>将抽象部分与它的实现部分分离，使它们都可以独立地变化。</li></ul></li><li><a href="/FrontEnd/JavaScript/DesignPattern/StructuralPatterns/CompositePattern">组合模式</a><ul><li>允许你将对象组合成树形结构来表现“整体-部分”的层次结构。</li></ul></li></ul>',2),i=[n];function c(u,s){return a(),r("div",null,i)}const d=t(l,[["render",c],["__file","index.html.vue"]]);export{d as default};
