const t=JSON.parse('{"key":"v-2af7753a","path":"/Go/List/","title":"List","lang":"zh-CN","frontmatter":{"title":"List","icon":"gg:list","author":"王泽权","date":"2023-07-07T00:00:00.000Z","category":["Go"],"tag":["Go"],"sticky":true,"star":true,"copyright":"王泽权","description":"今天给大家带来的是 Go 语言提供的内置容器 List，内部的实现原理是双链表，列表能够高效地进行任意位置的元素插入和删除操作。 List struct &amp;&amp; Element struct 老规矩我们先从数据结构中看起，从 code - 1 中我们可以看到 List 包中的数据结构一共有两个分别为 List 和 Element，通过这两个数据结构组成为 Go 语言提供的内置容器 List 结构，接下来就让我们去看一看这两个数据结构。 List 数据结构，当前数据结构中包含 root 和 len 两个字段，从注解中我们可以了解到 root 为“哨兵”列表元素，不算在当前 List 链表元素中且结构体中 len 的长度属性中不记录 root 节点。","head":[["meta",{"property":"og:url","content":"https://zequanr.github.io/Go/List/"}],["meta",{"property":"og:site_name","content":"ZEQUANR"}],["meta",{"property":"og:title","content":"List"}],["meta",{"property":"og:description","content":"今天给大家带来的是 Go 语言提供的内置容器 List，内部的实现原理是双链表，列表能够高效地进行任意位置的元素插入和删除操作。 List struct &amp;&amp; Element struct 老规矩我们先从数据结构中看起，从 code - 1 中我们可以看到 List 包中的数据结构一共有两个分别为 List 和 Element，通过这两个数据结构组成为 Go 语言提供的内置容器 List 结构，接下来就让我们去看一看这两个数据结构。 List 数据结构，当前数据结构中包含 root 和 len 两个字段，从注解中我们可以了解到 root 为“哨兵”列表元素，不算在当前 List 链表元素中且结构体中 len 的长度属性中不记录 root 节点。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://zequanr.github.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-25T09:54:30.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"List"}],["meta",{"property":"article:author","content":"王泽权"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:published_time","content":"2023-07-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-25T09:54:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"List\\",\\"image\\":[\\"https://zequanr.github.io/\\"],\\"datePublished\\":\\"2023-07-07T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-25T09:54:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"王泽权\\"}]}"]]},"headers":[{"level":2,"title":"List struct && Element struct","slug":"list-struct-element-struct","link":"#list-struct-element-struct","children":[]},{"level":2,"title":"Next && Prev","slug":"next-prev","link":"#next-prev","children":[]},{"level":2,"title":"Front && Back","slug":"front-back","link":"#front-back","children":[]},{"level":2,"title":"New && Init","slug":"new-init","link":"#new-init","children":[]},{"level":2,"title":"insert && insertValue","slug":"insert-insertvalue","link":"#insert-insertvalue","children":[]},{"level":2,"title":"InsertBefore && InsertAfter","slug":"insertbefore-insertafter","link":"#insertbefore-insertafter","children":[]},{"level":2,"title":"PushFront && PushBack","slug":"pushfront-pushback","link":"#pushfront-pushback","children":[]},{"level":2,"title":"PushBackList && PushFrontList","slug":"pushbacklist-pushfrontlist","link":"#pushbacklist-pushfrontlist","children":[]},{"level":2,"title":"Testing","slug":"testing","link":"#testing","children":[]}],"git":{"createdTime":1706176470000,"updatedTime":1706176470000,"contributors":[{"name":"ZEQUANR","email":"675897584@qq.com","commits":1}]},"readingTime":{"minutes":10,"words":3000},"filePathRelative":"Go/List/README.md","localizedDate":"2023年7月7日","excerpt":"<p>今天给大家带来的是 Go 语言提供的内置容器 List，内部的实现原理是双链表，列表能够高效地进行任意位置的元素插入和删除操作。</p>\\n<h2> List struct &amp;&amp; Element struct</h2>\\n<p>老规矩我们先从数据结构中看起，从 code - 1 中我们可以看到 List 包中的数据结构一共有两个分别为 List 和 Element，通过这两个数据结构组成为 Go 语言提供的内置容器 List 结构，接下来就让我们去看一看这两个数据结构。</p>\\n<p>List 数据结构，当前数据结构中包含 root 和 len 两个字段，从注解中我们可以了解到 root 为“哨兵”列表元素，不算在当前 List 链表元素中且结构体中 len 的长度属性中不记录 root 节点。</p>","autoDesc":true}');export{t as data};
