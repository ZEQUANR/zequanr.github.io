import{_ as t,o as a,c as e,a as r}from"./app-6Ae-TnyK.js";const n={},i=r('<h3 id="创建型设计模式" tabindex="-1"><a class="header-anchor" href="#创建型设计模式" aria-hidden="true">#</a> 创建型设计模式</h3><ul><li><a href="/FrontEnd/JavaScript/DesignPattern/CreationalPatterns/ConstructorPattern">构造函数模式</a><ul><li>通过定义一个构造函数来初始化新对象的属性，并通过new关键字调用构造函数创建实例。</li></ul></li><li><a href="/FrontEnd/JavaScript/DesignPattern/CreationalPatterns/PrototypePattern">原型模式</a><ul><li>通过复制现有对象来创建新对象，而不是每次都新建一个全新的实例。</li></ul></li><li><a href="/FrontEnd/JavaScript/DesignPattern/CreationalPatterns/FactoryPattern">工厂模式</a><ul><li>提供一个接口用于创建一系列相关或依赖对象，而无需指定具体的类。</li></ul></li><li><a href="/FrontEnd/JavaScript/DesignPattern/CreationalPatterns/AbstractFactoryPattern">抽象工厂模式</a><ul><li>提供一个接口，用于创建相关或依赖对象家族的工厂，而无需指定具体的产品类。</li></ul></li><li><a href="/FrontEnd/JavaScript/DesignPattern/CreationalPatterns/BuilderPattern">建造者模式</a><ul><li>将复杂的构建过程与表示分离，使得相同的构建过程可以创建不同的表示。</li></ul></li><li><a href="/FrontEnd/JavaScript/DesignPattern/CreationalPatterns/SingletonPattern">单例模式</a><ul><li>确保一个类只有一个实例，并提供全局访问点。</li></ul></li></ul>',2),l=[i];function o(s,c){return a(),e("div",null,l)}const d=t(n,[["render",o],["__file","index.html.vue"]]);export{d as default};
