const a=JSON.parse('{"key":"v-0b53e479","path":"/FrontEnd/JavaScript/AsynchronousProgramming/AsyncAwait/","title":"async/await","lang":"zh-CN","frontmatter":{"title":"async/await","icon":"tabler:news","author":"王泽权","date":"2023-07-30T00:00:00.000Z","category":["JavaScript"],"tag":["JavaScript"],"sticky":true,"star":true,"copyright":"王泽权","description":"在 JavaScript 异步编程领域，async/await 是 ES2017 引入的关键特性，它为处理 Promise 提供了更简洁直观的语法糖。通过 async 函数和 await 表达式，开发者能够以接近同步代码的方式编写异步逻辑，极大地提升了代码可读性和开发效率。 async 函数基础 async 函数定义 async 关键字用于声明一个异步函数。当函数被标记为 async 时，它将返回一个 Promise 对象，无论函数内部是否明确使用 return 语句： async function fetchData() { // 异步操作 } fetchData().then(data =&gt; console.log(data)); // 使用.then()方法处理结果","head":[["meta",{"property":"og:url","content":"https://zequanr.github.io/FrontEnd/JavaScript/AsynchronousProgramming/AsyncAwait/"}],["meta",{"property":"og:site_name","content":"ZEQUANR"}],["meta",{"property":"og:title","content":"async/await"}],["meta",{"property":"og:description","content":"在 JavaScript 异步编程领域，async/await 是 ES2017 引入的关键特性，它为处理 Promise 提供了更简洁直观的语法糖。通过 async 函数和 await 表达式，开发者能够以接近同步代码的方式编写异步逻辑，极大地提升了代码可读性和开发效率。 async 函数基础 async 函数定义 async 关键字用于声明一个异步函数。当函数被标记为 async 时，它将返回一个 Promise 对象，无论函数内部是否明确使用 return 语句： async function fetchData() { // 异步操作 } fetchData().then(data =&gt; console.log(data)); // 使用.then()方法处理结果"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-28T08:30:49.000Z"}],["meta",{"property":"article:author","content":"王泽权"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:published_time","content":"2023-07-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-28T08:30:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"async/await\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-28T08:30:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"王泽权\\"}]}"]]},"headers":[{"level":2,"title":"async 函数基础","slug":"async-函数基础","link":"#async-函数基础","children":[{"level":3,"title":"async 函数定义","slug":"async-函数定义","link":"#async-函数定义","children":[]},{"level":3,"title":"await 表达式","slug":"await-表达式","link":"#await-表达式","children":[]}]},{"level":2,"title":"async/await 的优势","slug":"async-await-的优势","link":"#async-await-的优势","children":[]},{"level":2,"title":"async/await 的最佳实践","slug":"async-await-的最佳实践","link":"#async-await-的最佳实践","children":[]}],"git":{"createdTime":1706430649000,"updatedTime":1706430649000,"contributors":[{"name":"ZEQUANR","email":"675897584@qq.com","commits":1}]},"readingTime":{"minutes":2.2,"words":660},"filePathRelative":"FrontEnd/JavaScript/AsynchronousProgramming/AsyncAwait/README.md","localizedDate":"2023年7月30日","excerpt":"<p>在 JavaScript 异步编程领域，async/await 是 ES2017 引入的关键特性，它为处理 Promise 提供了更简洁直观的语法糖。通过 async 函数和 await 表达式，开发者能够以接近同步代码的方式编写异步逻辑，极大地提升了代码可读性和开发效率。</p>\\n<h2> async 函数基础</h2>\\n<h3> async 函数定义</h3>\\n<p>async 关键字用于声明一个异步函数。当函数被标记为 async 时，它将返回一个 Promise 对象，无论函数内部是否明确使用 return 语句：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">async</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">fetchData</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// 异步操作</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token function\\">fetchData</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">data</span> <span class=\\"token operator\\">=&gt;</span> console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 使用.then()方法处理结果</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{a as data};
