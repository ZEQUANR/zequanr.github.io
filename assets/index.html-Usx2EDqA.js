const t=JSON.parse('{"key":"v-474192d6","path":"/FrontEnd/JavaScript/AsynchronousProgramming/CallbackFunction/","title":"回调函数","lang":"zh-CN","frontmatter":{"title":"回调函数","icon":"entypo:back","author":"王泽权","date":"2022-08-19T00:00:00.000Z","category":["JavaScript"],"tag":["JavaScript"],"sticky":true,"star":true,"copyright":"王泽权","description":"在 JavaScript 中，回调函数是一种常见的编程模式，它允许我们在一个函数执行完毕后，传递另一个函数作为参数来处理结果或进行后续操作。回调函数是异步编程的核心要素之一，特别是在处理 I/O 操作、事件监听以及控制流程等方面扮演着关键角色。 回调函数的基本概念 回调函数本质上是一个被当作参数传递给另一个函数的函数。当这个外部函数完成其任务后，就会调用传入的回调函数，通常用来通知已完成的状态或者提供处理结果的机会。 在 code - 1 中，getData函数接受一个回调函数作为参数，并在模拟的异步操作完成后调用该回调函数，将数据作为参数传入。","head":[["meta",{"property":"og:url","content":"https://zequanr.github.io/FrontEnd/JavaScript/AsynchronousProgramming/CallbackFunction/"}],["meta",{"property":"og:site_name","content":"ZEQUANR"}],["meta",{"property":"og:title","content":"回调函数"}],["meta",{"property":"og:description","content":"在 JavaScript 中，回调函数是一种常见的编程模式，它允许我们在一个函数执行完毕后，传递另一个函数作为参数来处理结果或进行后续操作。回调函数是异步编程的核心要素之一，特别是在处理 I/O 操作、事件监听以及控制流程等方面扮演着关键角色。 回调函数的基本概念 回调函数本质上是一个被当作参数传递给另一个函数的函数。当这个外部函数完成其任务后，就会调用传入的回调函数，通常用来通知已完成的状态或者提供处理结果的机会。 在 code - 1 中，getData函数接受一个回调函数作为参数，并在模拟的异步操作完成后调用该回调函数，将数据作为参数传入。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-28T08:30:49.000Z"}],["meta",{"property":"article:author","content":"王泽权"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:published_time","content":"2022-08-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-28T08:30:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"回调函数\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-28T08:30:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"王泽权\\"}]}"]]},"headers":[{"level":2,"title":"回调函数的基本概念","slug":"回调函数的基本概念","link":"#回调函数的基本概念","children":[]},{"level":2,"title":"回调函数的优势与挑战","slug":"回调函数的优势与挑战","link":"#回调函数的优势与挑战","children":[]},{"level":2,"title":"现代 JavaScript 中的回调函数改进","slug":"现代-javascript-中的回调函数改进","link":"#现代-javascript-中的回调函数改进","children":[]},{"level":2,"title":"回调函数的最佳实践","slug":"回调函数的最佳实践","link":"#回调函数的最佳实践","children":[]}],"git":{"createdTime":1706430649000,"updatedTime":1706430649000,"contributors":[{"name":"ZEQUANR","email":"675897584@qq.com","commits":1}]},"readingTime":{"minutes":2.67,"words":801},"filePathRelative":"FrontEnd/JavaScript/AsynchronousProgramming/CallbackFunction/README.md","localizedDate":"2022年8月19日","excerpt":"<p>在 JavaScript 中，回调函数是一种常见的编程模式，它允许我们在一个函数执行完毕后，传递另一个函数作为参数来处理结果或进行后续操作。回调函数是异步编程的核心要素之一，特别是在处理 I/O 操作、事件监听以及控制流程等方面扮演着关键角色。</p>\\n<h2> 回调函数的基本概念</h2>\\n<p>回调函数本质上是一个被当作参数传递给另一个函数的函数。当这个外部函数完成其任务后，就会调用传入的回调函数，通常用来通知已完成的状态或者提供处理结果的机会。</p>\\n<p>在 code - 1 中，<code>getData</code>函数接受一个回调函数作为参数，并在模拟的异步操作完成后调用该回调函数，将数据作为参数传入。</p>","autoDesc":true}');export{t as data};
