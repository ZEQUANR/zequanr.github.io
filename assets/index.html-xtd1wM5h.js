const e=JSON.parse('{"key":"v-2a4e83de","path":"/Go/Ring/","title":"Ring","lang":"zh-CN","frontmatter":{"title":"Ring","icon":"icon-park-outline:ring","author":"王泽权","date":"2023-04-09T00:00:00.000Z","category":["Go"],"tag":["Go"],"sticky":true,"star":true,"copyright":"王泽权","description":"今天给大家带来的是 Go 语言提供的内置容器 Ring，简单理解 Ring 就是一个双向循环链表，但 Ring 并没有表头与表尾的概念，Ring 的表头与表尾相连，构成一个环。 Ring 数据结构 老规矩我们先来了解一下 Ring 的数据结构，从 code - 1 中我们可以看到 Ring 的数据结构分别由两个指针 next、prev 和用于存储数据的 value 组成，首先从指针的命名中我们也可以得出是指向下一个或上一个 Ring 类型，简单思考一下，如图 1 通过这种数据结构我们可以创建一个环状的数据结构，有点像循环队列。 // src/container/ring/ring.go // A Ring is an element of a circular list, or ring. // Rings do not have a beginning or end; a pointer to any ring element // serves as reference to the entire ring. Empty rings are represented // as nil Ring pointers. The zero value for a Ring is a one-element // ring with a nil Value. type Ring struct { \\tnext, prev *Ring \\tValue any // for use by client; untouched by this library }","head":[["meta",{"property":"og:url","content":"https://zequanr.github.io/Go/Ring/"}],["meta",{"property":"og:site_name","content":"ZEQUANR"}],["meta",{"property":"og:title","content":"Ring"}],["meta",{"property":"og:description","content":"今天给大家带来的是 Go 语言提供的内置容器 Ring，简单理解 Ring 就是一个双向循环链表，但 Ring 并没有表头与表尾的概念，Ring 的表头与表尾相连，构成一个环。 Ring 数据结构 老规矩我们先来了解一下 Ring 的数据结构，从 code - 1 中我们可以看到 Ring 的数据结构分别由两个指针 next、prev 和用于存储数据的 value 组成，首先从指针的命名中我们也可以得出是指向下一个或上一个 Ring 类型，简单思考一下，如图 1 通过这种数据结构我们可以创建一个环状的数据结构，有点像循环队列。 // src/container/ring/ring.go // A Ring is an element of a circular list, or ring. // Rings do not have a beginning or end; a pointer to any ring element // serves as reference to the entire ring. Empty rings are represented // as nil Ring pointers. The zero value for a Ring is a one-element // ring with a nil Value. type Ring struct { \\tnext, prev *Ring \\tValue any // for use by client; untouched by this library }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://zequanr.github.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-25T09:54:30.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Ring"}],["meta",{"property":"article:author","content":"王泽权"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:published_time","content":"2023-04-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-25T09:54:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Ring\\",\\"image\\":[\\"https://zequanr.github.io/\\"],\\"datePublished\\":\\"2023-04-09T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-25T09:54:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"王泽权\\"}]}"]]},"headers":[{"level":2,"title":"Ring 数据结构","slug":"ring-数据结构","link":"#ring-数据结构","children":[]},{"level":2,"title":"New","slug":"new","link":"#new","children":[]},{"level":2,"title":"init","slug":"init","link":"#init","children":[]},{"level":2,"title":"Next && Prev","slug":"next-prev","link":"#next-prev","children":[]},{"level":2,"title":"Move","slug":"move","link":"#move","children":[]},{"level":2,"title":"Link","slug":"link","link":"#link","children":[]},{"level":2,"title":"Unlike","slug":"unlike","link":"#unlike","children":[]},{"level":2,"title":"Len","slug":"len","link":"#len","children":[]},{"level":2,"title":"Do","slug":"do","link":"#do","children":[]},{"level":2,"title":"Testing","slug":"testing","link":"#testing","children":[]}],"git":{"createdTime":1706176470000,"updatedTime":1706176470000,"contributors":[{"name":"ZEQUANR","email":"675897584@qq.com","commits":1}]},"readingTime":{"minutes":7.81,"words":2343},"filePathRelative":"Go/Ring/README.md","localizedDate":"2023年4月9日","excerpt":"<p>今天给大家带来的是 Go 语言提供的内置容器 Ring，简单理解 Ring 就是一个双向循环链表，但 Ring 并没有表头与表尾的概念，Ring 的表头与表尾相连，构成一个环。</p>\\n<h2> Ring 数据结构</h2>\\n<p>老规矩我们先来了解一下 Ring 的数据结构，从 code - 1 中我们可以看到 Ring 的数据结构分别由两个指针 next、prev 和用于存储数据的 value 组成，首先从指针的命名中我们也可以得出是指向下一个或上一个 Ring 类型，简单思考一下，如图 1 通过这种数据结构我们可以创建一个环状的数据结构，有点像循环队列。</p>\\n<div class=\\"language-jsx line-numbers-mode\\" data-ext=\\"jsx\\"><pre class=\\"language-jsx\\"><code><span class=\\"token comment\\">// src/container/ring/ring.go</span>\\n\\n<span class=\\"token comment\\">// A Ring is an element of a circular list, or ring.</span>\\n<span class=\\"token comment\\">// Rings do not have a beginning or end; a pointer to any ring element</span>\\n<span class=\\"token comment\\">// serves as reference to the entire ring. Empty rings are represented</span>\\n<span class=\\"token comment\\">// as nil Ring pointers. The zero value for a Ring is a one-element</span>\\n<span class=\\"token comment\\">// ring with a nil Value.</span>\\ntype Ring struct <span class=\\"token punctuation\\">{</span>\\n\\tnext<span class=\\"token punctuation\\">,</span> prev <span class=\\"token operator\\">*</span>Ring\\n\\tValue      any <span class=\\"token comment\\">// for use by client; untouched by this library</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
