const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,u=Array.from(n.keys());this.set=t,this._type=s,this._path=u.length>0?[{node:n,keys:u}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ut=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const u=t.length+1,o=u+s,i=new Uint8Array(o*u).fill(s+1);for(let r=0;r<u;++r)i[r]=r;for(let r=1;r<o;++r)i[r*u]=r;return R(e,t,s,n,i,1,u,""),n},R=(e,t,s,n,u,o,i,r)=>{const d=o*i;t:for(const l of e.keys())if(l===F){const a=u[d-1];a<=s&&n.set(r,[e.get(l),a])}else{let a=o;for(let h=0;h<l.length;++h,++a){const m=l[h],p=i*a,f=p-i;let c=u[p];const g=Math.max(0,a-s-1),_=Math.min(i-1,a+s);for(let y=g;y<_;++y){const b=m!==t[y],z=u[f+y]+ +b,A=u[f+y+1]+1,w=u[p+y]+1,L=u[p+y+1]=Math.min(z,A,w);L<c&&(c=L)}if(c>s)continue t}R(e.get(l),t,s,n,u,a,i,r+l)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[u,o]=M(n);for(const i of u.keys())if(i!==F&&i.startsWith(o)){const r=new Map;return r.set(i.slice(o.length),u.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ut(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,O(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);let u=n.get(F);return u===void 0&&n.set(F,u=s()),u}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,u]of t)s.set(n,u);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},O=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const o of e.keys())if(o!==F&&t[n]===o[0]){const i=Math.min(s-n,o.length);let r=1;for(;r<i&&t[n+r]===o[r];)++r;const d=e.get(o);if(r===o.length)e=d;else{const l=new Map;l.set(o.slice(r),d),e.set(t.slice(n,n+r),l),e.delete(o),e=l}n+=r;continue t}const u=new Map;return e.set(t.slice(n),u),u}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)W(n);else if(s.size===1){const[u,o]=s.entries().next().value;q(n,u,o)}}},W=e=>{if(e.length===0)return;const[t,s]=M(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,u]=t.entries().next().value;n!==F&&q(e.slice(0,-1),n,u)}},q=(e,t,s)=>{if(e.length===0)return;const[n,u]=M(e);n.set(u+t,s),n.delete(u)},M=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",$="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},N=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:u,terms:o,match:i}=t.get(s);n.score=n.score+u,n.match=Object.assign(n.match,i),P(n.terms,o)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const u=e.get(n);if(u==null)continue;const{score:o,terms:i,match:r}=t.get(n);P(u.terms,i),s.set(n,{score:u.score+o,terms:u.terms,match:Object.assign(u.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,u,o)=>{const{k:i,b:r,d}=o;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/u)))},ft=e=>(t,s,n)=>{const u=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,o=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:u,prefix:o}},H=(e,t,s,n)=>{for(const u of Object.keys(e._fieldIds))if(e._fieldIds[u]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${u}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const u=e._index.fetch(n,ht),o=u.get(t);o==null||o.get(s)==null?H(e,s,t,n):o.get(s)<=1?o.size<=1?u.delete(t):o.delete(s):o.set(s,o.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:$,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,u,o,i,r,d=new Map)=>{if(u==null)return d;for(const l of Object.keys(o)){const a=o[l],h=e._fieldIds[l],m=u.get(h);if(m==null)continue;let p=m.size;const f=e._avgFieldLength[h];for(const c of m.keys()){if(!e._documentIds.has(c)){gt(e,h,c,s),p-=1;continue}const g=i?i(e._documentIds.get(c),s,e._storedFields.get(c)):1;if(!g)continue;const _=m.get(c),y=e._fieldLength.get(c)[h],b=at(_,p,e._documentCount,y,f,r),z=n*a*g*b,A=d.get(c);if(A){A.score+=z,lt(A.terms,t);const w=G(A.match,s);w?w.push(l):A.match[s]=[l]}else d.set(c,{score:z,terms:[t],match:{[s]:[l]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},u=(n.fields||e._options.fields).reduce((c,g)=>({...c,[g]:G(n.boost,g)||1}),{}),{boostDocument:o,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:l,prefix:a}={...J.weights,...i},h=e._index.get(t.term),m=B(e,t.term,t.term,1,h,u,o,d);let p,f;if(t.prefix&&(p=e._index.atPrefix(t.term)),t.fuzzy){const c=t.fuzzy===!0?.2:t.fuzzy,g=c<1?Math.min(r,Math.round(t.term.length*c)):c;g&&(f=e._index.fuzzyGet(t.term,g))}if(p)for(const[c,g]of p){const _=c.length-t.term.length;if(!_)continue;f?.delete(c);const y=a*c.length/(c.length+.3*_);B(e,t.term,c,y,g,u,o,d,m)}if(f)for(const c of f.keys()){const[g,_]=f.get(c);if(!_)continue;const y=l*c.length/(c.length+_);B(e,t.term,c,y,g,u,o,d,m)}return m},X=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(m=>X(e,m,a));return Y(h,a.combineWith)}const{tokenize:n,processTerm:u,searchOptions:o}=e._options,i={tokenize:n,processTerm:u,...o,...s},{tokenize:r,processTerm:d}=i,l=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(ft(i)).map(a=>At(e,a,i));return Y(l,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),u=[];for(const[o,{score:i,terms:r,match:d}]of n){const l=r.length,a={id:e._documentIds.get(o),score:i*l,terms:Object.keys(d),match:d};Object.assign(a,e._storedFields.get(o)),(s.filter==null||s.filter(a))&&u.push(a)}return u.sort(N),u},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:o,terms:i}of K(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=o,d.count+=1):n.set(r,{score:o,terms:i,count:1})}const u=[];for(const[o,{score:i,terms:r,count:d}]of n)u.push({suggestion:o,terms:r,score:i/d});return u.sort(N),u};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const u={};for(const[o,i]of n)u[o]=Object.fromEntries(i);t.push([s,u])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:u,fieldLength:o,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:l},a)=>{if(l!==1&&l!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=k(n),h._idToShortId=new Map,h._fieldIds=u,h._fieldLength=k(o),h._avgFieldLength=i,h._storedFields=k(r),h._dirtCount=d||0,h._index=new C;for(const[m,p]of h._documentIds)h._idToShortId.set(p,m);for(const[m,p]of e){const f=new Map;for(const c of Object.keys(p)){let g=p[c];l===1&&(g=g.ds),f.set(parseInt(c,10),k(g))}h._index.set(m,f)}return h},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),u=[];let o=0,i=0;const r=(l,a=!1)=>{let h="";i===0?h=l.length>20?`… ${l.slice(-20)}`:l:a?h=l.length+i>100?`${l.slice(0,100-i)}… `:l:h=l.length>20?`${l.slice(0,20)} … ${l.slice(-20)}`:l,h&&u.push(h),i+=h.length,a||(u.push(["mark",t]),i+=t.length,i>=100&&u.push(" …"))};let d=s.indexOf(n,o);if(d===-1)return null;for(;d>=0;){const l=d+n.length;if(r(e.slice(o,d)),o=l,i>100)break;d=s.indexOf(n,o)}return i<100&&r(e.slice(o),!0),u},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(u=>{const{id:o,terms:i,score:r}=u,d=o.includes("@"),l=o.includes("#"),[a,h]=o.split(/[#@]/),m=i.sort((f,c)=>f.length-c.length).filter((f,c)=>i.slice(c+1).every(g=>!g.includes(f))),{contents:p}=n[a]??={title:"",contents:[]};if(d)p.push([{type:"customField",key:a,index:h,display:m.map(f=>u.c.map(c=>j(c,f))).flat().filter(f=>f!==null)},r]);else{const f=m.map(c=>j(u.h,c)).filter(c=>c!==null);if(f.length&&p.push([{type:l?"heading":"title",key:a,...l&&{anchor:h},display:f},r]),"t"in u)for(const c of u.t){const g=m.map(_=>j(c,_)).filter(_=>_!==null);g.length&&p.push([{type:"text",key:a,...l&&{anchor:h},display:g},r])}}}),Q(n).sort(([,u],[,o])=>"max"==="total"?xt(u,o):kt(u,o)).map(([u,{title:o,contents:i}])=>{if(!o){const r=it(t,u);r&&(o=r.h)}return{title:o,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":222,\"nextId\":222,\"documentIds\":{\"0\":\"v-3e214e9b\",\"1\":\"v-3e214e9b#大家好-我是-zequanr\",\"2\":\"v-3e214e9b#我的现状\",\"3\":\"v-3e214e9b#语言\",\"4\":\"v-3e214e9b#框架和工具\",\"5\":\"v-3e214e9b#github\",\"6\":\"v-1a3a2105\",\"7\":\"v-1a3a2105@0\",\"8\":\"v-1a3a2105@1\",\"9\":\"v-2d0a168e\",\"10\":\"v-2d0a168e@0\",\"11\":\"v-2d0a168e@1\",\"12\":\"v-1396da1e\",\"13\":\"v-1396da1e@0\",\"14\":\"v-1396da1e@1\",\"15\":\"v-5d919c1e\",\"16\":\"v-5d919c1e@0\",\"17\":\"v-5d919c1e@1\",\"18\":\"v-53bd3924\",\"19\":\"v-53bd3924#数据结构\",\"20\":\"v-53bd3924#类型声明\",\"21\":\"v-53bd3924@0\",\"22\":\"v-53bd3924@1\",\"23\":\"v-086f9f8c\",\"24\":\"v-086f9f8c#overview\",\"25\":\"v-086f9f8c#statement\",\"26\":\"v-086f9f8c#unbuffered-channels\",\"27\":\"v-086f9f8c#buffered-channels\",\"28\":\"v-086f9f8c#testing\",\"29\":\"v-086f9f8c#communication\",\"30\":\"v-086f9f8c#channel-operate\",\"31\":\"v-086f9f8c#send-only\",\"32\":\"v-086f9f8c#receive-only\",\"33\":\"v-086f9f8c#both-way\",\"34\":\"v-086f9f8c#close\",\"35\":\"v-086f9f8c#summarize\",\"36\":\"v-086f9f8c@0\",\"37\":\"v-086f9f8c@1\",\"38\":\"v-2b6c5c56\",\"39\":\"v-2b6c5c56@0\",\"40\":\"v-2b6c5c56@1\",\"41\":\"v-2af7753a\",\"42\":\"v-2af7753a#list-struct-element-struct\",\"43\":\"v-2af7753a#next-prev\",\"44\":\"v-2af7753a#front-back\",\"45\":\"v-2af7753a#new-init\",\"46\":\"v-2af7753a#insert-insertvalue\",\"47\":\"v-2af7753a#insertbefore-insertafter\",\"48\":\"v-2af7753a#pushfront-pushback\",\"49\":\"v-2af7753a#pushbacklist-pushfrontlist\",\"50\":\"v-2af7753a#testing\",\"51\":\"v-2af7753a@0\",\"52\":\"v-2af7753a@1\",\"53\":\"v-2a4e83de\",\"54\":\"v-2a4e83de#ring-数据结构\",\"55\":\"v-2a4e83de#new\",\"56\":\"v-2a4e83de#init\",\"57\":\"v-2a4e83de#next-prev\",\"58\":\"v-2a4e83de#move\",\"59\":\"v-2a4e83de#link\",\"60\":\"v-2a4e83de#unlike\",\"61\":\"v-2a4e83de#len\",\"62\":\"v-2a4e83de#do\",\"63\":\"v-2a4e83de#testing\",\"64\":\"v-2a4e83de@0\",\"65\":\"v-2a4e83de@1\",\"66\":\"v-721bd50b\",\"67\":\"v-721bd50b#slice-数据结构\",\"68\":\"v-721bd50b#example\",\"69\":\"v-721bd50b#make\",\"70\":\"v-721bd50b#append\",\"71\":\"v-721bd50b@0\",\"72\":\"v-721bd50b@1\",\"73\":\"v-2a2cbf3a\",\"74\":\"v-2a2cbf3a#introduce\",\"75\":\"v-2a2cbf3a#data-type\",\"76\":\"v-2a2cbf3a#interface\",\"77\":\"v-2a2cbf3a#int-float64-string\",\"78\":\"v-2a2cbf3a#functions\",\"79\":\"v-2a2cbf3a#sort\",\"80\":\"v-2a2cbf3a#insertionsort\",\"81\":\"v-2a2cbf3a#heapsort\",\"82\":\"v-2a2cbf3a#find-search\",\"83\":\"v-2a2cbf3a#issorted\",\"84\":\"v-2a2cbf3a#slice-slicestable\",\"85\":\"v-2a2cbf3a#sliceissorted\",\"86\":\"v-2a2cbf3a@0\",\"87\":\"v-2a2cbf3a@1\",\"88\":\"v-40f17060\",\"89\":\"v-40f17060#类型说明\",\"90\":\"v-40f17060#数据结构\",\"91\":\"v-40f17060#类型声明\",\"92\":\"v-40f17060#解析\",\"93\":\"v-40f17060#stdstring\",\"94\":\"v-40f17060#rawstring\",\"95\":\"v-40f17060#拼接\",\"96\":\"v-40f17060#类型转换\",\"97\":\"v-40f17060#将字节片转换为字符串\",\"98\":\"v-40f17060#将字符串转换为字节片\",\"99\":\"v-40f17060@0\",\"100\":\"v-40f17060@1\",\"101\":\"v-328fed8a\",\"102\":\"v-328fed8a@0\",\"103\":\"v-328fed8a@1\",\"104\":\"v-1a0d0f8b\",\"105\":\"v-1a0d0f8b@0\",\"106\":\"v-1a0d0f8b@1\",\"107\":\"v-c882fa1c\",\"108\":\"v-c882fa1c@0\",\"109\":\"v-c882fa1c@1\",\"110\":\"v-7c1d41a1\",\"111\":\"v-7c1d41a1#声明数组\",\"112\":\"v-7c1d41a1#数组初始化\",\"113\":\"v-7c1d41a1#访问数组元素\",\"114\":\"v-7c1d41a1#计算数组长度\",\"115\":\"v-7c1d41a1@0\",\"116\":\"v-7c1d41a1@1\",\"117\":\"v-49cda705\",\"118\":\"v-49cda705#数据结构\",\"119\":\"v-49cda705#创建节点\",\"120\":\"v-49cda705#查询节点\",\"121\":\"v-49cda705#遍历节点-递归方法\",\"122\":\"v-49cda705#前序\",\"123\":\"v-49cda705#中序\",\"124\":\"v-49cda705#后序\",\"125\":\"v-49cda705#遍历节点-非递归方法\",\"126\":\"v-49cda705#前序-1\",\"127\":\"v-49cda705#中序-1\",\"128\":\"v-49cda705#后序-1\",\"129\":\"v-49cda705@0\",\"130\":\"v-49cda705@1\",\"131\":\"v-558cfeed\",\"132\":\"v-558cfeed#链表的结构定义\",\"133\":\"v-558cfeed#链表的常用操作\",\"134\":\"v-558cfeed#创建节点\",\"135\":\"v-558cfeed#插入节点\",\"136\":\"v-558cfeed#查找节点\",\"137\":\"v-558cfeed#删除节点\",\"138\":\"v-558cfeed#打印节点\",\"139\":\"v-558cfeed#完整代码\",\"140\":\"v-558cfeed#常见链表类型\",\"141\":\"v-558cfeed@0\",\"142\":\"v-558cfeed@1\",\"143\":\"v-d0e11c2e\",\"144\":\"v-d0e11c2e#队列的概念\",\"145\":\"v-d0e11c2e#队列的常用操作\",\"146\":\"v-d0e11c2e#队列的实现\",\"147\":\"v-d0e11c2e#基于链表实现\",\"148\":\"v-d0e11c2e#基于数组实现\",\"149\":\"v-d0e11c2e#为什么要用模运算\",\"150\":\"v-d0e11c2e@0\",\"151\":\"v-d0e11c2e@1\",\"152\":\"v-ca2e115c\",\"153\":\"v-ca2e115c#栈的常用操作\",\"154\":\"v-ca2e115c#栈的实现\",\"155\":\"v-ca2e115c#基于链表实现\",\"156\":\"v-ca2e115c#基于数组实现\",\"157\":\"v-ca2e115c@0\",\"158\":\"v-ca2e115c@1\",\"159\":\"v-4f34985d\",\"160\":\"v-4f34985d#语句\",\"161\":\"v-4f34985d#表达式\",\"162\":\"v-4f34985d#语句块\",\"163\":\"v-4f34985d#空格\",\"164\":\"v-4f34985d#注释\",\"165\":\"v-4f34985d@0\",\"166\":\"v-4f34985d@1\",\"167\":\"v-730105bf\",\"168\":\"v-730105bf@0\",\"169\":\"v-730105bf@1\",\"170\":\"v-fe1d8c58\",\"171\":\"v-fe1d8c58#变量名\",\"172\":\"v-fe1d8c58#变量的声明\",\"173\":\"v-fe1d8c58#变量的赋值\",\"174\":\"v-fe1d8c58#变量的作用域\",\"175\":\"v-fe1d8c58@0\",\"176\":\"v-fe1d8c58@1\",\"177\":\"v-3ea4e022\",\"178\":\"v-3ea4e022#标准-i-o-函数\",\"179\":\"v-3ea4e022#文件操作函数\",\"180\":\"v-3ea4e022#字符串操作函数\",\"181\":\"v-3ea4e022@0\",\"182\":\"v-3ea4e022@1\",\"183\":\"v-16e02b8a\",\"184\":\"v-16e02b8a#创建型设计模式\",\"185\":\"v-16e02b8a#结构型设计模式\",\"186\":\"v-16e02b8a#行为型设计模式\",\"187\":\"v-7f500abe\",\"188\":\"v-7f500abe#js-数据类型\",\"189\":\"v-7f500abe#基本数据类型\",\"190\":\"v-7f500abe#引用数据类型\",\"191\":\"v-7f500abe#浅拷贝与深拷贝\",\"192\":\"v-7f500abe#浅拷贝\",\"193\":\"v-7f500abe#深拷贝\",\"194\":\"v-7f500abe@0\",\"195\":\"v-7f500abe@1\",\"196\":\"v-1350cfe0\",\"197\":\"v-1350cfe0#blob\",\"198\":\"v-1350cfe0#file\",\"199\":\"v-1350cfe0#前端获取文件的几种情况\",\"200\":\"v-1350cfe0#input-上传\",\"201\":\"v-1350cfe0#文件拖放\",\"202\":\"v-1350cfe0#showopenfilepicker-api\",\"203\":\"v-1350cfe0#请求远端\",\"204\":\"v-1350cfe0#filereader\",\"205\":\"v-1350cfe0#arraybuffer\",\"206\":\"v-1350cfe0@0\",\"207\":\"v-1350cfe0@1\",\"208\":\"v-5ac0e30a\",\"209\":\"v-5ac0e30a@0\",\"210\":\"v-5ac0e30a@1\",\"211\":\"v-427af5f4\",\"212\":\"v-427af5f4#行为型设计模式\",\"213\":\"v-4712cf47\",\"214\":\"v-4712cf47#创建型设计模式\",\"215\":\"v-549eb9d8\",\"216\":\"v-549eb9d8#结构型设计模式\",\"217\":\"v-75c090cb\",\"218\":\"v-7e4580cb\",\"219\":\"v-d92853c2\",\"220\":\"v-20a9a3d6\",\"221\":\"v-22142b7f\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[3,3],\"2\":[2,10],\"3\":[2],\"4\":[2],\"5\":[2],\"6\":[1,12],\"7\":[null,null,1],\"8\":[null,null,1],\"9\":[1,8],\"10\":[null,null,1],\"11\":[null,null,1],\"12\":[1],\"13\":[null,null,1],\"14\":[null,null,1],\"15\":[1],\"16\":[null,null,1],\"17\":[null,null,1],\"18\":[1,70],\"19\":[1,36],\"20\":[1,206],\"21\":[null,null,1],\"22\":[null,null,1],\"23\":[1,12],\"24\":[1,12],\"25\":[1,10],\"26\":[2,17],\"27\":[2,33],\"28\":[1,7],\"29\":[1,90],\"30\":[2,11],\"31\":[2,42],\"32\":[2,43],\"33\":[2,64],\"34\":[1,67],\"35\":[1,18],\"36\":[null,null,1],\"37\":[null,null,1],\"38\":[1,363],\"39\":[null,null,1],\"40\":[null,null,1],\"41\":[1,7],\"42\":[3,104],\"43\":[2,49],\"44\":[2,87],\"45\":[2,65],\"46\":[2,63],\"47\":[2,63],\"48\":[2,53],\"49\":[2,67],\"50\":[1,35],\"51\":[null,null,1],\"52\":[null,null,1],\"53\":[1,11],\"54\":[2,67],\"55\":[1,60],\"56\":[1,33],\"57\":[2,37],\"58\":[1,54],\"59\":[1,100],\"60\":[1,64],\"61\":[1,43],\"62\":[1,55],\"63\":[1,62],\"64\":[null,null,1],\"65\":[null,null,1],\"66\":[1,4],\"67\":[2,40],\"68\":[1,65],\"69\":[1,80],\"70\":[1,132],\"71\":[null,null,1],\"72\":[null,null,1],\"73\":[1,7],\"74\":[1,11],\"75\":[2,15],\"76\":[1,118],\"77\":[3,105],\"78\":[1,6],\"79\":[1,192],\"80\":[1,44],\"81\":[1,69],\"82\":[2,70],\"83\":[1,42],\"84\":[2,117],\"85\":[1,57],\"86\":[null,null,1],\"87\":[null,null,1],\"88\":[1],\"89\":[1,47],\"90\":[1,29],\"91\":[1,39],\"92\":[1,30],\"93\":[2,46],\"94\":[2,80],\"95\":[1,84],\"96\":[1],\"97\":[1,130],\"98\":[1,28],\"99\":[null,null,1],\"100\":[null,null,1],\"101\":[1,104],\"102\":[null,null,1],\"103\":[null,null,2],\"104\":[1,136],\"105\":[null,null,1],\"106\":[null,null,2],\"107\":[1,208],\"108\":[null,null,1],\"109\":[null,null,2],\"110\":[1,7],\"111\":[1,27],\"112\":[1,63],\"113\":[1,18],\"114\":[1,30],\"115\":[null,null,1],\"116\":[null,null,2],\"117\":[1,24],\"118\":[1,19],\"119\":[1,17],\"120\":[1,21],\"121\":[2],\"122\":[1,17],\"123\":[1,17],\"124\":[1,17],\"125\":[2],\"126\":[1,29],\"127\":[1,29],\"128\":[1,33],\"129\":[null,null,1],\"130\":[null,null,2],\"131\":[1,21],\"132\":[1,61],\"133\":[1],\"134\":[1,47],\"135\":[1,21],\"136\":[1,24],\"137\":[1,28],\"138\":[1,15],\"139\":[1,90],\"140\":[1,39],\"141\":[null,null,1],\"142\":[null,null,2],\"143\":[1,12],\"144\":[1,6],\"145\":[1,11],\"146\":[1,6],\"147\":[1,67],\"148\":[1,66],\"149\":[1,15],\"150\":[null,null,1],\"151\":[null,null,2],\"152\":[1,10],\"153\":[1,9],\"154\":[1,13],\"155\":[1,56],\"156\":[1,55],\"157\":[null,null,1],\"158\":[null,null,2],\"159\":[1],\"160\":[1,30],\"161\":[1,28],\"162\":[1,13],\"163\":[1,28],\"164\":[1,40],\"165\":[null,null,1],\"166\":[null,null,1],\"167\":[2,134],\"168\":[null,null,1],\"169\":[null,null,1],\"170\":[1],\"171\":[1,72],\"172\":[1,20],\"173\":[1,48],\"174\":[1,63],\"175\":[null,null,1],\"176\":[null,null,1],\"177\":[2,9],\"178\":[4,15],\"179\":[1,47],\"180\":[1,9],\"181\":[null,null,1],\"182\":[null,null,1],\"183\":[1,5],\"184\":[1,20],\"185\":[1,20],\"186\":[1,29],\"187\":[2],\"188\":[2,9],\"189\":[1,32],\"190\":[1,28],\"191\":[1,30],\"192\":[1,38],\"193\":[1,66],\"194\":[null,null,1],\"195\":[null,null,1],\"196\":[2],\"197\":[1,16],\"198\":[1,35],\"199\":[1],\"200\":[2,35],\"201\":[1,52],\"202\":[2,46],\"203\":[1,23],\"204\":[1,128],\"205\":[1,62],\"206\":[null,null,1],\"207\":[null,null,1],\"208\":[2],\"209\":[null,null,1],\"210\":[null,null,1],\"211\":[1],\"212\":[1,29],\"213\":[1],\"214\":[1,20],\"215\":[1],\"216\":[1,20],\"217\":[2],\"218\":[2],\"219\":[2],\"220\":[2],\"221\":[1]},\"averageFieldLength\":[1.3302340215816384,43.53047840073132,0.7652261387807338],\"storedFields\":{\"0\":{\"h\":\"关于我\"},\"1\":{\"h\":\"大家好，我是 ZEQUANR\",\"t\":[\"我正在努力学习更多的知识，希望可以变得更好！ \"]},\"2\":{\"h\":\"我的现状:\",\"t\":[\"🔭 我目前从事前端开发\",\"📚 我现在正在学习 Go\",\"🥅 2024 年目标：我希望在开源和小组项目上进行合作，并学到很多东西\"]},\"3\":{\"h\":\"语言:\"},\"4\":{\"h\":\"框架和工具:\"},\"5\":{\"h\":\"Github:\"},\"6\":{\"h\":\"语言课堂笔记\",\"t\":[\"每当看到孩子们面对一串串代码时眼睛闪烁出好奇的光芒，我内心无比欣慰。他们用稚嫩的小手敲击键盘，就像农夫播撒种子，期待收获科技树上的累累硕果。编程学习过程中，孩子们不仅学会了如何操控计算机执行任务，更是在培养逻辑思维、问题解决能力和创新意识，这些品质将伴随他们一生，成为他们人生路上坚实的基石。\"]},\"7\":{\"c\":[\"C\"]},\"8\":{\"c\":[\"C\"]},\"9\":{\"h\":\"Go\",\"t\":[\"Array\",\"Slice\",\"String\",\"Channel\",\"Sort\",\"Ring\",\"List\",\"Heap\"]},\"10\":{\"c\":[\"Go\"]},\"11\":{\"c\":[\"Go\"]},\"12\":{\"h\":\"提效工具\"},\"13\":{\"c\":[\"工具\"]},\"14\":{\"c\":[\"工具\"]},\"15\":{\"h\":\"JavaScript\"},\"16\":{\"c\":[\"JavaScript\"]},\"17\":{\"c\":[\"JavaScript\"]},\"18\":{\"h\":\"Array\",\"t\":[\"Go 语言中的数组可以简单理解为存储同一种数据类型且存储数量（长度）固定的序列，数组在规划内存的详细布局时很有用，它不仅是切片的构建块，Go 语言中许多基础的数据结构都是通过数组来实现数据的存储工作。\",\"数组这个概念在许多语言中皆有存在，而 Go 语言是一门属于 C 语言家族的编程语言，但在 Go 语言和 C 语言中，数组的工作方式有很大的不同。\",\"package main import ( \\\"fmt\\\" \\\"reflect\\\" ) func show(x [4]int) { fmt.Printf(\\\"Address(Array) = %p --> %d\\\\n\\\", &x, x) } func compare(x [4]int, y [5]int) { fmt.Printf(\\\"copyArray == compareArray %t \\\\n\\\", reflect.TypeOf(x) == reflect.TypeOf(y)) } func main() { Array := [4]int{ 0, 1, 2, 3 } var copyArray [4]int var compareArray [5]int copyArray = Array fmt.Printf(\\\"copyArray --> %d \\\\n\\\", copyArray) fmt.Printf(\\\"Address(Array) = %p --> %d\\\\n\\\", &Array, Array) fmt.Printf(\\\"Address(copyArray) = %p --> %d\\\\n\\\", &copyArray, copyArray) show(Array) compare(copyArray, compareArray) } // L22: copyArray --> [0 1 2 3] // L23: Address(Array) = 0xc0000a0000 --> [0 1 2 3] // L24: Address(copyArray) = 0xc0000a0020 --> [0 1 2 3] // L25: Address(Array) = 0xc0000a00c0 --> [0 1 2 3] // L26: copyArray == compareArray false \",\"数组是值，将一个数组分配给另一个数组会复制所有元素。\",\"数组变量表示整个数组，如果将数组传递给函数，它将收到数组的副本，而不是指向它的指针。\",\"数组的存储数量（长度）是其类型的一部分， [10]int 和 [20]int 类型是不同的，所以数组不能被随意调整大小。\"]},\"19\":{\"h\":\"数据结构\",\"t\":[\"首先我们先来看一下 Array 的数据结构，从 code - 1 中我们可以看到该类型包含两个字段，分别是元素类型 Elem 和数组的大小 Bound，这两个字段共同构成了数组类型。\",\"// src/cmd/compile/internal/types/type.go // Array contains Type fields specific to array types. type Array struct { Elem *Type // element type Bound int64 // number of elements; <0 if unknown yet } \"]},\"20\":{\"h\":\"类型声明\",\"t\":[\"如 code - 3 所示我们可以使用两种方式在 Go 语言中声明数组，即一种是直接在 [] 里指定数组大小，另一种是使用 [...] 后面添加你想要声明的数据类型，Go 语言会在编译期间通过源代码推导数组的大小。\",\"var arr [4]int arr = [4]int{ 0, 1, 2, 3 } arr = [...]int{ 0, 1, 2, 3 } \",\"既然存在两种不同的声明方式，那么编译器所做出的处理也大不相同，那么我们就来看一下编译器在遇到不同情况时所做出的处理如 code - 4 所示，如果当前节点的操作类型是 OTARRAY 也就是我们使用的第一种声明方式，会向 tcArrayType 函数传入 ArrayType 类型的结构体 code - 6 指针来进行处理，如果当前节点的操作类型是 OCOMPLIT 也就是我们使用的第二种声明方，会向 tcCompLit 函数传入 CompLitExpr 类型的结构体 code - 8 指针来进行处理。\",\"// src/cmd/compile/internal/typecheck/typecheck.go // typecheck1 should ONLY be called from typecheck. func typecheck1(n ir.Node, top int) ir.Node { if n, ok := n.(*ir.Name); ok { typecheckdef(n) } switch n.Op() { default: ir.Dump(\\\"typecheck\\\", n) base.Fatalf(\\\"typecheck %v\\\", n.Op()) panic(\\\"unreachable\\\") ... case ir.OTARRAY: n := n.(*ir.ArrayType) return tcArrayType(n) ... case ir.OCOMPLIT: return tcCompLit(n.(*ir.CompLitExpr)) ... } \",\"下面我们就来看看 tcArrayType() 方法 code - 5 首先具体细节我们暂时先不提及，来看看他的大体实现思路，当我们以已第一种声明方式进入到此函数时，该函数会对其进行错误判断，没有出现错误时就会调用 NewArray() 方法。\",\"// src/cmd/compile/internal/typecheck/type.go // tcArrayType typechecks an OTARRAY node. func tcArrayType(n *ir.ArrayType) ir.Node { n.Elem = typecheckNtype(n.Elem) if n.Elem.Type() == nil { return n } if n.Len == nil { // [...]T if !n.Diag() { n.SetDiag(true) base.Errorf(\\\"use of [...] array outside of array literal\\\") } return n } n.Len = indexlit(Expr(n.Len)) size := n.Len if ir.ConstType(size) != constant.Int { switch { case size.Type() == nil: // Error already reported elsewhere. case size.Type().IsInteger() && size.Op() != ir.OLITERAL: base.Errorf(\\\"non-constant array bound %v\\\", size) default: base.Errorf(\\\"invalid array bound %v\\\", size) } return n } v := size.Val() if ir.ConstOverflow(v, types.Types[types.TINT]) { base.Errorf(\\\"array bound is too large\\\") return n } if constant.Sign(v) < 0 { base.Errorf(\\\"array bound must be non-negative\\\") return n } bound, _ := constant.Int64Val(v) t := types.NewArray(n.Elem.Type(), bound) n.SetOTYPE(t) types.CheckSize(t) return n } \",\"// src/cmd/compile/internal/ir/type.go // An ArrayType represents a [Len]Elem type syntax. // If Len is nil, the type is a [...]Elem in an array literal. type ArrayType struct { miniType Len Node Elem Ntype } \",\"我们在来看看 tcCompLit() 方法 code - 7 当我们使用第二种声明方式时，编译器会在的 tcCompLit 方法中调用 typecheckarraylit 方法通过遍历元素的方式来计算数组中元素的数量。\",\"// src/cmd/compile/internal/typecheck/expr.go // The result of tcCompLit MUST be assigned back to n, e.g. // n.Left = tcCompLit(n.Left) func tcCompLit(n *ir.CompLitExpr) (res ir.Node) { ... // Need to handle [...]T arrays specially. if array, ok := n.Ntype.(*ir.ArrayType); ok && array.Elem != nil && array.Len == nil { array.Elem = typecheckNtype(array.Elem) elemType := array.Elem.Type() if elemType == nil { n.SetType(nil) return n } length := typecheckarraylit(elemType, -1, n.List, \\\"array literal\\\") n.SetOp(ir.OARRAYLIT) n.SetType(types.NewArray(elemType, length)) n.Ntype = nil return n } ... switch t.Kind() { default: base.Errorf(\\\"invalid composite literal type %v\\\", t) n.SetType(nil) case types.TARRAY: typecheckarraylit(t.Elem(), t.NumElem(), n.List, \\\"array literal\\\") n.SetOp(ir.OARRAYLIT) n.Ntype = nil ... } \",\"// src/cmd/compile/internal/ir/expr.go // A CompLitExpr is a composite literal Type{Vals}. // Before type-checking, the type is Ntype. type CompLitExpr struct { miniExpr origNode Ntype Ntype List Nodes // initialized values Prealloc *Name Len int64 // backing array length for OSLICELIT } \",\"看到这里我们可以发现不管是第一种还是第二种声明方式在运行时是完全等价的到最后都会调用 NewArray 方法 code - ? 来创建包含数组大小的 Array 结构体 code - ? ，第二种声明方式也只是 Go 语言为我们提供的一种语法糖。\",\"// src/cmd/compile/internal/types/type.go // NewArray returns a new fixed-length array Type. func NewArray(elem *Type, bound int64) *Type { if bound < 0 { base.Fatalf(\\\"NewArray: invalid bound %v\\\", bound) } t := newType(TARRAY) t.extra = &Array{Elem: elem, Bound: bound} t.SetNotInHeap(elem.NotInHeap()) if elem.HasTParam() { t.SetHasTParam(true) } if elem.HasShape() { t.SetHasShape(true) } return t } \"]},\"21\":{\"c\":[\"Go\"]},\"22\":{\"c\":[\"Go\"]},\"23\":{\"h\":\"Channel\",\"t\":[\"本周我们来看 Go 语言中的 channel，作为 Go 语言核心的数据结构，也是作为 goroutine 之间的通信方式，下面我们将通过一些测试代码来开始本周的 channel 的学习。\"]},\"24\":{\"h\":\"Overview\",\"t\":[\"从 channel 关键字上来看大致意思为“管道”，如图 1 所示作为 Go 语言中 Goroutine 之间的通信方式。\"]},\"25\":{\"h\":\"Statement\",\"t\":[\"channel 共有两种形式，分别是 Unbuffered channels 与 Buffered channels，在此之前我们需要先知道，这两种形式是如何声明的。\"]},\"26\":{\"h\":\"Unbuffered channels\",\"t\":[\"ch := make(chan int) \",\"package main import ( \\\"fmt\\\" \\\"reflect\\\" ) func main() { ch := make(chan int) fmt.Println(len(ch), cap(ch)) fmt.Println(reflect.TypeOf(ch)) } // 0 0 // chan int \"]},\"27\":{\"h\":\"Buffered channels\",\"t\":[\"ch := make(chan int, 2) \",\"package main import ( \\\"fmt\\\" \\\"reflect\\\" ) func main() { ch := make(chan int, 2) fmt.Println(len(ch), cap(ch)) fmt.Println(reflect.TypeOf(ch)) } // 0 2 // chan int \",\"值得注意的是在 code - 5 中，我们发现 Go 语言中 channel 类型并不像 array 类型一样其容量也算在类型之中。\",\"package main import ( \\\"fmt\\\" \\\"reflect\\\" ) func main() { buffered := make(chan int, 4) unbuffered := make(chan int) var ch chan int = buffered fmt.Println(len(ch), cap(ch)) fmt.Println(reflect.TypeOf(ch)) ch = unbuffered fmt.Println(len(ch), cap(ch)) fmt.Println(reflect.TypeOf(ch)) } // 0 4 // chan int // 0 0 // chan int \"]},\"28\":{\"h\":\"Testing\",\"t\":[\"接下来，我们将采取测试代码的形式一步一步的分析 Go 语言中 Channel 的特性。\"]},\"29\":{\"h\":\"Communication\",\"t\":[\"从当前的测试代码 code- 6 ~ 7 中我们可以发现，无缓存 channel 在发送消息后，会堵塞当前的线程，导致之后的程序无法运行。\",\"package main import ( \\\"fmt\\\" ) func main() { ch := make(chan string) message := \\\"hello\\\" ch <- message fmt.Println(message) v := <- ch fmt.Println(v) } // fatal error: all goroutines are asleep - deadlock! // // goroutine 1 [chan send]: // main.main() // /app/example.go:12 +0x4a \",\"package main import ( \\\"fmt\\\" ) func main() { ch := make(chan string) message := \\\"hello\\\" fmt.Println(message) ch <- message v := <- ch fmt.Println(v) } // hello // fatal error: all goroutines are asleep - deadlock! // // goroutine 1 [chan send]: // main.main() // /app/example.go:12 +0x4a \",\"从 code - 8 中我们可以确认，无缓存 channel 在发送消息后会堵塞当前线程直至该消息被接收后。\",\"package main import ( \\\"fmt\\\" ) func main() { ch := make(chan string) message := \\\"hello\\\" go func() { ch <- message }() v := <- ch fmt.Println(v) } // hello \",\"从 code - 9 中我们可以确认，无缓存 channel 在接收消息前会堵塞当前线程直至收到该消息后。\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { ch := make(chan string) message := \\\"World\\\" go func() { fmt.Println(\\\"Hello\\\") v := <- ch fmt.Println(v) }() time.Sleep(2 * time.Second) ch <- message fmt.Println(\\\"send\\\") time.Sleep(2 * time.Second) } // Hello // send // World \",\"那么我们通过刚刚的测试代码 code 6 ～ 9 中我们已经可以确定在 Unbuffered Channel 中接收者会阻塞直至接收到消息，发送者会阻塞直至接收者接收到消息。\",\"从 code - 10 中我们可以确认在 buffered Channel 中，缓存没有被占满的情况下是不会对当前线程进行堵塞的。\",\"package main import ( \\\"fmt\\\" ) func main() { ch := make(chan string, 2) message := \\\"Hello World\\\" ch <- message v := <- ch fmt.Println(v) } // Hello World \",\"从 code - 11 中我们可以确认在 buffered Channel 中，缓存被占满的情况下是会对当前线程进行堵塞的，那么接下来的结果可想而知了，在这里我们就不做过多描述了。\",\"package main import ( \\\"fmt\\\" ) func main() { ch := make(chan int, 4) for i := 0; i <= cap(ch); i++ { ch <- i } v := <- ch fmt.Println(v) } // fatal error: all goroutines are asleep - deadlock! // // goroutine 1 [chan send]: // main.main() // /app/example.go:12 +0x4a \",\"从 code - 12 中我们可以确认在 buffered Channel 中，发消息者与接收者的顺序为先发的先被接收。\",\"package main import ( \\\"fmt\\\" ) func main() { ch := make(chan int, 4) for i := 1; i < cap(ch); i++ { ch <- i } for i := 1; i < cap(ch); i++ { v := <- ch fmt.Println(v) } } // 1 // 2 // 3 \",\"从 code -13 中我们可以确认，channel 在发送接收完消息后是可以继续工作的，并且对当前定义所传递数据类型中可以知道 channel 可以传递任意类型。\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { ch := make(chan interface{}) go func() { message := \\\"first\\\" ch <- message v := <-ch fmt.Println(v) }() go func() { v := <-ch fmt.Println(v) message := \\\"second\\\" ch <- message }() time.Sleep(time.Second) } \",\"通过我们刚刚的测试代码相比我们已经对 channel 收发消息有了一定的了解，下面我们就来总结一下。\"]},\"30\":{\"h\":\"Channel Operate\",\"t\":[\"在 Go 语言中 channel 默认是双向的，也就是既可以读也可以写，同时，我们还可以创建单向的 channel，单向 channel 也就是只能用于发送数据或者只能用于接收数据的 channel。\"]},\"31\":{\"h\":\"send-only\",\"t\":[\"声明 send-only channel 如 code - 14 所示，只需要在 chan 关键字后面加上 <- 符号便可，如 code - 8 所示现在的 channel 只能用于发送数据，而不能用于接收数据。\",\"var chanName chan<- chanType \",\"package main func main() { ch := make(chan<- string) <- ch } // # command-line-arguments // ./main.go:5:5: invalid operation: cannot receive from send-only channel ch (variable of type chan<- string) \"]},\"32\":{\"h\":\"receive-only\",\"t\":[\"声明 receive-only channel 如 code - 16 所示，只需要在 chan 关键字前面加上 <- 符号便可，如 code - 10 所示现在的 channel 只能用于接收数据，而不能用于写数据。\",\"var chanName <-chan chanType \",\"package main func main() { ch := make(<-chan string) ch <- \\\"Hello\\\" } // # command-line-arguments // ./main.go:5:2: invalid operation: cannot send to receive-only channel ch (variable of type <-chan string) \"]},\"33\":{\"h\":\"both-way\",\"t\":[\"声明 both-way channel 如 code - 18 所示，我们不需要在 chan 关键字前面或后面加符号便可，也就是我们最开始测试时使用的类型。\",\"var chanName chan chanType \",\"从 code - 11 中，我们可以确认 both-way channel 是可以任意转换成 receive-only channel 与 send-only channel 而反之则不可以。\",\"package main func main() { ch := make(chan string) var send chan<- string = ch send <- \\\"Hello\\\" var recv <-chan string = ch <- recv d1 := (chan int)(send) d2 := (chan int)(recv) } // # command-line-arguments // ./main.go:12:19: cannot convert send (variable of type chan<- string) to type chan int // ./main.go:13:19: cannot convert recv (variable of type <-chan string) to type chan int \",\"所以只读或者只写 channel 的作用更像是规范双向 channel 在某个函数或进程中的使用，如 code - 20 所示使代码可读性更高，同时也提醒着使用者应该做什么。\",\"package main import ( \\\"fmt\\\" ) func receive(ch <-chan string) { v := <-ch fmt.Println(v) } func send(ch chan<- string) { message := \\\"Hello\\\" ch <- message } func main() { ch := make(chan string) go func() { send(ch) }() receive(ch) } // Hello \"]},\"34\":{\"h\":\"close\",\"t\":[\"如 code - 21 所示 receive-only channe 是不可以被 close 的。\",\"package main func main() { both := make(chan string) send := make(chan<- string) receive := make(<-chan string) close(both) close(send) close(receive) } // # command-line-arguments // ./main.go:10:8: invalid operation: cannot close receive-only channel receive (variable of type <-chan string) \",\"如 code - 22 所示 channe 被 close 后是可以直接被读取的，读取是当前定义类型的初始值。\",\"package main import ( \\\"fmt\\\" ) func main() { ch := make(chan int) close(ch) fmt.Println(<- ch) } // 0 \",\"如 code - 23 所示 beffered channe 被 close 后也是可以读取值的，只不过 channel 中之前发送的数据会先被读取出来。\",\"package main import ( \\\"fmt\\\" ) func main() { ch := make(chan int, 4) for i := 1; i < cap(ch); i++ { ch <- i } close(ch) for i := 1; i <= cap(ch); i++ { v := <- ch fmt.Println(v) } } // 1 // 2 // 3 // 0 \",\"如 code - 24 所示只读只写的 channe 被 close 后是不可以直接被读取的。\",\"package main import ( \\\"fmt\\\" ) func main() { send := make(chan<- int) receive := make(<-chan int) close(send) close(receive) fmt.Println(<- send) fmt.Println(<- receive) } // # command-line-arguments // ./main.go:12:8: invalid operation: cannot close receive-only channel receive (variable of type <-chan int) // ./main.go:14:17: invalid operation: cannot receive from send-only channel send (variable of type chan<- int) \"]},\"35\":{\"h\":\"Summarize\",\"t\":[\"通过本周对 channel 的学习，相比我们已经对 channel 有了一定的了解，下面我们就来总结一下我们的测试结果。\",\"channel 类型不会对容量做出限制。\",\"channel 可以发送任意类型。\",\"无缓存的 channel 在读取和写入时都会对我们当前的线程进行堵塞直到其他线程对其进行处理。\",\"channel 类型可以被定义为只读只写，多数情况下是规范双向 channel 在某个函数或进程中的使用。\",\"hannel 被 close 后依旧可以读值。\"]},\"36\":{\"c\":[\"Go\"]},\"37\":{\"c\":[\"Go\"]},\"38\":{\"h\":\"Heap\",\"t\":[\"heap 是一种常见的数据结构，本周将带大家来了解一下 Go 语言标准库中的 Heap 包，首先在此之前我们需要对堆(heap) 有所概念，简单理解就是用数组实现的完全二叉树，在 Go 官方概述中有这样说道“堆是一棵树，其属性是每个节点都是其子树中的最小值节点”，那么堆的属性又是什么呢？\",\"所谓的“堆属性”指的就是最大堆与最小堆，这两者之间最大的区别在于数据的排列方式不同，如图 1 所示在最大堆中，父节点的值比每一个子节点的值都要大。在最小堆中，父节点的值比每一个子节点的值都要小，在 Go 语言中所采用的是最小堆，树中最小的元素是根，索引为 0。 \",\"通过刚刚的讲述想必我们已经对堆有了一个基础的概念，那问题来了，虽然堆在物理结构上是一个一维的数组，但在存储逻辑上是一棵完全二叉树，所以堆的数据结构是非线性的，那它即没有指针指向当前节点的父节点或子节点，也没有多余的空间用来存储当前节点信息，我们该如何对当前节点元素完成父子节点的定位操作。\",\"其实不然，我们只需要通过对数组中的索引(index) 进行简单计算就可得到当前节点的父节点以及子节点，并不需要过多的存储空间，如 code - 1 所示我们可以给当前节点与其父或子节点创建一个映射关系，使得他们可以一一对应。\",\"var index, parent, left, right int index = 3 parent = (index - 1) / 2 left = index * 2 + 1 right = index * 2 + 2 \",\"值得注意的是堆并不是真正的完全二叉树，他们之间虽有许多相似之处，但差别还是很大的首先我们都知道在完全二叉树中左子节点必须比父节点小，右子节点必须必比父节点大，而在堆中则不需要这样，最小堆中子节点都必须要比父节点大，并且在存储方面完全二叉树所占用的内存空间也要比堆大上许多，而且我们也一直在强调是完全二叉树并非普通的二叉树，其原因我们也可想而知如图 3 所示在堆中当前层级的所有节点都没有填满之前是不允许开始下一层的填充的，这也符合完全二叉树的定义。\",\"关于 heap 的概念就先讲到这里，言归正传，首先我们先开看一下 heap 包中的 interface 都定义了哪些方法，从 code - 2 中我们可以看到 heap 包中的 Interface 继承了 sort 中 Interface 的方法，那我们就来简单了解一下 sort 包中的 interface 中都有什么方法，如 code - 3 中所示共有三个方法分别为：Len()、Less()、Swap()，在加上 heap 包中 Interface 上的 Push() 与 Pop() 方法共为五个方法，这五个方法需要使用者根据不同的数据类型去实现。\",\"// src/container/heap/heap.go // Note that Push and Pop in this interface are for package heap's // implementation to call. To add and remove things from the heap, // use heap.Push and heap.Pop. type Interface interface { sort.Interface Push(x any) // add x as element Len() Pop() any // remove and return element Len() - 1. } \",\"// src/sort/sort.go // An implementation of Interface can be sorted by the routines in this package. // The methods refer to elements of the underlying collection by integer index. type Interface interface { // Len is the number of elements in the collection. Len() int // Less reports whether the element with index i // must sort before the element with index j. // // If both Less(i, j) and Less(j, i) are false, // then the elements at index i and j are considered equal. // Sort may place equal elements in any order in the final result, // while Stable preserves the original input order of equal elements. // // Less must describe a transitive ordering: // - if both Less(i, j) and Less(j, k) are true, then Less(i, k) must be true as well. // - if both Less(i, j) and Less(j, k) are false, then Less(i, k) must be false as well. // // Note that floating-point comparison (the < operator on float32 or float64 values) // is not a transitive ordering when not-a-number (NaN) values are involved. // See Float64Slice.Less for a correct implementation for floating-point values. Less(i, j int) bool // Swap swaps the elements with indexes i and j. Swap(i, j int) } \",\"了解了 Interface 的定义之后，接下来就来看看 heap 包中的代码都有些什么？如图 4 除了 Interface 中我们需要定义的五个方法外，包中还包括 7 个方法，通过函数名中我们可以观察到，其中有 5 个方法的函数名为首字母大写，那这也说明此 5 个方法为 heap 包中所对外提供的方法，剩余两个仅为本包中的方法。 \",\"第一个先来看看 up 方法 code - 4，首先来看传入的函数参数分别是什么 Interface 类型的 h 与 int 类型的 j，其中 h 就是我们刚刚看到的 code - 2，j 就代表我们当前所传入的节点位置，参数看完了就来看看具体的逻辑，L4：启用一个 for 循环，L5：根据传入的 j 计算出当前的父节点 i，L6：如果当前节点是堆顶或者父节点的值小于等于子节点的值则直接退出循环，L9：父子节点数值交换，L10：j 被赋值为父节点进行下一次循环。\",\"// src/container/heap/heap.go func up(h Interface, j int) { for { i := (j - 1) / 2 // parent if i == j || !h.Less(j, i) { break } h.Swap(i, j) j = i } } \",\"随后就是 down() 方法，老样子我们先来看看传入的参数 Interface 类型的 h 以及 int 类型的 i0 和 n 其中 i0 代表当前最小堆的一个父节点，n 代表当前最小堆的数组长度，在来看具体逻辑，L5：启用一个 for 循环，L6：计算出左子节点赋值给 j1，L7：判断左子节点是否大于等于当前数组的长度或者在 L6 的计算中是否存在溢出两者中有一方条件达成即退出循环，L10：运行到此处时说明 L7 的判断条件并没有成立，将左子节点记录下来赋值给 j，L11：计算出右子节点赋值给 j2，判断右子节点是否存在并且右子节点是否小于左子节点，是的话之前被记录下来的左子节点 j 从新赋值成右子节点，反之则继续执行接下来的语句不会对 j 进行任何操作，L14：判断之前记录下来的子节点 j 所存储的数值是否大于等于其父节点所存储的数值，是的话则直接退出循环，否的话父子节点数值交换且之前记录下来的子节点 j 变成父节点进行下一次循环，最后在返回一个 bool 值，bool 值为 true 时说明当前的父节点并不是之前传入的父节点了对此进行过操作，为 false 时说明没有对其进行操作。\",\"// src/container/heap/heap.go func down(h Interface, i0, n int) bool { i := i0 for { j1 := 2*i + 1 if j1 >= n || j1 < 0 { // j1 < 0 after int overflow break } j := j1 // left child if j2 := j1 + 1; j2 < n && h.Less(j2, j1) { j = j2 // = 2*i + 2 // right child } if !h.Less(j, i) { break } h.Swap(i, j) i = j } return i > i0 } \",\"Init() 方法，从函数名中我们也能猜到这是一个初始化的方法，具体过程也相对简单，要留心的是在 L9 中我们获取的是数组的长度，比我们的索引位要多 1 ，所以在 L10 计算节点的过程中我们可以理解为 (index + 1) / 2 - 1 该算式等价于 (index - 1) / 2，这么看来计算所得为最后一个节点的父节点，随后依次调用 down() 方法进行初始化操作。\",\"// src/sort/sort.go // Init establishes the heap invariants required by the other routines in this package. // Init is idempotent with respect to the heap invariants // and may be called whenever the heap invariants may have been invalidated. // The complexity is O(n) where n = h.Len(). func Init(h Interface) { // heapify n := h.Len() for i := n/2 - 1; i >= 0; i-- { down(h, i, n) } } \",\"push() 方法，从注解中我们也可以看到该方法将元素 x 推入堆中，随后调用 up() 方法从下到上依次校验，既是从下到上所以当我们定义 push() 函数添加元素时也只能在最后位置添加。\",\"// src/sort/sort.go // Push pushes the element x onto the heap. // The complexity is O(log n) where n = h.Len(). func Push(h Interface, x any) { h.Push(x) up(h, h.Len()-1) } \",\"Pop() 方法，从堆中删除并返回最小元素，首先计算出当前数组中最后一个元素所在节点位置即当前元素索引，随后调用 Swap() 方法将最后一个元素与堆顶元素交换，在调用 down() 方法对堆从上到下调整各节点位置使之保持最小堆属性，在使用我们定义 Pop 方法弹出并删除该元素。\",\"// src/sort/sort.go // Pop removes and returns the minimum element (according to Less) from the heap. // The complexity is O(log n) where n = h.Len(). // Pop is equivalent to Remove(h, 0). func Pop(h Interface) any { n := h.Len() - 1 h.Swap(0, n) down(h, 0, n) return h.Pop() } \",\"Remove() 方法，从堆中删除并返回索引为 i 的元素，该方法与 Pop() 方法类似，不过该方法可以指定元素，首先计算出当前数组中最后一个元素所在节点位置即当前元素索引，随后判断如果正是当前元素直接返回，不是就与最后一个元素进行交换并调用 down() 方法进行判断，还记得我们 down() 方法是有返回值的吗，它会判断自己有没有对节点进行操作，当我们判断 down() 方法没有进行操作时则说明目标位置在堆的最后一层，这时执行 up 操作向上层进行调整。\",\"// src/sort/sort.go // Remove removes and returns the element at index i from the heap. // The complexity is O(log n) where n = h.Len(). func Remove(h Interface, i int) any { n := h.Len() - 1 if n != i { h.Swap(i, n) if !down(h, i, n) { up(h, i) } } return h.Pop() } \",\"Fix() 方法，修复在索引 i 的元素更改其值后重新建立堆排序的问题，该函数与 Remove() 方法中的部分逻辑等效，在这里就不在从新介绍了。\",\"// src/sort/sort.go // Fix re-establishes the heap ordering after the element at index i has changed its value. // Changing the value of the element at index i and then calling Fix is equivalent to, // but less expensive than, calling Remove(h, i) followed by a Push of the new value. // The complexity is O(log n) where n = h.Len(). func Fix(h Interface, i int) { if !down(h, i, h.Len()) { up(h, i) } } \"]},\"39\":{\"c\":[\"Go\"]},\"40\":{\"c\":[\"Go\"]},\"41\":{\"h\":\"List\",\"t\":[\"今天给大家带来的是 Go 语言提供的内置容器 List，内部的实现原理是双链表，列表能够高效地进行任意位置的元素插入和删除操作。\"]},\"42\":{\"h\":\"List struct && Element struct\",\"t\":[\"老规矩我们先从数据结构中看起，从 code - 1 中我们可以看到 List 包中的数据结构一共有两个分别为 List 和 Element，通过这两个数据结构组成为 Go 语言提供的内置容器 List 结构，接下来就让我们去看一看这两个数据结构。\",\"List 数据结构，当前数据结构中包含 root 和 len 两个字段，从注解中我们可以了解到 root 为“哨兵”列表元素，不算在当前 List 链表元素中且结构体中 len 的长度属性中不记录 root 节点。\",\"Element 数据结构，当前数据结构中包含 next、prev、list 和 value 四个字段，Value 是与此元素一起存储的值这个不用多说，再来看 next 与 prev 为指针类型可以看出这是一个双向链表，再从注解中我们可以了解到 List 存在两种方法，分别为 Front() 方法代表当前 List 中第一个元素， Back() 方法代表当前 List 中最后一个元素，而 list 是一个始终指向当前 Element 所在 List 类型的指针。\",\"// src/container/list/list.go // List represents a doubly linked list. // The zero value for List is an empty list ready to use. type List struct { root Element // sentinel list element, only &root, root.prev, and root.next are used len int // current list length excluding (this) sentinel element } // Element is an element of a linked list. type Element struct { // Next and previous pointers in the doubly-linked list of elements. // To simplify the implementation, internally a list l is implemented // as a ring, such that &l.root is both the next element of the last // list element (l.Back()) and the previous element of the first list // element (l.Front()). next, prev *Element // The list to which this element belongs. list *List // The value stored with this element. Value any } \"]},\"43\":{\"h\":\"Next && Prev\",\"t\":[\"从刚刚的数据结构 code - 1 中我们已经发现 List 存在两种方法 Front() 方法与 Back() 方法，那在了解这两个方法之前，我们先来了解一下 Element 存在的两种方法 Next() 方法与 Prev() 方法，这可以帮助我们更好的理解接下来的方法。\",\"Next() 与 Prev() ，想必听名字大家都可以猜到这两个方法的作用，分别是去寻找当前元素的下一个或上一个元素，所以这两个方法的逻辑是一致的，唯一值得注意的是在 code - 2 中 if 语句中除了判断当前元素的下一个或上一个元素是否存在外还需要判断是否等于 root 元素，也就是我们刚刚提到的“哨兵”列表元素。\",\"// src/container/list/list.go // Next returns the next list element or nil. func (e *Element) Next() *Element { if p := e.next; e.list != nil && p != &e.list.root { return p } return nil } // Prev returns the previous list element or nil. func (e *Element) Prev() *Element { if p := e.prev; e.list != nil && p != &e.list.root { return p } return nil } \"]},\"44\":{\"h\":\"Front && Back\",\"t\":[\"接下来我们就来看看 Front() 方法与 Back() 方法，该方法的作用我们已经知道了，且因为这两个方法的逻辑是一致的，所以我们这里就不做区分，直接来来讲一下这两个方法的具体逻辑。\",\"Front() 方法与 Back() 方法，需要先调用 Len() 方法获取 List 的具体长度进行判断如果等于 0 那么说明当前 LIst 可能只存在 root “哨兵”列表元素，那么之前也说过 root 不算在 List 元素中，故不存在第一个或最后一个元素，直接返回 nil，反之长度不等于 0 说明 List 中有元素存在即返回 root “哨兵”列表元素中所指向的元素。\",\"// src/container/list/list.go // Len returns the number of elements of list l. // The complexity is O(1). func (l *List) Len() int { return l.len } // Front returns the first element of list l or nil if the list is empty. func (l *List) Front() *Element { if l.len == 0 { return nil } return l.root.next } // Back returns the last element of list l or nil if the list is empty. func (l *List) Back() *Element { if l.len == 0 { return nil } return l.root.prev } \",\"通过刚刚前几个方法 Next() 方法与 Prev() 方法、Front() 方法与 Back() 方法，我们已经可以拼凑出 Go 语言提供的内置容器 List 结构的大致样子了。\",\"通过 Element 结构体中 next、 prev 字段，我们可以知道这是一个双向链表。\",\"通过 Next() 方法与 Prev() 方法，我们可以知道 List 中元素的 next 和 prev 字段是可以指向 root “哨兵”列表元素的。\",\"通过 Front() 方法与 Back() 方法，我们可以知道 root “哨兵”列表元素的 next 和 prev 字段是指向 List 中的第一个和最后一个元素的。\",\"通过刚刚整理的信息我们已经可以清楚的得出 List 其实是一个循环链表如图 1 所示，只不过从中抽象出一个元素将它定义为 root 代表一个位置标符，其本身不存储数据，不记录在当前链表长度中，不认作链表中的元素。\"]},\"45\":{\"h\":\"New && Init\",\"t\":[\"通过刚刚的讲解想必大家已经对 List 有了一个清楚的认识，接下来我们开看看 New 函数是如何实现的，该函数的实现逻辑比较简单调用 Init() 方法返回了一个初始化的 List。\",\"Init() 方法，将当前所传入的 List 中的 root “哨兵”列表元素中的 next、 prev 字段都指向自己，从而实现一个闭环，并且之前也说过 root 不记录在当前链表长度中，所以长度赋值为 0，完成初始化操作。\",\"这里我们在来提及一下 lazyInit() 方法，因为在后面的方法中初始化操作使用的都是该方法，相比 Init() 方法我们可以发现该方法只是在 Init() 方法上套了一层 if 判断，还记得 code - 1 中所说的吗？List 的零值是一个可以使用的空列表，该方法只对 List 为零值状态时他才会进行 Init ，对于已经 Init 过的 List 则不会做任何操作。\",\"// src/container/list/list.go // New returns an initialized list. func New() *List { return new(List).Init() } // Init initializes or clears list l. func (l *List) Init() *List { l.root.next = &l.root l.root.prev = &l.root l.len = 0 return l } // lazyInit lazily initializes a zero List value. func (l *List) lazyInit() { if l.root.next == nil { l.Init() } } \"]},\"46\":{\"h\":\"insert && insertValue\",\"t\":[\"insert() 方法，传入两个元素 e 与 at，然后在 at 之后插入 e，在增加 List 的长度加 1 并且返回 e，具体操作如图 3 所示。\",\"insertValue() 方法，该方法就是 insert() 方法的封装，只不过把传入两个元素中的 e 换成了元素所要存储的值，而之前的 e 直接在函数方法中创建实例。\",\"值得思考的是这些这两个方法都是 List 上的方法，且方法名均为小写说明这两个方法并不包外提供，只对包内其他方法所提供，那么如果 at 不是 LIst 上的元素，那么我们可以很清楚的知道 List 的元素并没有增加但 List 的长度的确是增加了，那怎么做又是为的什么？我们可以带着这个疑问继续往下看。\",\"// src/container/list/list.go // insert inserts e after at, increments l.len, and returns e. func (l *List) insert(e, at *Element) *Element { e.prev = at e.next = at.next e.prev.next = e e.next.prev = e e.list = l l.len++ return e } // insertValue is a convenience wrapper for insert(&Element{Value: v}, at). func (l *List) insertValue(v any, at *Element) *Element { return l.insert(&Element{Value: v}, at) } \"]},\"47\":{\"h\":\"InsertBefore && InsertAfter\",\"t\":[\"InsertBefore() 方法与 InsertAfter() 方法，这两个方法的逻辑是一致的，一个是在当前元素之前插入一个值为 v 的新元素 e，并返回e，另一个则是在当前元素之后插入一个值为 v 的新元素 e，并返回 e，而且在这两个方法中的 if 语句中也解决了我们之前的疑问，如果所传入的 mark 元素不是 List 上的元素，则不修改 LIst。\",\"// src/container/list/list.go // InsertBefore inserts a new element e with value v immediately before mark and returns e. // If mark is not an element of l, the list is not modified. // The mark must not be nil. func (l *List) InsertBefore(v any, mark *Element) *Element { if mark.list != l { return nil } // see comment in List.Remove about initialization of l return l.insertValue(v, mark.prev) } // InsertAfter inserts a new element e with value v immediately after mark and returns e. // If mark is not an element of l, the list is not modified. // The mark must not be nil. func (l *List) InsertAfter(v any, mark *Element) *Element { if mark.list != l { return nil } // see comment in List.Remove about initialization of l return l.insertValue(v, mark) } \"]},\"48\":{\"h\":\"PushFront && PushBack\",\"t\":[\"PushFront() 方法与 PushBack() 方法，这两个方法的逻辑也是一致的，一个是在 List l 的前面插入一个值为 v 的新元素 e，并返回 e，另一个则是在 List l 的后面插入一个值为 v 的新元素 e，并返回 e，但在元素添加之前需要先调用 lazyInit() 方法，进行判断当前 List 是否为一个空列表，是的话先进行初始化操作在添加元素。\",\"在 PushFront() 方法与 PushBack() 方法中我们可以看到 List 中的 root “哨兵”列表元素所展现的作用了，通过 root 元素我们可以很轻松的定位到 List 中的第一个元素和最后一个元素。\",\"// src/container/list/list.go // PushFront inserts a new element e with value v at the front of list l and returns e. func (l *List) PushFront(v any) *Element { l.lazyInit() return l.insertValue(v, &l.root) } // PushBack inserts a new element e with value v at the back of list l and returns e. func (l *List) PushBack(v any) *Element { l.lazyInit() return l.insertValue(v, l.root.prev) } \"]},\"49\":{\"h\":\"PushBackList && PushFrontList\",\"t\":[\"PushBackList() 方法与 PushFrontList() 方法，这两个方法的逻辑与刚刚看到的 PushFront() 方法与 PushBack() 方法大致是一致的，只过是刚刚所看到的方式是插入一个元素，而现在这两个方式是通过对其传入的 LIst 进行遍历其中的元素依次调用 PushFront() 方法与 PushBack() 方法。\",\"// src/container/list/list.go // PushBackList inserts a copy of another list at the back of list l. // The lists l and other may be the same. They must not be nil. func (l *List) PushBackList(other *List) { l.lazyInit() for i, e := other.Len(), other.Front(); i > 0; i, e = i-1, e.Next() { l.insertValue(e.Value, l.root.prev) } } // PushFrontList inserts a copy of another list at the front of list l. // The lists l and other may be the same. They must not be nil. func (l *List) PushFrontList(other *List) { l.lazyInit() for i, e := other.Len(), other.Back(); i > 0; i, e = i-1, e.Prev() { l.insertValue(e.Value, &l.root) } } \",\"好了今天先带大家看到这里，下一章节带大家了解一下 Go 语言提供的内置容器 List 中的移动和删除操作，下面是一些测试代码 code - 9、code - 10，大家可以自行查看帮助理解。\"]},\"50\":{\"h\":\"Testing\",\"t\":[\"package main import ( \\\"container/list\\\" \\\"fmt\\\" ) func main() { list := list.New() fmt.Printf(\\\"list: (%p)%#v\\\\n\\\", list, list) } // list: (0xc000066150) // &list.List{ // root:list.Element{ // next:(*list.Element)(0xc000066150), // prev:(*list.Element)(0xc000066150), // list:(*list.List)(nil), Value:interface {}(nil) // }, // len:0 // } \",\"package main import ( \\\"container/list\\\" \\\"fmt\\\" ) func main() { list := list.New() list.PushBack(1) list.PushBack(2) list.PushBack(3) fmt.Printf(\\\"list: (%p)%#v\\\\n\\\", list, list) fmt.Printf(\\\"list.Front(): (%p)%#v\\\\n\\\", list.Front(), list.Front()) fmt.Printf(\\\"list.Front().Next(): (%p)%#v\\\\n\\\", list.Front().Next(), list.Front().Next()) fmt.Printf(\\\"list.Front().Next().Next(): (%p)%#v\\\\n\\\", list.Front().Next().Next(), list.Front().Next().Next()) } // list: (0xc00008c150) // &list.List{ // root:list.Element{ // next:(*list.Element)(0xc00008c180), // prev:(*list.Element)(0xc00008c1e0), // list:(*list.List)(nil), Value:interface {}(nil) // }, // len:3 // } // list.Front(): (0xc00008c180) // &list.Element{ // next:(*list.Element)(0xc00008c1b0), // prev:(*list.Element)(0xc00008c150), // list:(*list.List)(0xc00008c150), // Value:1 // } // list.Front().Next(): (0xc00008c1b0) // &list.Element{ // next:(*list.Element)(0xc00008c1e0), // prev:(*list.Element)(0xc00008c180), // list:(*list.List)(0xc00008c150), // Value:2 // } // list.Front().Next().Next(): (0xc00008c1e0) // &list.Element{ // next:(*list.Element)(0xc00008c150), // prev:(*list.Element)(0xc00008c1b0), // list:(*list.List)(0xc00008c150), // Value:3 // } \"]},\"51\":{\"c\":[\"Go\"]},\"52\":{\"c\":[\"Go\"]},\"53\":{\"h\":\"Ring\",\"t\":[\"今天给大家带来的是 Go 语言提供的内置容器 Ring，简单理解 Ring 就是一个双向循环链表，但 Ring 并没有表头与表尾的概念，Ring 的表头与表尾相连，构成一个环。\"]},\"54\":{\"h\":\"Ring 数据结构\",\"t\":[\"老规矩我们先来了解一下 Ring 的数据结构，从 code - 1 中我们可以看到 Ring 的数据结构分别由两个指针 next、prev 和用于存储数据的 value 组成，首先从指针的命名中我们也可以得出是指向下一个或上一个 Ring 类型，简单思考一下，如图 1 通过这种数据结构我们可以创建一个环状的数据结构，有点像循环队列。\",\"// src/container/ring/ring.go // A Ring is an element of a circular list, or ring. // Rings do not have a beginning or end; a pointer to any ring element // serves as reference to the entire ring. Empty rings are represented // as nil Ring pointers. The zero value for a Ring is a one-element // ring with a nil Value. type Ring struct { next, prev *Ring Value any // for use by client; untouched by this library } \"]},\"55\":{\"h\":\"New\",\"t\":[\"数据结构我们看完了，那么首先来看的肯定就是我们 New() 函数了，从注解中我们可以了解到 New() 函数是创建一个包含 n 个元素的 Ring，下面我们来看看该方法是如何创建的吧，从 code - 2 所示该方法接收一个 int 类型的 n 返回一个 Ring 类型的 pointer，并且创建开始之前会判断 n 是不是小于 0，小于则直接返回空，那么从这里我们就可以知道 Ring 类型至少要有一个元素，随后就是生成一个 Ring 结构体实例，再声明一个变量让其等于刚刚声明的结构体，为的是要保留一下当前地址，随后就是运用 for 循环向后面添加 Ring 的数据结构，最后再首尾相连，最后我们可以发现 new() 函数只是创建出了数据结构，并没有对值做初始化操作。\",\"// src/container/ring/ring.go // New creates a ring of n elements. func New(n int) *Ring { if n <= 0 { return nil } r := new(Ring) p := r for i := 1; i < n; i++ { p.next = &Ring{prev: p} p = p.next } p.next = r r.prev = p return r } \"]},\"56\":{\"h\":\"init\",\"t\":[\"init() 方法，从函数名中我们可以猜到它是用来初始化操作的，那么作为本包中唯一一个没有被导出的方法，我们需要留意一下该方法在 Next()、Prev() 和 Move() 方法中被调用，随后我们会先对这三个方法做探讨，接下来先看看 init() 方法它进行哪些操作 code - 3，init() 方法接收 Ring 结构体的指针，并将结构体中 next 与 prev 属性指向了其自身，从而构成了一个单元素循环的链表简称环。\",\"// src/container/ring/ring.go func (r *Ring) init() *Ring { r.next = r r.prev = r return r } \"]},\"57\":{\"h\":\"Next && Prev\",\"t\":[\"Next() 方法与 Prev() 方法，这两个方法逻辑是一致的都是返回下一个或者上一个环元素，R 不能为空，值得注意的就是在工作期间会去检查下一个或者上一个环元素是否为空，空就直接调用 init() 方法，但我们要知道的是在 New() 方法中就已经保障的 Ring 为一个闭环的数据结构，所以在何种情况下会触发该条件是值得我们深思的。\",\"// src/container/ring/ring.go // Next returns the next ring element. r must not be empty. func (r *Ring) Next() *Ring { if r.next == nil { return r.init() } return r.next } // Prev returns the previous ring element. r must not be empty. func (r *Ring) Prev() *Ring { if r.next == nil { return r.init() } return r.prev } \"]},\"58\":{\"h\":\"Move\",\"t\":[\"Move() 方法，这个方法与我们刚刚了解的 Next() 方法与 Prev() 方法其实相差不大，简单的说就是把单步操作编变成了多步操作，该函数的具体逻辑就是通过 n 来代表你要查询的几步，再通过 n 的正负值来选择查询的方向。\",\"// src/container/ring/ring.go // Move moves n % r.Len() elements backward (n < 0) or forward (n >= 0) // in the ring and returns that ring element. r must not be empty. func (r *Ring) Move(n int) *Ring { if r.next == nil { return r.init() } switch { case n < 0: for ; n < 0; n++ { r = r.prev } case n > 0: for ; n > 0; n-- { r = r.next } } return r } \"]},\"59\":{\"h\":\"Link\",\"t\":[\"Link() 方法，从函数名中我们可以看出这是将两个 Ring 连接成一个新的 Ring 方法，将 Ring r 与 Ring s 连接起来，再将 r.next 与 s.prev 相连，从而形成一个闭环，最后再返回 r.next 元素。 但如果 r 和 s 指向同一个环，把它们连起来会使 r 和 s 之间的元素从环上消失。被删除的元素构成一个子环，其返回结果是对该子环上元素的引用（如果没有元素被删除，结果仍然是 r.next() 的原始值，而不是nil)。\",\"// src/container/ring/ring.go // Link connects ring r with ring s such that r.Next() // becomes s and returns the original value for r.Next(). // r must not be empty. // // If r and s point to the same ring, linking // them removes the elements between r and s from the ring. // The removed elements form a subring and the result is a // reference to that subring (if no elements were removed, // the result is still the original value for r.Next(), // and not nil). // // If r and s point to different rings, linking // them creates a single ring with the elements of s inserted // after r. The result points to the element following the // last element of s after insertion. func (r *Ring) Link(s *Ring) *Ring { n := r.Next() if s != nil { p := s.Prev() // Note: Cannot use multiple assignment because // evaluation order of LHS is not specified. r.next = s s.prev = r n.prev = p p.next = n } return n } \"]},\"60\":{\"h\":\"Unlike\",\"t\":[\"Unlike() 方法，从 code - 7 中我们可以发现该方法只是对 Link() 与 Move() 方法的调用，那我们大致就可以了解该方法其实是对 Link() 方法的扩展，还记得之前我们提到过的当 Link() 方法中 r 和 s 指向同一个环时会被分成两个环，所以我们先通过 Move() 方法移动当前 Ring 的元素位置，在进行 Link() 方法来实现移除操作，最后再返回子环，其本质就是在同一个环上两个不同元素位置的 Link() 方法操作。\",\"// src/container/ring/ring.go // Unlink removes n % r.Len() elements from the ring r, starting // at r.Next(). If n % r.Len() == 0, r remains unchanged. // The result is the removed subring. r must not be empty. func (r *Ring) Unlink(n int) *Ring { if n <= 0 { return nil } return r.Link(r.Move(n + 1)) } \"]},\"61\":{\"h\":\"Len\",\"t\":[\"Len() 方法，该方法就相对简单许多，通过便利 Ring 得出当前元素数量，其具体逻辑为声明一个 n 用来计数操作，通过 Next() 方法便利下一个元素并进行判断是否为起始元素，是的话停止便利返回 n 即为当前元素数量。\",\"// src/container/ring/ring.go // Len computes the number of elements in ring r. // It executes in time proportional to the number of elements. func (r *Ring) Len() int { n := 0 if r != nil { n = 1 for p := r.Next(); p != r; p = p.next { n++ } } return n } \"]},\"62\":{\"h\":\"Do\",\"t\":[\"Do() 方法，该方法与 Len() 方法基本一致，都是通过 Next() 方法进行遍历元素，只不过该方法接收一个函数，并在内部对每个元素调用所传入的函数用以来完成某些任务。\",\"// src/container/ring/ring.go // Do calls function f on each element of the ring, in forward order. // The behavior of Do is undefined if f changes *r. func (r *Ring) Do(f func(any)) { if r != nil { f(r.Value) for p := r.Next(); p != r; p = p.next { f(p.Value) } } } \",\"到这为止我们已经把 Ring 包里的方法全部阅读一遍了，对此我们应该对此包的方法做一个简单的梳理如图 9 所示，这是 Ring 包中每个方法之间的调用关系，并且我们可以发现 Len() 方法与 Do() 方法， Unlink() 方法与 Link() 方法， Next() 方法与 Prev() 方法的实现逻辑基本是一样的。\"]},\"63\":{\"h\":\"Testing\",\"t\":[\"在结尾的最后，我们放上一些测试代码，供大家理解，在此就不做过多解释了。\",\"package main import ( \\\"container/ring\\\" \\\"fmt\\\" \\\"reflect\\\" ) func dump(r *ring.Ring) { if r == nil { fmt.Println(\\\"empty\\\") return } i, n := 0, r.Len() for p := r; i < n; p = p.Next() { fmt.Printf(\\\"%4d: %p = {<- %p | %p ->}\\\\n\\\", i, p, p.Prev(), p.Next()) i++ } fmt.Println() } func main() { r := ring.New(6) fmt.Printf(\\\"TYpeof(r) = %T\\\\n\\\", reflect.TypeOf(r)) dump(r) r.Value = 0 r.Next().Value = false r.Next().Next().Value = 1.23 r.Next().Next().Next().Value = \\\"hello \\\\\\\"world\\\" r.Next().Next().Next().Next().Value = [4]int{ 0, 1, 2, 3 } r.Next().Next().Next().Next().Next().Value = ring.New(2) for i := 0; i < r.Len(); i++ { fmt.Println(r.Value) r = r.Next() } } // TYpeof(r) = *reflect.rtype // 0: 0xc000050020 = {<- 0xc0000500c0 | 0xc000050040 ->} // 1: 0xc000050040 = {<- 0xc000050020 | 0xc000050060 ->} // 2: 0xc000050060 = {<- 0xc000050040 | 0xc000050080 ->} // 3: 0xc000050080 = {<- 0xc000050060 | 0xc0000500a0 ->} // 4: 0xc0000500a0 = {<- 0xc000050080 | 0xc0000500c0 ->} // 5: 0xc0000500c0 = {<- 0xc0000500a0 | 0xc000050020 ->} // 0 // false // 1.23 // hello \\\"world // [0 1 2 3] // &{0xc000050100 0xc000050100 <nil>} \"]},\"64\":{\"c\":[\"Go\"]},\"65\":{\"c\":[\"Go\"]},\"66\":{\"h\":\"Slice\",\"t\":[\"在上一篇中我们简单的了解了 slice ，在这一篇中我们将继续深入了解一下。\"]},\"67\":{\"h\":\"Slice 数据结构\",\"t\":[\"首先我们先来看一下 Slice 的数据结构，从 code - 1** **中我们可以看到 Slice 是由 3 部分构成，首先第一是名为 unsafe.Pointer（通用指针类型） 类型的 array，从命名中我们可以得知它是一个指向 Array 的指针，其余两个皆为 int 类型分别为 len 和 cap 分别代表 Slice 当前的长度，另一个代表 Slice 当前的容量。\",\"type slice struct { array unsafe.Pointer len int cap int } \",\"array unsafe.Pointer 类型，用于指向不同类型的 Array。\",\"len int 类型，用于表示当前 Slice 的长度，即当前元素的个数。\",\"cap int 类型，用于表示当前 Slice 的容量，即当前指针指向底层数组元素为起始位向后的总元素数量。\"]},\"68\":{\"h\":\"Example\",\"t\":[\"通过刚才数据结构 code - 1 中，想必我们已经对 Slice 有了一个更清楚的认知，Slice 本身并不是动态 Array，它更像是对 Array 的又一层封装，通过它内部实现的数据结构对底层 Array 的引用并将数据读写限定在指定区域内，其 Slice 本身只是一个只读对象。 既然 Slice 只是对底层 Array 的一个引用，那么通过 code - 2 中我们可以发现，一个 Array 可以被多个 slice 所引用，并且修改 Slice 上的元素其本质上也就是在修改所引用的底层 Array 中的元素，在此我们可以发现 Slice 是一个引用类型。\",\"package main import ( \\\"fmt\\\" ) func revise(s []int, i int, v int) { s[i] = v } func main() { arrayA := [10]int{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 } fmt.Printf(\\\"arrayA ---> %d\\\\n\\\", arrayA) fmt.Printf(\\\"address(arrayA) = %p\\\\n\\\", &arrayA) fmt.Printf(\\\"len(arrayA) = %d cap(arrayA) = %d\\\\n\\\", len(arrayA), cap(arrayA)) fmt.Printf(\\\"\\\\n\\\") sliceA := arrayA[4:8] fmt.Printf(\\\"sliceA ---> %d\\\\n\\\", sliceA) fmt.Printf(\\\"address(sliceA) = %p\\\\n\\\", &sliceA) fmt.Printf(\\\"len(sliceA) = %d cap(sliceA) = %d\\\\n\\\", len(sliceA), cap(sliceA)) fmt.Printf(\\\"\\\\n\\\") sliceB := arrayA[2:6] fmt.Printf(\\\"sliceB ---> %d\\\\n\\\", sliceB) fmt.Printf(\\\"address(sliceB) = %p\\\\n\\\", &sliceB) fmt.Printf(\\\"len(sliceB) = %d cap(sliceB) = %d\\\\n\\\", len(sliceB), cap(sliceB)) revise(sliceB, 3, 0) fmt.Printf(\\\"\\\\n\\\") fmt.Printf(\\\"sliceA ---> %d\\\\n\\\", sliceA) fmt.Printf(\\\"address(sliceA) = %p\\\\n\\\", &sliceA) fmt.Printf(\\\"len(sliceA) = %d cap(sliceA) = %d\\\\n\\\", len(sliceA), cap(sliceA)) fmt.Printf(\\\"\\\\n\\\") fmt.Printf(\\\"sliceB ---> %d\\\\n\\\", sliceB) fmt.Printf(\\\"address(sliceB) = %p\\\\n\\\", &sliceB) fmt.Printf(\\\"len(sliceB) = %d cap(sliceB) = %d\\\\n\\\", len(sliceB), cap(sliceB)) } // arrayA ---> [0 1 2 3 4 5 6 7 8 9] // address(arrayA) = 0xc000072000 // len(arrayA) = 10 cap(arrayA) = 10 // sliceA ---> [4 5 6 7] // address(sliceA) = 0xc000010030 // len(sliceA) = 4 cap(sliceA) = 6 // sliceB ---> [2 3 4 5] // address(sliceB) = 0xc000010060 // len(sliceB) = 4 cap(sliceB) = 8 // sliceA ---> [4 0 6 7] // address(sliceA) = 0xc000010030 // len(sliceA) = 4 cap(sliceA) = 6 // sliceB ---> [2 3 4 0] // address(sliceB) = 0xc000010060 // len(sliceB) = 4 cap(sliceB) = 8 \"]},\"69\":{\"h\":\"Make\",\"t\":[\"Slice 的声明方式有很多，但都是字面量上的不同，下面我们从源代码 code - 3 中看看 make 函数的是如何做的，在此期间我们先来关注一下 len 与 cap 之间的关系，在 L3 中我们看到如果 len > cap 会直接报出 Panic，为此我们可以推断出 len 与 cap 之间的关系始终保持在 0 < len <= cap 。\",\"func makeslice(et *_type, len, cap int) unsafe.Pointer { mem, overflow := math.MulUintptr(et.size, uintptr(cap)) if overflow || mem > maxAlloc || len < 0 || len > cap { // NOTE: Produce a 'len out of range' error instead of a // 'cap out of range' error when someone does make([]T, bignumber). // 'cap out of range' is true too, but since the cap is only being // supplied implicitly, saying len is clearer. // See golang.org/issue/4085. mem, overflow := math.MulUintptr(et.size, uintptr(len)) if overflow || mem > maxAlloc || len < 0 { panicmakeslicelen() } panicmakeslicecap() } return mallocgc(mem, et, true) } \",\"0 < len <= cap\",\"type.size 与 cap 的乘积不能越界，并且要小于 maxAlloc（允许用户分配的最大虚拟内存空间）\",\"type.size 与 len 的乘积不能越界，并且要小于 maxAlloc。\"]},\"70\":{\"h\":\"Append\",\"t\":[\"Append 函数是向 Slice 尾部添加元素，返回新的 slice 对象，但如果此时 Slice 的 cap 值小于当前 len 加上 append 中传入值的数量，就会调用 runtime.growslice 函数进行扩容，下面就让我们来深入了解一下函数 runtime.growslice 是如何对 Slice 进行扩容的。 首先我们先来看看扩容规则，其中 et 代表 slice 中的元素类型，old 是扩容前的切片，cap 是期望容量，也就是扩容后至少需要的最小容量，即 old.cap + 本次新增的元素数量。\",\"func growslice(et *_type, old slice, cap int) slice { ... newcap := old.cap doublecap := newcap + newcap if cap > doublecap { newcap = cap } else { const threshold = 256 if old.cap < threshold { newcap = doublecap } else { // Check 0 < newcap to detect overflow // and prevent an infinite loop. for 0 < newcap && newcap < cap { // Transition from growing 2x for small slices // to growing 1.25x for large slices. This formula // gives a smooth-ish transition between the two. newcap += (newcap + 3*threshold) / 4 } // Set newcap to the requested cap when // the newcap calculation overflowed. if newcap <= 0 { newcap = cap } } } ... } \",\"当前期望容量 > 2 倍扩容前 Slice 容量 。 \",\"新容量 = 当前期望容量。\",\"当前期望容量 < 2 倍扩容前 Slice 容量 && 扩容前 Slice 容量 > 256。 \",\"新容量 = 2 倍扩容前 Slice 容量。\",\"当前期望容量 < 2 倍扩容前 Slice 容量 && 扩容前 Slice 容量 < 256。 \",\"新容量会从 2 倍扩容前 Slice 容量平滑的过渡到 1.25 倍扩容前 Slice 容量。\",\"其次就是内存字节对齐，通过刚刚的扩容规则中 code - 4 中我们已经大致了解了各种情况中所要扩容的大小，但那并不是最终所要扩容的容量还会进行接下来的计算。\",\"func growslice(et *_type, old slice, cap int) slice { ... switch { case et.size == 1: lenmem = uintptr(old.len) newlenmem = uintptr(cap) capmem = roundupsize(uintptr(newcap)) overflow = uintptr(newcap) > maxAlloc newcap = int(capmem) case et.size == goarch.PtrSize: lenmem = uintptr(old.len) * goarch.PtrSize newlenmem = uintptr(cap) * goarch.PtrSize capmem = roundupsize(uintptr(newcap) * goarch.PtrSize) overflow = uintptr(newcap) > maxAlloc/goarch.PtrSize newcap = int(capmem / goarch.PtrSize) case isPowerOfTwo(et.size): var shift uintptr if goarch.PtrSize == 8 { // Mask shift for better code generation. shift = uintptr(sys.Ctz64(uint64(et.size))) & 63 } else { shift = uintptr(sys.Ctz32(uint32(et.size))) & 31 } lenmem = uintptr(old.len) << shift newlenmem = uintptr(cap) << shift capmem = roundupsize(uintptr(newcap) << shift) overflow = uintptr(newcap) > (maxAlloc >> shift) newcap = int(capmem >> shift) default: lenmem = uintptr(old.len) * et.size newlenmem = uintptr(cap) * et.size capmem, overflow = math.MulUintptr(et.size, uintptr(newcap)) capmem = roundupsize(capmem) newcap = int(capmem / et.size) } ... } \"]},\"71\":{\"c\":[\"Go\"]},\"72\":{\"c\":[\"Go\"]},\"73\":{\"h\":\"Sort\",\"t\":[\"本周给大家带来的是 Go 语言标准库中的 sort 包， 该包提供了对切片和用户定义的集合进行排序的操作。\"]},\"74\":{\"h\":\"Introduce\",\"t\":[\"在本篇文章开始之前，我们需要先对 sort 包中的内容要有一个大致的了解，这对于我们接下来的学习有很大的帮助，如图 1 所示画出一个大概的关系图，要知道 sort 包并不只是有排序功能的。\"]},\"75\":{\"h\":\"Data Type\",\"t\":[\"首先我们先从 sort 中的数据类型看起，在刚刚所看的图 1 中我们可以看到 sort 包中，共定义了四种数据类型，其中有三种是我们一般情况下经常会用到的数据类型，Go 语言的开发者们已经为我们写好了所需要的方法，而除去这三种基础类型后，还提供了一个接口类型，我们只需要在我们定义的数据类型中实现了接口中的三个方法就可以完成排序操作。\"]},\"76\":{\"h\":\"Interface\",\"t\":[\"老规矩先从 interface 的定义开始看起，从 code - 1 中我们可以看到在该 interface 中定义了三个方法，Len() 方法从注解中我们可以知道 Len 是集合中元素的个数，Less() 方法是对于集合中位于 i 位置的元素与位于 j 位置的元素做比较,位于 j 位置的元素大则返回 true 反之返回 false，Swap() 方法是对于集合中位于 i 位置的元素与位于 j 位置的元素进行交换操作。\",\"那么从当前 interface 里的方法定义中我们可以知道，这些都是排序过程中经常会用到的操作，但对于不同的数据类型，这三个方法在定义中都会有略微的不同，更何况加上用户定义的数据类型，此时就展现了 interface 所带来的便利，sort 包的实现者无需知道要排序的数据类型是什么，只要按照当前所制定好的“协议”对当前所要排序类型实现了这三个方法，那么通过调用这三种方法就可进行排序操作。\",\"// In go1.19.2/src/sort/sort.go starting as line 14. type Interface interface { // Len is the number of elements in the collection. Len() int // Less reports whether the element with index i // must sort before the element with index j. // // If both Less(i, j) and Less(j, i) are false, // then the elements at index i and j are considered equal. // Sort may place equal elements in any order in the final result, // while Stable preserves the original input order of equal elements. // // Less must describe a transitive ordering: // - if both Less(i, j) and Less(j, k) are true, then Less(i, k) must be true as well. // - if both Less(i, j) and Less(j, k) are false, then Less(i, k) must be false as well. // // Note that floating-point comparison (the < operator on float32 or float64 values) // is not a transitive ordering when not-a-number (NaN) values are involved. // See Float64Slice.Less for a correct implementation for floating-point values. Less(i, j int) bool // Swap swaps the elements with indexes i and j. Swap(i, j int) } \"]},\"77\":{\"h\":\"Int && Float64 && String\",\"t\":[\"接下来就到了我们之前所说的三个基础的数据类型，我们从 code - 2 ～ 4 中可以看到这三种基础类型也是去实现了我们 code - 1 中的 interface 里的方法，并没有去单独实现。\",\"// In go1.19.2/src/sort/sort.go starting as line 112. // IntSlice attaches the methods of Interface to []int, sorting in increasing order. type IntSlice []int func (x IntSlice) Len() int { return len(x) } func (x IntSlice) Less(i, j int) bool { return x[i] < x[j] } func (x IntSlice) Swap(i, j int) { x[i], x[j] = x[j], x[i] } // Sort is a convenience method: x.Sort() calls Sort(x). func (x IntSlice) Sort() { Sort(x) } \",\"// In go1.19.2/src/sort/sort.go starting as line 123. // Float64Slice implements Interface for a []float64, sorting in increasing order, // with not-a-number (NaN) values ordered before other values. type Float64Slice []float64 func (x Float64Slice) Len() int { return len(x) } // Less reports whether x[i] should be ordered before x[j], as required by the sort Interface. // Note that floating-point comparison by itself is not a transitive relation: it does not // report a consistent ordering for not-a-number (NaN) values. // This implementation of Less places NaN values before any others, by using: // // x[i] < x[j] || (math.IsNaN(x[i]) && !math.IsNaN(x[j])) func (x Float64Slice) Less(i, j int) bool { return x[i] < x[j] || (isNaN(x[i]) && !isNaN(x[j])) } func (x Float64Slice) Swap(i, j int) { x[i], x[j] = x[j], x[i] } // isNaN is a copy of math.IsNaN to avoid a dependency on the math package. func isNaN(f float64) bool { return f != f } // Sort is a convenience method: x.Sort() calls Sort(x). func (x Float64Slice) Sort() { Sort(x) } \",\"// In go1.19.2/src/sort/sort.go starting as line 145. // StringSlice attaches the methods of Interface to []string, sorting in increasing order. type StringSlice []string func (x StringSlice) Len() int { return len(x) } func (x StringSlice) Less(i, j int) bool { return x[i] < x[j] } func (x StringSlice) Swap(i, j int) { x[i], x[j] = x[j], x[i] } // Sort is a convenience method: x.Sort() calls Sort(x). func (x StringSlice) Sort() { Sort(x) } \"]},\"78\":{\"h\":\"Functions\",\"t\":[\"那么数据类型我们看看完了，接下来我们需要了解的就是当前 sort 包中都提供了什么方法，以及这些方法是如何实现的。\"]},\"79\":{\"h\":\"Sort\",\"t\":[\"第一个要看的方法那一定就是我们的 Sort 方法了，Sort 方法的实现如下图所示，传入一个满足 interface 接口的实例，通过接口方法 Len 获取到当前数据的长度，在通过调用 bits 包中 Len 方法获取到当前存储数据长度的最小位数，执行 pdqsort 方法完成排序。\",\"// In go1.19.2/src/sort/sort.go starting as line 42. func Sort(data Interface) { n := data.Len() if n <= 1 { return } limit := bits.Len(uint(n)) pdqsort(data, 0, n, limit) } \",\"接下来我们看一下 pdqsort 方法的代码实现，如 code - 6 所示，希望大家理解在教科书上出现的排序方法仅仅是为了理解排序问题而做出的课程安排，现实中的排序算法要复杂很多。\",\"在 pdqsort 方法中我们可以看到，该方法中一共包含了三种排序算法，分别为插入排序、堆排序、快速排序，首先我们先忽略细节，看一下 pdqsort 方法的大体实现逻辑，当我们的数据结构长度小于 12 时直接调用插入排序，每进行一次递归我们的 limit 都会减 1，当 limit 等于 0 也就是递归执行次数消耗完毕时调用堆排序。\",\"// In go1.19.2/src/sort/zsortinterface.go starting as line 61. // pdqsort sorts data[a:b]. // The algorithm based on pattern-defeating quicksort(pdqsort), but without the optimizations from BlockQuicksort. // pdqsort paper: https://arxiv.org/pdf/2106.05123.pdf // C++ implementation: https://github.com/orlp/pdqsort // Rust implementation: https://docs.rs/pdqsort/latest/pdqsort/ // limit is the number of allowed bad (very unbalanced) pivots before falling back to heapsort. func pdqsort(data Interface, a, b, limit int) { const maxInsertion = 12 var ( wasBalanced = true // whether the last partitioning was reasonably balanced wasPartitioned = true // whether the slice was already partitioned ) for { length := b - a if length <= maxInsertion { insertionSort(data, a, b) return } // Fall back to heapsort if too many bad choices were made. if limit == 0 { heapSort(data, a, b) return } // If the last partitioning was imbalanced, we need to breaking patterns. if !wasBalanced { breakPatterns(data, a, b) limit-- } pivot, hint := choosePivot(data, a, b) if hint == decreasingHint { reverseRange(data, a, b) // The chosen pivot was pivot-a elements after the start of the array. // After reversing it is pivot-a elements before the end of the array. // The idea came from Rust's implementation. pivot = (b - 1) - (pivot - a) hint = increasingHint } // The slice is likely already sorted. if wasBalanced && wasPartitioned && hint == increasingHint { if partialInsertionSort(data, a, b) { return } } // Probably the slice contains many duplicate elements, partition the slice into // elements equal to and elements greater than the pivot. if a > 0 && !data.Less(a-1, pivot) { mid := partitionEqual(data, a, b, pivot) a = mid continue } mid, alreadyPartitioned := partition(data, a, b, pivot) wasPartitioned = alreadyPartitioned leftLen, rightLen := mid-a, b-mid balanceThreshold := length / 8 if leftLen < rightLen { wasBalanced = leftLen >= balanceThreshold pdqsort(data, a, mid, limit) a = mid + 1 } else { wasBalanced = rightLen >= balanceThreshold pdqsort(data, mid+1, b, limit) b = mid } } } \"]},\"80\":{\"h\":\"insertionSort\",\"t\":[\"插入排序相对来说大家都很了解，具体逻辑如图 2 所示，以数据结构索引位 1 开始向前一个元素进行比较，当 Less 方法返回 false 时进行元素交换，以此类推。\",\"// In go1.19.2/src/sort/zsortinterface.go starting as line 10. // insertionSort sorts data[a:b] using insertion sort. func insertionSort(data Interface, a, b int) { for i := a + 1; i < b; i++ { for j := i; j > a && data.Less(j, j-1); j-- { data.Swap(j, j-1) } } } \"]},\"81\":{\"h\":\"heapSort\",\"t\":[\"// In go1.19.2/src/sort/zsortinterface.go starting as line 38. func heapSort(data Interface, a, b int) { first := a lo := 0 hi := b - a // Build heap with greatest element at top. for i := (hi - 1) / 2; i >= 0; i-- { siftDown(data, i, hi, first) } // Pop elements, largest first, into end of data. for i := hi - 1; i >= 0; i-- { data.Swap(first, first+i) siftDown(data, lo, i, first) } } \",\"// In go1.19.2/src/sort/zsortinterface.go starting as line 20. // siftDown implements the heap property on data[lo:hi]. // first is an offset into the array where the root of the heap lies. func siftDown(data Interface, lo, hi, first int) { root := lo for { child := 2*root + 1 if child >= hi { break } if child+1 < hi && data.Less(first+child, first+child+1) { child++ } if !data.Less(first+root, first+child) { return } data.Swap(first+root, first+child) root = child } } \"]},\"82\":{\"h\":\"Find && Search\",\"t\":[\"Find 与 Search 方法实现逻辑基本一致，都是使用了二分查找算法，具体逻辑如图 5 所示。\",\"// In go1.19.2/src/sort/search.go starting as line 99. func Find(n int, cmp func(int) int) (i int, found bool) { // The invariants here are similar to the ones in Search. // Define cmp(-1) > 0 and cmp(n) <= 0 // Invariant: cmp(i-1) > 0, cmp(j) <= 0 i, j := 0, n for i < j { h := int(uint(i+j) >> 1) // avoid overflow when computing h // i ≤ h < j if cmp(h) > 0 { i = h + 1 // preserves cmp(i-1) > 0 } else { j = h // preserves cmp(j) <= 0 } } // i == j, cmp(i-1) > 0 and cmp(j) <= 0 return i, i < n && cmp(i) == 0 } \",\"// In go1.19.2/src/sort/search.go starting as line 58. func Search(n int, f func(int) bool) int { // Define f(-1) == false and f(n) == true. // Invariant: f(i-1) == false, f(j) == true. i, j := 0, n for i < j { h := int(uint(i+j) >> 1) // avoid overflow when computing h // i ≤ h < j if !f(h) { i = h + 1 // preserves f(i-1) == false } else { j = h // preserves f(j) == true } } // i == j, f(i-1) == false, and f(j) (= f(i)) == true => answer is i. return i } \"]},\"83\":{\"h\":\"IsSorted\",\"t\":[\"IsSorted 方法用来检查我们的数据是否进行过排序，其实现逻辑也很简单，我们通过接口方法 Len 获取到数据结构的长度，通过当前数据长度定位到数据结构中的倒数第一个与倒数第二个元素，并对其进行比较以此类推，如果后一位元素始终大于前一位元素，那么判定当前数据已排序。\",\"// In go1.19.2/src/sort/sort.go, starting as line 98. // IsSorted reports whether data is sorted. func IsSorted(data Interface) bool { n := data.Len() for i := n - 1; i > 0; i-- { if data.Less(i, i-1) { return false } } return true } \"]},\"84\":{\"h\":\"Slice && SliceStable\",\"t\":[\"Slice 方法只需要提供给定的 less 函数，就会对传入切片 x 进行排序，如果 x 不是切片它会 panic，那么到这里我们不禁会想到一个问题 Slice 方法为什么只需要一个 less 方法就可以进行排序操作？\",\"// In go1.19.2/src/sort/slice.go, starting as line 18. func Slice(x any, less func(i, j int) bool) { rv := reflectValueOf(x) swap := reflectSwapper(x) length := rv.Len() limit := bits.Len(uint(length)) pdqsort_func(lessSwap{less, swap}, 0, length, limit) } \",\"思考一下可以想到，在 sort 包中 nterface 接口中， Len 方法与 Swap方法一般是不需要改动的，况且还是在切片类型中，而 Less 方法则需要指出具体的元素比较项，若每写一个新类型就需要实现这三种方法会比较麻烦，Go 的开发者解决了这个问题，在切片类型中我们只需提供 less 方法即可进行排序操作。\",\"那么 Slice 方法是如何实现的呢？从 code - 14 中我们可以看到，Slice 方法通过调用 reflect 包的方法获得 Len 方法与 Swap 方法，对此我们暂时先不做深入研究。\",\"// In go1.19.2/src/sort/slice_go18.go, starting as line 8. package sort import \\\"reflect\\\" var reflectValueOf = reflect.ValueOf var reflectSwapper = reflect.Swapper \",\"SliceStable 方法相比于 Slice 方法它们唯一的区别在于 SliceStable 方法会对传入的切片 x 进行排序的同时保持相等元素的原始顺序不变，从 code - 15 中我们可以看到在 SliceStable 方法里所调用的排序方法并不相同。\",\"// In go1.19.2/src/sort/slice.go, starting as line 32. func SliceStable(x any, less func(i, j int) bool) { rv := reflectValueOf(x) swap := reflectSwapper(x) stable_func(lessSwap{less, swap}, rv.Len()) } \",\"最后如 code - 16 所示，我们也可以在 sort 包中找到 Slice 与 SliceStable 方法排序方法中的函数中的 lessSwap 结构。\",\"// In go1.19.2/src/sort/sort.go, starting as line 74. // lessSwap is a pair of Less and Swap function for use with the // auto-generated func-optimized variant of sort.go in // zfuncversion.go. type lessSwap struct { Less func(i, j int) bool Swap func(i, j int) } \"]},\"85\":{\"h\":\"SliceIsSorted\",\"t\":[\"SliceIsSorted 方法会检查所传入的切片 x 是否根据提供的 less 方法进行排序， 如果 x 不是切片它会 panic，该函数的具体实现逻辑与 IsSorted 方法基本一致。\",\"// In go1.19.2/src/sort/slice.go, starting as line 40. // SliceIsSorted reports whether the slice x is sorted according to the provided less function. // It panics if x is not a slice. func SliceIsSorted(x any, less func(i, j int) bool) bool { rv := reflectValueOf(x) n := rv.Len() for i := n - 1; i > 0; i-- { if less(i, i-1) { return false } } return true } \"]},\"86\":{\"c\":[\"Go\"]},\"87\":{\"c\":[\"Go\"]},\"88\":{\"h\":\"String\"},\"89\":{\"h\":\"类型说明\",\"t\":[\"在 Go 语言中所提供的字符串（string）是一种基础的数据类型，在编程开发中几乎随时都会使用，本篇文章将会介绍字符串（string）的知识，帮助你更好的理解它。\",\"// src/builtin/builtin.go // string is the set of all strings of 8-bit bytes, conventionally but not // necessarily representing UTF-8-encoded text. A string may be empty, but // not nil. Values of string type are immutable. type string string \",\"string 是所有 8 位字节字符串的集合，通常但不一定代表 UTF-8 编码的文本。\",\"字符串可以为空（长度为 0 ），但不会是 nil。\",\"字符串类型的值是不可变的\"]},\"90\":{\"h\":\"数据结构\",\"t\":[\"首先我们先来看一下 string 类型的数据结构，从 code - 1 中我们可以看到 string 的数据结构与之前讲的 slice 数据结构很相似，他们都有一个指向底层数组的指针用存储数据，和表示数组长度的字段 len，从这点中可以发现许多数据结构的存储方式都依赖于数组，与之不同的是 slice 多出一个表示容量的 cap 字段。\",\"// src/runtime/string.go type stringStruct struct { str unsafe.Pointer len int } \"]},\"91\":{\"h\":\"类型声明\",\"t\":[\"如 code - 2 所示我们可以使用两种字面量方式在 Go 语言中声明字符串，即双引号和反引号：使用双引号声明的字符串和其他语言中的字符串没有太多的区别，它只能用于单行字符串的初始化，如果字符串内部出现双引号，需要使用 \\\\ 符号避免编译器的解析错误，而反引号声明的字符串可以摆脱单行的限制。\",\"var str string str = \\\"hello\\\" str = \\\"hello \\\\\\\"world\\\" str = `hello world` \",\"如图 1 所示，虽然字符串往往都被看做是一个整体，但是实际上字符串是一片连续的内存空间，我们也可以将它理解成一个由字符组成的数组。 \",\"当使用反引号时，因为双引号不再负责标记字符串的开始和结束，我们可以在字符串内部直接使用双引号，在遇到需要手写 JSON 或者其他复杂数据格式的场景下非常方便。\",\"var str string str = `{ \\\"str\\\": unsafe.Pointer(str), \\\"len\\\": findnull(str) }` \"]},\"92\":{\"h\":\"解析\",\"t\":[\"那么既然 Go 语言中对 string 类型有两种不同的声明方式即双引号和反引号，那么这也意味着 Go 语言编译器需要能够区分并且正确解析两种不同的字符串格式，在 code - 0 中我们不难发现 Go 语言在解析两种不同的字符串格式中所采用的解析函数 stdString() 与 rawString()。\",\"// src/cmd/compile/internal/syntax/scanner.go func (s *scanner) next() { ... switch s.ch { ... case '\\\"': s.stdString() case '`': s.rawString() ... } \"]},\"93\":{\"h\":\"stdString()\",\"t\":[\"stdString() 方法是它用来解析使用双引号声明的标准字符串，从 stdString() 方法中我们可以看到 Go 语言对标准字符串的解析逻辑，通过 nextch() 函数来获取最新的未解析的字符，以双引号表示开头和结尾，以反斜杠 \\\\ 来逃逸双引号，并且不允许出现隐式换行 \\\\n。\",\"// src/cmd/compile/internal/syntax/scanner.go func (s *scanner) stdString() { ok := true s.nextch() for { if s.ch == '\\\"' { s.nextch() break } if s.ch == '\\\\\\\\' { s.nextch() if !s.escape('\\\"') { ok = false } continue } if s.ch == '\\\\n' { s.errorf(\\\"newline in string\\\") ok = false break } if s.ch < 0 { s.errorAtf(0, \\\"string not terminated\\\") ok = false break } s.nextch() } s.setLit(StringLit, ok) } \"]},\"94\":{\"h\":\"rawString()\",\"t\":[\"rawString() 方法是它用来解析使用反引号声明的字符串，使用反引号声明的原始字符串的解析规则就非常简单了，rawString() 方法会将非反引号的所有字符都划分到当前字符串的范围中，所以我们可以使用它支持复杂的多行字符串。\",\"// src/cmd/compile/internal/syntax/scanner.go func (s *scanner) rawString() { ok := true s.nextch() for { if s.ch == '`' { s.nextch() break } if s.ch < 0 { s.errorAtf(0, \\\"string not terminated\\\") ok = false break } s.nextch() } // We leave CRs in the string since they are part of the // literal (even though they are not part of the literal // value). s.setLit(StringLit, ok) } \",\"并通过 string(s.segment()) 将解析到的字节转换为字符串，同时通过 setLlit() 方法将扫描到的内容类型 (kind) 标记为 StringLit。 无论是标准字符串还是原始字符串都会被标记成 StringLit 并传递到语法分析阶段。在语法分析阶段，与字符串相关的表达式都会由 setLit() 方法处理：\",\"// src/cmd/compile/internal/syntax/scanner.go // setLit sets the scanner state for a recognized _Literal token. func (s *scanner) setLit(kind LitKind, ok bool) { s.nlsemi = true s.tok = _Literal s.lit = string(s.segment()) s.bad = !ok s.kind = kind } // src/cmd/compile/internal/syntax/source.go func (s *source) segment() []byte { return s.buf[s.b : s.r-s.chw] } \"]},\"95\":{\"h\":\"拼接\",\"t\":[\"// src/runtime/string.go // concatstrings implements a Go string concatenation x+y+z+... // The operands are passed in the slice a. // If buf != nil, the compiler has determined that the result does not // escape the calling function, so the string data can be stored in buf // if small enough. func concatstrings(buf *tmpBuf, a []string) string { idx := 0 l := 0 count := 0 for i, x := range a { n := len(x) if n == 0 { continue } if l+n < l { throw(\\\"string concatenation too long\\\") } l += n count++ idx = i } if count == 0 { return \\\"\\\" } // If there is just one string and either it is not on the stack // or our result does not escape the calling frame (buf != nil), // then we can return that string directly. if count == 1 && (buf != nil || !stringDataOnStack(a[idx])) { return a[idx] } s, b := rawstringtmp(buf, l) for _, x := range a { copy(b, x) b = b[len(x):] } return s } \"]},\"96\":{\"h\":\"类型转换\"},\"97\":{\"h\":\"将字节片转换为字符串\",\"t\":[\"Slicebytetostring() 方法是将字节片转换为字符串，它由编译器插入到生成的代码中，ptr 是指向片的第一个元素的指针，n 是 slice 的长度，buf 是结果的固定大小的缓冲区，那么我们就来看看该方法的具体过程吧，首先可以看到该方法先判断了两种情况，分别为字节数组长度为 0 或者 1 的时候，随后就是判断缓冲区的大小是否可以够用，如果不够就会为新字符串分配一片内存空间，stringStructOf() 方法会将传入的字符串指针转换成 stringStruct 的结构体指针，然后设置结构体持有的字符串指针 str 和长度 len，最后通过 memmove() 方法将原 []byte 中的字节全部复制到新的内存空间中。\",\"// The constant is known to the compiler. // There is no fundamental theory behind this number. const tmpStringBufSize = 32 type tmpBuf [tmpStringBufSize]byte // slicebytetostring converts a byte slice to a string. // It is inserted by the compiler into generated code. // ptr is a pointer to the first element of the slice; // n is the length of the slice. // Buf is a fixed-size buffer for the result, // it is not nil if the result does not escape. func slicebytetostring(buf *tmpBuf, ptr *byte, n int) (str string) { if n == 0 { // Turns out to be a relatively common case. // Consider that you want to parse out data between parens in \\\"foo()bar\\\", // you find the indices and convert the subslice to string. return \\\"\\\" } if raceenabled { racereadrangepc(unsafe.Pointer(ptr), uintptr(n), getcallerpc(), abi.FuncPCABIInternal(slicebytetostring)) } if msanenabled { msanread(unsafe.Pointer(ptr), uintptr(n)) } if asanenabled { asanread(unsafe.Pointer(ptr), uintptr(n)) } if n == 1 { p := unsafe.Pointer(&staticuint64s[*ptr]) if goarch.BigEndian { p = add(p, 7) } stringStructOf(&str).str = p stringStructOf(&str).len = 1 return } var p unsafe.Pointer if buf != nil && n <= len(buf) { p = unsafe.Pointer(buf) } else { p = mallocgc(uintptr(n), nil, false) } stringStructOf(&str).str = p stringStructOf(&str).len = n memmove(p, unsafe.Pointer(ptr), uintptr(n)) return } \"]},\"98\":{\"h\":\"将字符串转换为字节片\",\"t\":[\"stringtoslicebyte() 方法是将字符串转换为字节片，buf 是结果的固定大小的缓冲区，s 是要进行转换的字符串，该方法会根据是否传入缓冲区做出不同的处理，当传入缓冲区时，它会使用传入的缓冲区存储 []byte，当没有传入缓冲区时，运行时会调用 rawbyteslice() 方法创建新的字节切片并将字符串中的内容拷贝过去。\",\"func stringtoslicebyte(buf *tmpBuf, s string) []byte { var b []byte if buf != nil && len(s) <= len(buf) { *buf = tmpBuf{} b = buf[:len(s)] } else { b = rawbyteslice(len(s)) } copy(b, s) return b } \"]},\"99\":{\"c\":[\"Go\"]},\"100\":{\"c\":[\"Go\"]},\"101\":{\"h\":\"二分查找\",\"t\":[\"给定一个拥有 n 个不同元素的有序（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。\",\"当遇到这样的题目时我们就可以采用二分查找来完成，二分查找又称折半查找，是一种常见的查找算法，它的基本思想是将一个有序的数组按照中间值分成两个部分，然后判断目标值与中间值的大小关系，如果相等，则查找成功，如果目标值比中间值小，则在左半部分继续查找，如果目标值比中间值大，则在右半部分继续查找，直到找到目标值或者查找范围为空为止。\",\"二分查找的具体实现过程如下：\",\"设置查找范围的左右边界 left 和 right，分别指向数组的第一个元素和最后一个元素。\",\"计算中间位置 mid，mid = (left + right) / 2。\",\"判断目标值与中间值的大小关系： \",\"如果目标值等于中间值，则查找成功，返回 mid。\",\"如果目标值比中间值小，则在左半部分继续查找，即 right = mid - 1。\",\"如果目标值比中间值大，则在右半部分继续查找，即 left = mid + 1。\",\"如果查找范围为空，即 left > right，则说明目标值不存在于数组中，查找失败。\",\"二分查找动态演示\",\"如 code - 1 所示，一个完整且正常的二分查找并不是很容易可以完成的，这里强调几个要点：\",\"在第 7 行由于 left 和 right 都是 int 类型，因此 left + right 可能会超出 int 类型的取值范围，为了避免大数越界，我们通常采用公式 left + (right - left) / 2 来计算 mid 值。\",\"在第 6 行 while 循环的条件中是 <=，而不是 <，因为初始化 right 的赋值是 len - 1，即最后一个元素的索引，而不是 len，前者相当于两端都闭区间 [ left, right ]，后者相当于左闭右开区间 [ left, right )。\",\"#include <stdio.h> int binarySearch(int* nums, int target, int len) { int left = 0, right = len - 1; while(left <= right) { int mid = left + (right - left) / 2; if(nums[mid] == target) { return mid; } else if (nums[mid] < target) { left = mid + 1; } else if (nums[mid] > target) { right = mid - 1; } } return -1; } int main() { int sorted[] = { 1, 2, 3, 4, 5, 6, 7, 8 }; int const length = sizeof(sorted) / sizeof(sorted[0]); int const key = 1; int const result = binarySearch(sorted, key, length); if (result > -1) { printf(\\\"sorted[%d] = %d, search succeed.\\\\n\\\", result, key); } else { printf(\\\"%d not found, search failed.\\\\n\\\", key); } return 0; } \"]},\"102\":{\"c\":[\"C\"]},\"103\":{\"c\":[\"C\",\"算法训练\"]},\"104\":{\"h\":\"汉诺塔\",\"t\":[\"汉诺塔是一个经典的益智游戏，源自于印度数学家毕达哥拉斯所提出的问题。该游戏通常由三个柱子和若干个圆盘组成，目标是将若干个圆盘从起始柱子移动到目标柱子（且保持圆盘的排列顺序不变），同时遵守以下规则：\",\"每次只能移动一个圆盘。\",\"大圆盘不能放在小圆盘上面。\",\"问题：如果将若干个圆盘从起始柱子 a 移动到目标柱子 c 上？（最少要移动多少次？） 提示：可将圆盘临时置于 b 塔，也可将从 a 塔移出的圆盘重新移回 a 塔，但都必须遵循上述两条规则。\",\"解题思路\",\"汉诺塔游戏看起来很简单，但是其中蕴含了很多算法思想，比如说，我们可以使用递归的方法来解决这个问题，具体过程我们可以将其抽象成 3 个步骤。\",\"将 n - 1 个圆盘从塔 a 移动到塔 b。\",\"将第 n 个圆盘从塔 a 移动到塔 c。\",\"将 n - 1 个圆盘从塔 b 移动到塔 c。\",\"也就是说想要解决 n 层的汉诺塔问题，就需要先解决 n - 1 层的汉诺塔问题......这样我们最终将一个大的问题分解成多个小的问题，具体过程如下：\",\"要想将塔 a 的圆盘全部移动到塔 c 中，那么必然要将塔 a 中的最大的圆盘，率先落入到塔 c 中。\",\"那么遵循上述的游戏规则，要想实施刚刚的操作那么就必将会出现下面这一情况。（使得我们将最大的圆盘从塔 a 移动到塔 c 中畅通无阻）这也是为什么在抽象过程中，第一步就是要将 n - 1 个圆盘从塔 a 移动到塔 b 的原因。\",\"现在最大的圆盘已经抵达了它应在的位置，它的位置已经固定不再会移动了，所以我们不在需要考虑它了，甚至我们可以将它忽略掉！\",\"接下来要考虑的问题就是如何将‘塔 a 上的两个圆盘全部移动到塔 b 中’或是‘塔 b 上的两个圆盘全部移动到塔 c 中’，等等这个问题与我们最开始讨论的问题是不是有些相似“要想将塔 a 上的三个圆盘全部移动到塔 c 中”。\",\"也就是说，我们现在将拥有三个圆盘的汉诺塔问题简化成拥有两个圆盘的汉诺塔问题，换而言之要想解决拥有三个圆盘的汉诺塔问题，就需先解决将拥有二个圆盘的汉诺塔问题。（因为我们只要完成二个圆盘的汉诺塔问题，就可执行图 2 中最开始的操作“将最大的 3 号圆盘从塔 a 移动到塔 c 中”完成解题） 此刻要解决的就是拥有二个圆盘的汉诺塔问题，那么以当前思路来说，我们是否可以继续简化这两层的汉诺塔问题，结果肯定是可以的。 这时我们可以发现，当要解决 n 层汉诺塔问题时，就需要先解决 n - 1 层的汉诺塔问题。\",\"那么如何计算需要多少步，首先移动 1 层的我们从上图中可以看出，如果想要移动 n 层圆盘，它包含两个移动 n - 1 层圆盘，还有一个移动第 n 层圆盘，移动第 n 层圆盘就是一步，所以我们就有以下等式。\",\"在这里我们以 F(n) 代表移动 n 层圆盘的步数，我们简单计算一下：移动 1 层圆盘需要 F(1) = 1 步、移动 2 层圆盘需要 F(2) = 3 步、移动 3 层圆盘需要 F(3) = 7 步，总结一下分别为： 1 层为二的一次方减一、2 层为二的二次方减一、3 层为二的三次方减一。\",\"程序求解\",\"#include <stdio.h> void message(int n, char from, char to) { printf(\\\"将 %d 号圆盘, 从塔 %c 移动到塔 %c\\\\n\\\", n, from, to); } void hanoi(int n, char a, char b, char c) { if (n == 1) { // 汉诺塔中只有一个圆盘直接将圆盘从塔 a 移动到塔 c。 message(n, a, c); return; } // 将 n - 1 个圆盘从塔 a 移动到塔 b。 hanoi(n - 1, a, c, b); // 将第 n 个圆盘从塔 a 移动到塔 c。 message(n, a, c); // 将 n - 1 个圆盘从塔 b 移动到塔 c。 hanoi(n - 1, b, a, c); } int main() { hanoi(3, 'a', 'b', 'c'); return 0; } \",\"#include <stdio.h> int main() { int calculate(int num) { if (num == 1) { return 1; } return 2 * calculate(num - 1) + 1; } for (int i = 1; i <= 9; i++) { printf(\\\"%d --> %d\\\\n\\\", i, calculate(i)); } return 0; } \"]},\"105\":{\"c\":[\"C\"]},\"106\":{\"c\":[\"C\",\"算法训练\"]},\"107\":{\"h\":\"找素数\",\"t\":[\"素数（也称为质数）的定义是一个大于 1 的自然数，除了 1 和它本身以外，不能被其他正整数整除。换句话说，一个素数只有两个正因数：1 和它自己。 例如，2、3、5、7、11、13、17、19、23 等都是素数，因为它们只能被 1 和它们自身整除。而 4、6、8、9、10 等不是素数，因为它们可以被其他的正整数整除，比如 4 可以被 2 整除，6 可以被 2 和 3 整除，以此类推。 素数在数学中有着重要的地位，特别是在数论领域。许多数学定理和算法都与素数有关，包括著名的费马小定理和欧拉定理。\",\"判断一个数是否为素数： 在 code - 1 中，我们定义了一个名为 is_prime 的函数，它接受一个整数作为参数，并返回一个布尔值，表示该整数是否为素数。如果输入的整数小于等于 1，则不是素数；否则，我们从 2 开始遍历到该整数的平方根，如果该整数可以被任何一个小于它的正整数整除，则不是素数。\",\"#include <stdio.h> int is_prime(int n) { if (n <= 1) { return 0; } for (int i = 2; i * i <= n; i++) { if (n % i == 0) { return 0; } } return 1; } int main() { int n = 6; if (is_prime(n)) { printf(\\\"%d is a prime number.\\\\n\\\", n); } else { printf(\\\"%d is not a prime number.\\\\n\\\", n); } return 0; } \",\"在判断一个整数是否为素数时，我们通常从 2 开始遍历到该整数的平方根。这是因为如果一个整数不是素数，那么它可以表示为两个因数的乘积，其中一个因数必然小于或等于它的平方根。 例如，假设我们要判断 10 是否为素数。我们可以从 2 开始遍历到 3（因为 3 的平方是 9，小于 10），并检查 10 是否可以被这些数字整除。如果我们发现 10 可以被某个数字整除，那么它就不是素数；否则，它就是素数。 在这个例子中，我们只需要检查到 3 就可以确定 10 不是素数，因为 10 可以表示为 2 和 5 的乘积，其中 5 大于 3，而 2 小于 3。因此，我们不需要继续检查大于 3 的数字。 同样地，对于更大的整数，我们只需要检查到它的平方根就可以确定它是否为素数。这是因为如果一个整数不是素数，那么它可以表示为两个因数的乘积，其中一个因数必然小于或等于它的平方根。如果我们没有找到这样的因数，那么这个整数就是素数。 因此，从 2 开始遍历到该整数的平方根是一种有效的算法，可以快速判断一个整数是否为素数。\",\"证明过程： 假设一个整数 n 不是素数，那么它可以表示为两个因数的乘积：n = a * b。其中，a 和 b 都是大于 1 的正整数。 我们可以通过以下步骤来证明其中一个因数必然小于或等于 n 的平方根：\",\"如果 a 或 b 等于 n，那么另一个因数就是 1，这与题目条件不符，因此我们可以排除这种情况。\",\"如果 a 和 b 都大于 n 的平方根，那么它们的乘积就会大于 n，这与题目条件不符，因此我们可以排除这种情况。\",\"因此，至少有一个因数（不妨设为 a）小于或等于 n 的平方根。\",\"假设 a 大于 n 的平方根，那么 b 就会小于 n 的平方根，因为 a * b = n。但是这与我们的假设矛盾，因此 a 必须小于或等于 n 的平方根。 因此，如果一个整数 n 不是素数，那么它可以表示为两个因数的乘积，其中一个因数必然小于或等于它的平方根。\",\"查找素数： 注意到一个正整数是不可能写成比自身还大的两个正整数的乘积的，并且如果一个正整数能被大于 2 且小于自身的数字整除的话，那么该数字必然不是素数。因此，我们从 2 开始遍历，将 2 的整数倍去除掉，那么剩下的下一个数字必然为素数。为了表达一个数字是否为素数，我们将数组下标做为要表示的数字，数组内容表示该索引对应的数字是否为素数，如 numbers[2] = 1 表示的含义是数字 2 为 素数，而表达式 a[4] = 0 则表示数字 4 不是素数。\",\"#include <stdio.h> void prime_number(int n) { int numbers[n]; for (int i = 2; i < n; i++) { numbers[i] = 1; } for (int i = 2; i < n; i++) { int is_prime = numbers[i]; if (is_prime == 0) { continue; } for(int k = 2 * i; k < n; k += i) { numbers[k] = 0; } } int count = 0, number_per_line = 10; for (int i = 2; i < n; i++) { if (numbers[i] == 0) { continue; } printf(\\\"%d\\\\t\\\", i); count++; if (count == number_per_line) { printf(\\\"\\\\n\\\"); count = 0; } } } int main() { prime_number(1000); return 0; } \",\"查找更多素数： 为了求解更多的素数，可以通过位的形式对程序进行改写。事实上，我们仅使用了数字 0、1 来表示一个索引是否为素数，而保存这两个数字使用 4 个字节是存在显著浪费的。 要知道在计算机中所有数据都是以二进制的形式进行存储的，而在我们当前的 C 语言程序中一个 int 类型的数据所占有的空间为 4 字节（1 Byte = 8 bit）也就是 32 个二进制位。 在图 2 中我们就可以看出为何仅使用数字 0、1 会存在大量存储空间上的浪费，如果我们可以将每一个二进制位都利用起来，那么这可以大大的减少我们对存储空间上的消耗。\",\"#include <stdio.h> void prime_number(unsigned int n) { unsigned int scale = (sizeof(unsigned int) * 8); // 对数组长度进行取整，有小数需进一 unsigned int len = (n + (scale - 1)) / scale; unsigned int numbers[len]; numbers[0] = 0x3FFFFFFF; for (int i = 1; i < len; i++) { numbers[i] = 0xFFFFFFFF; } for (int i = 2; i < n; i++) { unsigned int index = i / scale; unsigned int offset = (scale - (i % scale)) - 1; if ((numbers[index] & (1 << offset)) == 0) { continue; } for (int k = i * 2; k < n; k = k + i) { index = k / scale; offset = (scale - (k % scale)) - 1; numbers[index] &= ~(1 << offset); } } int count = 0, numbers_per_line = 10; for (int i = 2; i < n; i++) { unsigned int index = i / scale; unsigned int offset = (scale - (i % scale)) - 1; if ((numbers[index] & (1 << offset)) == 0) { continue; } printf(\\\"%d\\\\t\\\", i); count++; if (count == numbers_per_line) { printf(\\\"\\\\n\\\"); count = 0; } } } int main() { prime_number(9999); return 0; } \"]},\"108\":{\"c\":[\"C\"]},\"109\":{\"c\":[\"C\",\"算法训练\"]},\"110\":{\"h\":\"数组\",\"t\":[\"在 C 语言中，数组是将其相同类型元素存储在连续的内存空间中，数组通过变量名后加方括号表示，方括号里面是数组的元素数量。\"]},\"111\":{\"h\":\"声明数组\",\"t\":[\"数组通过变量名后加方括号表示，方括号里面是数组的元素数量，也就是: 类型 + 变量名称 + [一个正值的长度]， 在 code - 1 中声明了名为 array 长度为 100 元素类型为 int 的数组。\",\"int array[100]; \",\"数组中的元素是从 0 开始编号，所以数组 array[100] 就是从第 0 号元素一直到第 99 号元素，最后一个元素的编号会比数组长度小 1。\"]},\"112\":{\"h\":\"数组初始化\",\"t\":[\"数组在声明时，可以使用大括号，同时对每一个元素赋值，但大括号里面的值不能多于数组的长度，否则编译时会报错。\",\"int array[6] = { 1, 2, 3, 4, 5, 6 }; int array[6] = { 1, 2, 3, 4, 5, 6, 7 }; // 报错 \",\"如果大括号里面的值，少于数组的元素数量，那么未赋值的元素自动初始化为 0，如果要将整个数组的每一个元素都设置为零，最简单的写法就是下面这样。\",\"int array[5] = { 1, 2, 3 }; // 等同于 int array[5] = { 1, 2, 3, 0, 0 }; int array[5] = { 0 }; // 等同于 int array[5] = { 0, 0, 0, 0, 0 }; // 100 个 0 \",\"但要注意！使用大括号赋值时，必须在数组声明时赋值，否则编译时会报错，其原因在于是，C 语言规定，数组变量一旦声明，就不得修改变量指向的地址，同样的原因，数组赋值之后，再用大括号修改值，也是不允许的。\",\"int array[6]; array = { 1, 2, 3, 4, 5, 6 }; // 报错 int array[6] = { 1, 2, 3, 4, 5, 6 }; array = { 6, 5, 4, 3, 2, 1 }; // 报错 \",\"数组初始化时，可以指定为哪些位置的元素赋值，因为是制定的元素赋值，所以可以不按照顺序任意赋值，并且指定位置的赋值与顺序赋值，可以结合使用，但不建议这样做，会增加读代码的难度。\",\"int array[12] = { [2] = 22, [9] = 99, [11] = 122 }; // 等同于 int array[12] = { 0, 0, 22, 0, 0, 0, 0, 0, 0, 99, 0, 122 }; int array[12] = { [9] = 22, [2] = 99, [11] = 122 }; // 等同于 int array[12] = { 0, 0, 99, 0, 0, 0, 0, 0, 0, 22, 0, 122 }; int array[12] = { 1, 2, 3, [2] = 22, [9] = 99, [2] = 44, 88, [11] = 122 }; // 等同于 int array[] = { 1, 2, 44, 88, 0, 0, 0, 0, 0, 99, 0, 122 } \",\"C 语言允许省略方括号里面的数组元素数量，这时将根据大括号里面的值的数量，自动确定数组的长度，省略成员数量时，如果同时采用指定位置的赋值，那么数组长度将是最大的指定位置再加 1。\",\"int a[] = { 1, 2, 3 }; // 数组长度为 3 int a[] = { [9] = 12 } // 数组长度为 10 \"]},\"113\":{\"h\":\"访问数组元素\",\"t\":[\"上面示例中，数组 array 只有 100 个元素，因此 array[100] 这个位置是不存在的，但是！引用这个位置并不会报错，会正常运行，使得紧跟在 array 后面的那块内存区域被赋值，而那实际上是其他变量的区域，因此不知不觉就更改了其他变量的值，这很容易引发错误，而且难以发现。\"]},\"114\":{\"h\":\"计算数组长度\",\"t\":[\"计算数组长度可以使用 sizeof 函数，sizeof 可以获得数据类型或变量在内存中所占的字节数，同样，用 sizeof 也可以获得整个数组在内存中所占的字节数，因为数组中每个元素的类型都是一样的，在内存中所占的字节数都是相同的，所以总的字节数除以一个元素所占的字节数就是数组的长度。\",\"#include <stdio.h> int main() { int array[] = { 1, 2, 3, 4, 5, 6 }; int len = sizeof(array) / sizeof(array[0]); printf(\\\"len = %d\\\\n\\\", len); return 0; } \"]},\"115\":{\"c\":[\"C\"]},\"116\":{\"c\":[\"C\",\"数据结构\"]},\"117\":{\"h\":\"二叉树\",\"t\":[\"二叉树是计算机科学中一种基本且广泛应用的数据结构，它以独特的分层结构和高效的查找性能，在解决各种问题时展现出强大的功能。在 C 语言中，通过使用指针可以方便地构建和操作二叉树结构。本文将详细介绍 C 语言中二叉树的基本概念、实现方法以及常见操作。\",\"二叉树是一种每个节点最多有两个子节点的树形数据结构，这两个子节点分别称为左子节点和右子节点。二叉树既可以为空，也可以由一个根节点及两棵分别作为其左右子树的二叉树构成。根据节点间的关系和附加条件，二叉树有多种变体，如完全二叉树、满二叉树、平衡二叉树（如 AVL 树和红黑树）以及特殊的二叉搜索树等。\"]},\"118\":{\"h\":\"数据结构\",\"t\":[\"首先我们先来看一下二叉树的数据结构，从 code - 1 中我们可以看到它主要是由两部分组成，分别为指向左右两边的指针，与用于存储数据的数据域，其中从指针中我们不难发现每个节点最多有两个分支，且顺序不能随意颠倒。\",\"typedef struct node { struct node *left; struct node *right; int value; } node_t, *node_ptr; \"]},\"119\":{\"h\":\"创建节点\",\"t\":[\"node_ptr create(int val) { node_ptr p_node = (node_ptr)malloc(sizeof(node_t)); if (p_node != NULL) { p_node->left = NULL; p_node->right = NULL; p_node->value = val; } return p_node; } \"]},\"120\":{\"h\":\"查询节点\",\"t\":[\"node_ptr find(node_ptr root, int val) { node_ptr current = root; while (current != NULL) { if (current->value == val) { goto finish; } if (current->value > val) { current = current->left; } else { current = current->right; } } finish: return current; } \"]},\"121\":{\"h\":\"遍历节点-递归方法\"},\"122\":{\"h\":\"前序\",\"t\":[\"void pre_order(node_ptr root) { if (root == NULL) { return; } printf(\\\"%d \\\", root->value); if (root->left != NULL) { pre_order(root->left); } if (root->right != NULL) { pre_order(root->right); } } \"]},\"123\":{\"h\":\"中序\",\"t\":[\"void in_order(node_ptr root) { if (root == NULL) { return; } if (root->left != NULL) { in_order(root->left); } printf(\\\"%d \\\", root->value); if (root->right != NULL) { in_order(root->right); } } \"]},\"124\":{\"h\":\"后序\",\"t\":[\"void post_order(node_ptr root) { if (root == NULL) { return; } if (root->left != NULL) { post_order(root->left); } if (root->right != NULL) { post_order(root->right); } printf(\\\"%d \\\", root->value); } \"]},\"125\":{\"h\":\"遍历节点-非递归方法\"},\"126\":{\"h\":\"前序\",\"t\":[\"#define SIZE (64) node_ptr stack[SIZE] = { NULL }; int top = -1; void pre_order_with_stack(node_ptr root) { while (root != NULL || top >= 0) { if (root != NULL) { top++; stack[top] = root; printf(\\\"%d \\\", root->val); root = root->left; } else { root = stack[top]; top--; root = root->right; } } } \"]},\"127\":{\"h\":\"中序\",\"t\":[\"#define SIZE (64) node_ptr stack[SIZE] = { NULL }; int top = -1; void in_order_with_stack(node_ptr root) { while (root != NULL || top >= 0) { if (root != NULL) { top++; stack[top] = root; root = root->left; } else { root = stack[top]; top--; printf(\\\"%d \\\", root->val); root = root->right; } } } \"]},\"128\":{\"h\":\"后序\",\"t\":[\"#define SIZE (64) node_ptr stack[SIZE] = { NULL }; int top = -1; void post_order_with_stack(node_ptr root) { while (root != NULL || top >= 0) { if (root != NULL) { top++; stack[top] = root; root = root->left; } else { root = stack[top]; top--; if (((long)root & 0x1) == 1) { root = (node_ptr)((long)root - 1); printf(\\\"%d \\\", root->val); root = NULL; } else { top++; stack[top] = (node_ptr)((long)root | 0x1); root = root->right; } } } } \"]},\"129\":{\"c\":[\"C\"]},\"130\":{\"c\":[\"C\",\"数据结构\"]},\"131\":{\"h\":\"链表\",\"t\":[\"链表是一种线性数据结构，其中的每一个元素都是一个节点，其中每一个节点都通过指针相连接，指针记录了下一个节点的内存地址，通过它可以从当前节点访问到下一个节点。\",\"要知道计算机中的内存空间是所有程序的公共资源，在一个复杂的系统运行环境下，空闲的内存空间可能散落在内存各处，我们知道，存储数组的内存空间必须是连续的，而当数组非常大时，内存可能无法提供如此大的连续空间，此时链表的灵活性优势就体现出来了。\",\"链表中的每个节点由两部分构成，一是本身存储的数据信息（数据域），二是指向后续节点的指针（指针域）这两部分信息组成的存储结构称之为链表的“节点”\"]},\"132\":{\"h\":\"链表的结构定义\",\"t\":[\"从图 2 中可以看出分散存储是链表最显著的特征，但为了能够保持节点之间的顺序关系，每个节点在存储数据的同时都要配置一个指针，用于指向它的直接后继元素。\",\"#include <stddef.h> // 链表节点结构体定义 typedef struct Node { int value; // 节点数据域 struct Node* next; // 节点指针域，指向下一个节点的地址 } Node, *P_Node; int main() { P_Node head = NULL; // 初始化链表 return 0; } \",\"链表的首个节点被称为“头节点”，头节点通常包含指向下一个节点的指针。对于单链表来说，头结点是整个链表的入口，通过它可以遍历链表中的其他所有节点。如果链表为空，则头结点不存在，或者它的指针指向 NULL。 链表还拥有一个头指针，永远指向链表中第一个节点的位置，也就是链表中的“头节点”。\",\"头指针与头节点的区别：\",\"头指针只声明没有分配存储空间。\",\"头节点进行了声明并分配了一个结点大小的实际物理内存。\",\"在链表的实现中，有时人们会定义两个结构体，一个用于表示链表节点，另一个用于表示整个链表。这样做的原因主要是为了更好地管理链表的状态和提供更清晰的数据封装。\",\"#include <stddef.h> // 链表节点结构体定义 typedef struct Node { int value; // 节点数据域 struct Node* next; // 节点指针域，指向下一个节点的地址 } Node, *P_Node; // 链表结构体定义 typedef struct List { P_Node head; // 链表头结点 int size; // 链表大小（节点数量） } List; int main() { List list = { .head = NULL }; // 初始化链表 return 0; } \",\"从以上代码中可以看出，链表节点 Node 除了包含值，还需额外保存一个指针，因此在相同数据量下，链表比数组占用更多的内存空间。\"]},\"133\":{\"h\":\"链表的常用操作\"},\"134\":{\"h\":\"创建节点\",\"t\":[\"创建链表节点一般情况下需要使用 malloc 方法，该方法返回一个指针。如果分配内存成功，返回可用内存的起始地址，如果失败，则返回 NULL。需要注意的是 malloc 返回的指针类型是通用指针类型 void * 需要根据程序需要进行强制类型转换。**每个使用 malloc 分配的内存可以确保是地址连续的内存空间。多次使用 malloc 分配内存时，不能确保每个独立内存的起始地址是连续的。**使用 malloc 方法得到的内存不会执行内存清零操作，由于动态内存区可被重复使用，因此，程序作者一定要对内存进行初始化操作。\",\"// 创建新节点函数 P_Node create_node(int val) { P_Node new_node = (P_Node)malloc(sizeof(Node)); // 分配内存空间 if (new_node == NULL) { printf(\\\"Memory allocation failed.\\\\n\\\"); return NULL; } new_node->value = val; // 初始化数据域 new_node->next = NULL; // 初始化指针域 return new_node; } \"]},\"135\":{\"h\":\"插入节点\",\"t\":[\"// 在链表末尾添加节点函数 void append_node(List *list, P_Node node) { if (list->head == NULL) { // 如果链表为空，则将节点设为头节点 list->head = node; return; } P_Node last = list->head; while (last->next != NULL) { last = last->next; } last->next = node; // 将节点添加到链表末尾 } \"]},\"136\":{\"h\":\"查找节点\",\"t\":[\"// 查找链表中的第一个具有给定值 val 的节点（如果没有则返回 NULL） P_Node search_node(List list, int val) { while (list.head != NULL) { if (list.head->value == val) { return list.head; // 找到了返回与给定值相同的节点 } list.head = list.head->next; } return NULL; // 如果没有找到，则返回 NULL } \"]},\"137\":{\"h\":\"删除节点\",\"t\":[\"void delete_node(List *list, P_Node node) { if (list->head == NULL) { // 如果链表为空，则无需删除 return; } if (list->head == node) { // 如果要删除的节点是链表中第一个节点 list->head = node->next; // 直接修改链表头指向下一个节点 node->next = NULL; // 清除已删除节点的 next，使其与链表彻底隔离 free(node); // 释放 malloc 函数申请的空间 return; } P_Node last = list->head; while (last->next != NULL) { if (last->next == node) { last->next = node->next; node->next = NULL; free(node); return; } last = last->next; } } \"]},\"138\":{\"h\":\"打印节点\",\"t\":[\"void print_list(List list) { while (list.head != NULL) { printf(\\\"%d-->\\\", list.head->value); list.head = list.head->next; } printf(\\\"NULL\\\\n\\\"); } \"]},\"139\":{\"h\":\"完整代码\",\"t\":[\"#include <stddef.h> #include <stdlib.h> #include <stdio.h> // 链表节点结构体定义 typedef struct Node { int value; // 节点数据域 struct Node* next; // 节点指针域，指向下一个节点的地址 } Node, *P_Node; // 链表结构体定义 typedef struct List { P_Node head; // 链表头结点 int size; // 链表大小（节点数量） } List; P_Node create_node(int val) { P_Node new_node = (P_Node)malloc(sizeof(Node)); // 分配内存空间 if (new_node == NULL) { printf(\\\"Memory allocation failed.\\\\n\\\"); return NULL; } new_node->value = val; // 初始化数据域 new_node->next = NULL; // 初始化指针域 return new_node; } void append_node(List *list, P_Node node) { if (list->head == NULL) { // 如果链表为空，则将节点设为头节点 list->head = node; return; } P_Node last = list->head; while (last->next != NULL) { last = last->next; } last->next = node; // 将节点添加到链表末尾 } // 查找链表中的第一个具有给定值 val 的节点（如果没有则返回 NULL） P_Node search_node(List list, int val) { while (list.head != NULL) { if (list.head->value == val) { return list.head; // 找到了返回与给定值相同的节点 } list.head = list.head->next; } return NULL; // 如果没有找到，则返回 NULL } void delete_node(List *list, P_Node node) { if (list->head == NULL) { // 如果链表为空，则无需删除 return; } if (list->head == node) { // 如果要删除的节点是链表中第一个节点 list->head = node->next; // 直接修改链表头指向下一个节点 node->next = NULL; // 清除已删除节点的 next，使其与链表彻底隔离 free(node); // 释放 malloc 函数申请的空间 return; } P_Node last = list->head; while (last->next != NULL) { if (last->next == node) { last->next = node->next; node->next = NULL; free(node); return; } last = last->next; } } void print_list(List list) { while (list.head != NULL) { printf(\\\"%d-->\\\", list.head->value); list.head = list.head->next; } printf(\\\"NULL\\\\n\\\"); } int main() { List list = { .head = NULL, .size = 10 }; // 初始化链表 for (int i = 0; i < list.size; i++) { append_node(&list, create_node(i)); } print_list(list); delete_node(&list, search_node(list, 0)); delete_node(&list, search_node(list, 1)); delete_node(&list, search_node(list, 2)); delete_node(&list, search_node(list, 3)); delete_node(&list, search_node(list, 4)); delete_node(&list, search_node(list, 5)); delete_node(&list, search_node(list, 6)); delete_node(&list, search_node(list, 7)); delete_node(&list, search_node(list, 8)); delete_node(&list, search_node(list, 9)); print_list(list); return 0; } \"]},\"140\":{\"h\":\"常见链表类型\",\"t\":[\"常见的链表类型包括三种：\",\"单向链表：即前面介绍的普通链表。单向链表的节点包含值和指向下一节点的引用两项数据。我们将首个节点称为头节点，将最后一个节点称为尾节点，尾节点指向空 NULL 。\",\"环形链表：如果我们令单向链表的尾节点指向头节点（首尾相接），则得到一个环形链表。在环形链表中，任意节点都可以视作头节点。\",\"双向链表：与单向链表相比，双向链表记录了两个方向的引用。双向链表的节点定义同时包含指向后继节点（下一个节点）和前驱节点（上一个节点）的引用（指针）。相较于单向链表，双向链表更具灵活性，可以朝两个方向遍历链表，但相应地也需要占用更多的内存空间。\",\"typedef struct Node { int data; // 节点数据域 struct Node* next; // 节点指针域，指向下一个节点的地址 struct Node* prev; // 节点指针域，指向上一个节点的地址 } Node; \"]},\"141\":{\"c\":[\"C\"]},\"142\":{\"c\":[\"C\",\"数据结构\"]},\"143\":{\"h\":\"队列\",\"t\":[\"在计算机科学中，数据结构是软件开发的基础，它们负责组织和存储数据以优化算法性能。其中，队列是一种基础且广泛应用的线性数据结构，尤其在多任务处理、消息传递、操作系统调度等领域具有重要作用。本文将重点探讨如何在 C 语言中实现并操作队列。\"]},\"144\":{\"h\":\"队列的概念\",\"t\":[\"队列（queue）遵循先进先出的原则，就像现实生活中排队等待服务的情景一样，最先到达的元素最先离开。\"]},\"145\":{\"h\":\"队列的常用操作\",\"t\":[\"我们将队列头部称为“队首”，尾部称为“队尾”，队列有两个主要的操作：“入队”与“出队”，将把元素加入队尾的操作称为“入队”，删除队首元素的操作称为“出队”。\"]},\"146\":{\"h\":\"队列的实现\",\"t\":[\"为了实现队列，我们需要一种数据结构，可以在一端添加元素，并在另一端删除元素，链表和数组都符合要求。\"]},\"147\":{\"h\":\"基于链表实现\",\"t\":[\"我们可以将链表的“头节点”和“尾节点”分别视为“队首”和“队尾”，规定队尾仅可添加节点，队首仅可删除节点。\",\"#include <stdlib.h> typedef struct Node { int data; struct Node *next; } Node, *P_Node; typedef struct Queue { P_Node front; // 队头指针 P_Node rear; // 队尾指针 int size; } Queue, *P_Queue; P_Queue create_queue() { P_Queue queue = (P_Queue)malloc(sizeof(Queue)); if (queue != NULL) { queue->front = NULL; queue->rear = NULL; queue->size = 0; } return queue; } P_Node create_node(int value) { P_Node node = (P_Node)malloc(sizeof(Node)); if (node != NULL) { node->data = value; node->next = NULL; } return node; } \",\"入队操作：将要入队的节点插入到当前队列尾节点的后面，最后将尾节点变更为当前将要入队的节点。\",\"void push(P_Queue queue, int value) { P_Node node = create_node(value); if (node == NULL) { printf(\\\"Failed to allocate node\\\\n\\\"); return; } if (queue->front == NULL) { // 当队列中没有节点时，头节点与尾节点均指向将要入队的节点 queue->front = queue->rear = node; } else { // 将要入队的节点插入到当前队列尾节点的后面 queue->rear->next = node; // 更换尾节点的指向，保证队列的尾节点总是指向实际的最后一个节点。 queue->rear = node; } queue->size++; } \",\"出队操作：将当前队列头节点变更为头节点后下一个节点。\",\"void pop(P_Queue queue) { if (queue->size == 0 && queue->front == NULL) { printf(\\\"Queue is null\\\\n\\\"); return; } P_Node temp = queue->front; printf(\\\"%d\\\\n\\\", temp->data); queue->front = temp->next; queue->size--; free(temp); } \"]},\"148\":{\"h\":\"基于数组实现\",\"t\":[\"在数组中删除首元素时需要对当前数组进行遍历以确定首元素所在位置，这会导致出队操作效率较低。然而，我们可以采用以下巧妙方法来避免这个问题。 我们可以使用一个变量 front 指向队首元素的索引，并维护一个变量 size 用于记录队列长度。定义 rear = front + size ，这个公式计算出的 rear 指向队尾元素之后的下一个位置，基于此设计，数组中包含元素的有效区间为 [front, rear - 1]。\",\"#include <stdlib.h> typedef struct Queue { int *nums; int front; int size; int cap; } Queue, *P_Queue; P_Queue create_queue(int cap) { P_Queue queue = (P_Queue)malloc(sizeof(Queue)); if (queue != NULL) { queue->cap = cap; queue->nums = (int*)malloc(sizeof(int) * queue->cap); if (queue->nums == NULL) { return NULL; } queue->front = queue->size = 0; } return queue; } int main() { return 0; } \",\"入队操作：将要入队的元素赋值给 rear 索引处，并将 size 增加 1 。\",\"void push(P_Queue queue, int val) { if (queue->size == queue->cap) { printf(\\\"Queue is full\\\\n\\\"); return; } // 将输入元素赋值给 rear 索引处 int rear = (queue->front + queue->size) % queue->cap; queue->nums[rear] = val; // 并将 size 增加 1 queue->size++; } \",\"出队操作：只需将 front 增加 1 ，并将 size 减少 1 。\",\"void pop(P_Queue queue) { if (queue->size == 0) { printf(\\\"Queue is empty\\\\n\\\"); return; } int elem = queue->nums[queue->front]; printf(\\\"%d\\\\n\\\", elem); // 将 front 增加 1 queue->front = (queue->front + 1) % queue->cap; // 将 size 减少 1 queue->size--; } \"]},\"149\":{\"h\":\"为什么要用模运算\",\"t\":[\"模运算对于处理循环序列非常有用，例如，在当前数组或链表的索引循环中，通过使用模运算可以让索引值始终保持在有效范围内。例如，当你有一个长度为 n 的数组时，计算下标 i % n 可以确保下标总是在 0 到（n - 1）之间。\"]},\"150\":{\"c\":[\"C\"]},\"151\":{\"c\":[\"C\",\"数据结构\"]},\"152\":{\"h\":\"栈\",\"t\":[\"栈是一种遵循先入后出的逻辑的线性数据结构。我们可以将栈类比为桌面上的一摞盘子，如果想取出底部的盘子，则需要先将上面的盘子依次移走。我们将盘子替换为各种类型的元素（如整数、字符、对象等），就得到了栈这种数据结构。\"]},\"153\":{\"h\":\"栈的常用操作\",\"t\":[\"我们把堆叠元素的顶部称为“栈顶”，底部称为“栈底”。将把元素添加到栈顶的操作叫作“入栈”，删除栈顶元素的操作叫作“出栈”。\"]},\"154\":{\"h\":\"栈的实现\",\"t\":[\"为了深入了解栈的运行机制，我们来尝试自己实现一个栈。栈遵循先入后出的原则，因此我们只能在栈顶添加或删除元素。然而，数组和链表都可以在任意位置添加和删除元素，因此栈可以视为一种受限制的数组或链表。换句话说，我们可以“屏蔽”数组或链表的部分无关操作，使其对外表现的逻辑符合栈的特性。\"]},\"155\":{\"h\":\"基于链表实现\",\"t\":[\"使用链表实现栈时，我们可以将链表的头节点视为栈顶，尾节点视为栈底。对于入栈操作，我们只需将元素插入链表头部，这种节点插入方法被称为“头插法”。而对于出栈操作，只需将头节点从链表中删除即可。\",\"#include <stdlib.h> #include <stdio.h> typedef struct Node { int value; struct Node* next; } Node, *P_Node; typedef struct Stack { P_Node top; int size; } Stack, *P_Stack; // 构造函数 P_Stack create_stack() { P_Stack stack = (P_Stack)malloc(sizeof(Stack)); if (stack != NULL) { stack->top = NULL; stack->size = 0; } return stack; } // 入栈 void push(P_Stack stack, int val) { P_Node node = (P_Node)malloc(sizeof(Node)); if (node != NULL) { node->next = stack->top; node->value = val; stack->top = node; stack->size++; } } // 出栈 void pop(P_Stack stack) { if (stack->size == 0) { printf(\\\"stack is empty\\\\n\\\"); return; } P_Node node = stack->top; stack->top = stack->top->next; printf(\\\"%d\\\\n\\\", node->value); free(node); stack->size--; } int main() { P_Stack stack = create_stack(); push(stack, 1); push(stack, 2); pop(stack); pop(stack); pop(stack); return 0; } \"]},\"156\":{\"h\":\"基于数组实现\",\"t\":[\"使用数组实现栈时，我们可以将数组的尾部作为栈顶。入栈与出栈操作分别对应在数组尾部添加元素与删除元素。\",\"#include <stdlib.h> #include <stdio.h> typedef struct Stack { int capacity; // 栈的容量 int top; // 栈顶元素的索引 int* array; // 存储栈元素的数组 } Stack, *P_Stack; // 构造函数 P_Stack create_stack(int cap) { P_Stack stack = (P_Stack)malloc(sizeof(Stack)); if (stack != NULL) { stack->capacity = cap; stack->top = -1; stack->array = (int*)malloc(sizeof(int) * stack->capacity); if (stack->array == NULL) { return NULL; } } return stack; } // 入栈 void push(P_Stack stack, int val) { if (stack->top == stack->capacity - 1) { printf(\\\"stack is full\\\\n\\\"); return; } stack->top++; stack->array[stack->top] = val; } // 出栈 void pop(P_Stack stack) { if (stack->top == - 1) { printf(\\\"stack is empty\\\\n\\\"); return; } int data = stack->array[stack->top]; stack->top--; printf(\\\"%d\\\\n\\\", data); } int main() { P_Stack stack = create_stack(10); for (int i = 0; i <= 10; i++) { push(stack, i); } pop(stack); pop(stack); pop(stack); return 0; } \"]},\"157\":{\"c\":[\"C\"]},\"158\":{\"c\":[\"C\",\"数据结构\"]},\"159\":{\"h\":\"基本语法\"},\"160\":{\"h\":\"语句\",\"t\":[\"C 语言的代码是由一行行的语句所组成，语句就是程序执行的一个操作命令，C 语言规定，语句必须使用分号结尾，除非有明确规定可以不写分号。\",\"int x = 1; \",\"变量声明语句，声明整数变量 x，并且将值设为 1。\",\"int x; x = 1; \",\"两个语句写在一行：\",\"变量声明，声明整数变量 x。\",\"变量赋值，将声明的整数变量 x 赋值为 1。\",\"所以，语句之间的换行符并不是必需的，只是为了方便阅读代码。\",\"int x; x = 1 ; \",\"一个语句也可以写成多行，这时就要依靠分号判断语句在哪一行结束。\",\"不建议这样做，增加对代码的阅读负担\",\"； \",\"单个分号也是有效语句，称为“空语句”，虽然毫无作用。\"]},\"161\":{\"h\":\"表达式\",\"t\":[\"C 语言的各种计算，主要通过表达式完成，表达式是一个计算式，用来获取值。\",\"1 + 2 \",\"用来获取 1 + 2 这个算术计算的结果的表达式。\",\"8; 3 + 4; \",\"表达式加上分号，也可以成为语句。 表达式与语句的区别主要有：\",\"语句可以包含表达式，但是表达式本身不构成语句。\",\"表达式都有返回值，语句不一定有，因为语句用来执行某个命令，很多时候不需要返回值，比如变量声明语句（int x = 1）就没有返回值。\"]},\"162\":{\"h\":\"语句块\",\"t\":[\"C 语言允许多个语句使用一对大括号 {}，组成一个块，也称为复合语句，在语法上，语句块可以视为多个语句组成的一个复合语句。\",\"{ int x; x = 1; } \",\"用大括号包裹形成了一个语句块。\",\"大括号的结尾不需要添加分号。\"]},\"163\":{\"h\":\"空格\",\"t\":[\"C 语言里面的空格，主要用来帮助编译器区分语法单位，如果语法单位不用空格就能区分，空格就不是必须的，只是为了增加代码的可读性。\",\"int x = 1; // 等同于 int x=1; \",\"赋值号（=）前后有没有空格都可以，因为编译器这里不借助空格，就能区分语法单位。\",\"int x = 1; \",\"语法单位之间的多个空格，等同于单个空格。\",\"各个语法单位之间的多个空格，跟单个空格的效果是一样的。\",\"空格还用来表示缩进，多层级的代码有没有缩进，其实对于编译器来说并没有差别，没有缩进的代码也是完全可以运行的，强调代码缩进，只是为了增强代码可读性，便于区分代码块。\"]},\"164\":{\"h\":\"注释\",\"t\":[\"注释是对代码的说明，编译器会忽略注释，也就是说，注释对实际代码没有影响，C 语言中注释写法有两种。\",\"/* 注释 */ /* 这是一行注释 */ int x; /* 注释 */ x = 1; \",\"将要注释的内容放在 /.../ 之间，内部可以分行。\",\"这种注释可以插在行内，用来对参数进行说明，跟在它后面的代码依然会有效执行。\",\"一定不能忘记写结束符号 */，否则很容易导致错误。\",\"// 这是一行注释 int x = 1; // 这也是注释 \",\"将注释放在双斜杠//后面，从双斜杠到行尾都属于注释，这种注释只能是单行，可以放在行首，也可以放在一行语句的结尾，这是 C99 标准新增的语法。\",\"printf(\\\"// hello /* world */ \\\"); \",\"不管是哪一种注释，都不能放在双引号里面，双引号里面的注释符号，会成为字符串的一部分，解释为普通符号，失去注释作用。\"]},\"165\":{\"c\":[\"C\"]},\"166\":{\"c\":[\"C\"]},\"167\":{\"h\":\"main 函数\",\"t\":[\"C 语言的执行开始于 main 方法，main 方法是所有 C 语言程序执行的入口，在程序的开头，通常会定义一个 main 方法，并且它会作为程序的起始点，也就是说所有的 C 语言程序都需要一个称之为 mian 的方法，程序执行是从 main 方法中的第一句开始执行，当 main 函数返回时程序也会随之结束。\",\"在最新的 C99 标准中 main 函数只有两种标准形式，值得注意的是标准 C 的返回值是一个整数，若 main 方法执行到末尾没有遇到返回语句，则直接默认执行了 return 0，而 0 值一般代表着成功的意思，如果对其他非 0 值感兴趣的话可以试着去搜索一下“Linux 或 Window 错误代码及其含义”这里就不做过多陈述。\",\"int main(void) { // 程序执行的代码 return 0; } \",\"int main(int argc, char* argv[]) { // 程序执行的代码 return argc; } \",\"参数 argc 和 argv（也可以根据需要另外命名），代表了程序的命令行参数。\",\"argc（全称为 argument count）的值为 0 或者为命令行中启动该程序的字符串的数量。程序本身的名称也算作该字符串，也要计算进去。\",\"argv（全称为 arguments vector）是一个 char 指针数组，每个指针都独立的指向命令行中每个字符串：数组中元素的个数，比 argc 的值多 1；最后一个元素 argv[argc] 是空指针。如果 argc 大于 0，那么第一个字符串，argv[0]，就是程序本身的名称。如果运行环境不支持程序名称，那么 argv[0] 为空。如果 argc 大于 1，从字符串 argv[1] 到 argv[argc-1] 包含该程序命令行参数。\",\"除此之外，许多 C 的实现版本还支持其他、非标准语法的书写形式，有些编译器允许这种形式，但是还没有任何标准考虑接受它。所以编译器不必接受这种形式，并且很多编译器也不允许这么写。坚持使用标准的意义在于：当你把程序从一个编译器移到另一个编译器时，照样能正常运行。\",\"int main(int argc, char *argv[], char *envp[]) { // 程序执行的代码 return argc; } \",\"envp（全称为 environment pointer）在非标准的、有 3 个参数的 main（）函数版本中，是一个指针数组，每个指针都指向组成程序环境的一个字符串。通常，这个字符串的格式是“名称 = 值”。在标准 C 语言中，可以利用函数 getenv（）获取得这些环境变量。\",\"C 的 main 方法也是一个普通的函数，我们也向 main 方法叫做 main 函数，而 C 的设计原则是把函数作为程序的构成模块，main 函数称之为主函数，所有简单的程序都可以定义其他额外的函数。\",\"#include <stdio.h> int main() { printf(\\\"Hello World!\\\\n\\\"); return 0; } \",\"总之，C 语言中的 main 函数是程序的入口函数，它为程序提供了一个起始点，在 main 函数中，我们可以定义各种变量、调用各种函数、执行各种操作，还可以编写各种算法和逻辑。通过正确地使用 main 函数，我们可以让程序完成各种复杂的任务。\"]},\"168\":{\"c\":[\"C\"]},\"169\":{\"c\":[\"C\"]},\"170\":{\"h\":\"变量\"},\"171\":{\"h\":\"变量名\",\"t\":[\"在 C 语言中变量名属于标识符，命名有严格的规范：\",\"只能由字母（包括大写和小写）、数字和下划线 ‘_’ 组成。\",\"不能以数字开头。\",\"长度不能超过 63 个字符。\",\"变量名区分大小写，star、Star、STAR 都是不同的变量。\",\"并非所有的词都能用作变量名，有些词在 C 语言里面有特殊含义（比如 int），另一些词是命令（比如 continue），它们都称为关键字，不能用作变量名，另外，C 语言还保留了一些词，供未来使用，这些保留字也不能用作变量名，下面就是 C 语言主要的关键字和保留字。\",\"注意\",\"auto, break, case, char, const, continue, default, do, double, else, enum, extern, float, for, goto, if, inline, int, long, register, restrict, return, short, signed, sizeof, static, struct, switch, typedef, union, unsigned, void, volatile, while\",\"另外，两个下划线开头的变量名，以及一个下划线 + 大写英文字母开头的变量名，都是系统保留的，自己不应该起这样的变量名。\"]},\"172\":{\"h\":\"变量的声明\",\"t\":[\"C 语言的变量，必须先声明后使用，如果一个变量没有声明就直接使用会报错，每个变量都有自己的类型，声明变量时，必须把变量的类型告诉编译器。\",\"int height; \",\"声明了变量 height，并且指定类型为 int（整数）。\",\"int height, width; // 等同于 int height; int width; \",\"如果几个变量具有相同类型，可以在同一行声明。\",\"声明变量的语句必须以分号结尾。\",\"一旦声明，变量的类型就不能在运行时修改。\"]},\"173\":{\"h\":\"变量的赋值\",\"t\":[\"C 语言会在变量声明时，就为它分配内存空间，但是不会清除内存里面原来的值，这导致声明变量以后，变量会是一个随机的值，所以，变量一定要赋值以后才能使用。\",\"int num; num = 42; \",\"第一行声明了一个整数变量 num，第二行给这个变量赋值。\",\"变量的值应该与类型一致，不应该赋予不是同一个类型的值，比如 num 的类型是整数，就不应该赋值为小数，虽然 C 语言会自动转换类型，但是应该避免赋值运算符两侧的类型不一致。\",\"int num = 42; \",\"变量的声明和赋值，也可以写在一行。\",\"int x = 1, y = 2; \",\"多个相同类型变量的赋值，可以写在同一行。\",\"int x, y; x = 1; y = (x = 2 * x); // y = 2 \",\"赋值表达式有返回值，等于等号右边的值。\",\"变量 y 的值就是赋值表达式（x = 2 * x）的返回值 2。\",\"int x, y, z, m, n; x = y = z = m = n = 3; \",\"如上所示，赋值表达式有返回值，所以 C 语言可以写出多重赋值表达式（一次为多个变量赋值）。\",\"赋值运算符是从右到左执行，所以先为 n 赋值，然后依次为 m、z、y 和 x 赋值。\"]},\"174\":{\"h\":\"变量的作用域\",\"t\":[\"作用域指的是变量生效的范围。C 语言的变量作用域主要有两种：文件作用域和块作用域。\",\"文件作用域：在源码文件顶层声明的变量，从声明的位置到文件结束都有效。\",\"块作用域：指的是由大括号（{}）组成的代码块，它形成一个单独的作用域，凡是在块作用域里面声明的变量，只在当前代码块有效，代码块外部不可见。\",\"int x = 1; int main() { printf(\\\"%i\\\\n\\\", x); return 0; } \",\"变量 x 是在文件顶层声明的，从声明位置开始的整个当前文件都是它的作用域，可以在这个范围的任何地方读取这个变量，比如函数 main() 内部就可以读取这个变量。\",\"int a = 12; if (a == 12) { int b = 99; printf(\\\"%d %d\\\\n\\\", a, b); // 12 99 } printf(\\\"%d\\\\n\\\", a); // 12 printf(\\\"%d\\\\n\\\", b); // 出错 \",\"变量 b 是在 if 代码块里面声明的，所以对于大括号外面的代码，这个变量是不存在的。\",\"{ int i = 10; { int i = 20; printf(\\\"%d\\\\n\\\", i); // 20 } printf(\\\"%d\\\\n\\\", i); // 10 } \",\"内层和外层都有一个变量 i，每个作用域都会优先使用当前作用域声明的 i。\",\"代码块可以嵌套，即代码块内部还有代码块，这时就形成了多层的块作用域，它的规则是：内层代码块可以使用外层声明的变量，但外层不可以使用内层声明的变量，如果内层的变量与外层同名，那么会在当前作用域覆盖外层变量。\",\"for (int i = 0; i < 10; i++) { printf(\\\"%d\\\\n\\\", i); } printf(\\\"%d\\\\n\\\", i); // 出错 \",\"函数内部声明的变量，对于函数外部是不可见的， for 循环也是一个块作用域，循环变量只对循环体内部可见，外部是不可见的。\"]},\"175\":{\"c\":[\"C\"]},\"176\":{\"c\":[\"C\"]},\"177\":{\"h\":\"stdio.h\",\"t\":[\"stdio.h 是一个核心的标准输入输出（Standard Input/Output）头文件，它提供了丰富的函数和类型定义来处理与外部设备的文本和二进制数据交换。\"]},\"178\":{\"h\":\"标准 I/O 函数\",\"t\":[\"以下函数用于控制台的输入和输出：\",\"printf()：输出到控制台。\",\"scanf()：从控制台读取输入。\",\"getchar()：从控制台读取一个字符。\",\"putchar()：向控制台写入一个字符。\",\"gets()：从控制台读取整行输入（已废除）。\",\"puts()：向控制台写入一个字符串。\"]},\"179\":{\"h\":\"文件操作函数\",\"t\":[\"以下函数用于文件操作：\",\"fopen()：打开文件。\",\"fclose()：关闭文件。\",\"freopen()：打开一个新文件，关联一个已经打开的文件指针。\",\"fprintf()：输出到文件。\",\"fscanf()：从文件读取数据。\",\"getc()：从文件读取一个字符。\",\"fgetc()：从文件读取一个字符。\",\"putc()：向文件写入一个字符。\",\"fputc()：向文件写入一个字符。\",\"fgets()：从文件读取整行。\",\"fputs()：向文件写入字符串。\",\"fread()：从文件读取二进制数据。\",\"fwrite()：向文件写入二进制数据。\",\"fseek()：将文件内部指针移到指定位置。\",\"ftell()：获取文件内部指针的当前位置。\",\"rewind()：将文件内部指针重置到文件开始处。\",\"fgetpos()：获取文件内部指针的当前位置。\",\"fsetpos()：设置文件内部指针的当前位置。\",\"feof()：判断文件内部指针是否指向文件结尾。\",\"ferror()：返回文件错误指示器的状态。\",\"clearerr()：重置文件错误指示器。\",\"remove()：删除文件。\",\"rename()：文件改名，以及移动文件。\"]},\"180\":{\"h\":\"字符串操作函数\",\"t\":[\"以下函数用于操作字符串：\",\"sscanf()：从字符串读取数据。\",\"sprintf()：输出到字符串。\",\"snprintf()：输出到字符串的更安全版本，指定了输出字符串的数量。\"]},\"181\":{\"c\":[\"C\"]},\"182\":{\"c\":[\"C\"]},\"183\":{\"h\":\"设计模式\",\"t\":[\"JavaScript 中的设计模式种类丰富，它们根据功能和目的的不同，可以被分为三大类：\"]},\"184\":{\"h\":\"创建型设计模式\",\"t\":[\"构造函数模式\",\"通过定义一个构造函数来初始化新对象的属性，并通过new关键字调用构造函数创建实例。\",\"原型模式\",\"通过复制现有对象来创建新对象，而不是每次都新建一个全新的实例。\",\"工厂模式\",\"提供一个接口用于创建一系列相关或依赖对象，而无需指定具体的类。\",\"抽象工厂模式\",\"提供一个接口，用于创建相关或依赖对象家族的工厂，而无需指定具体的产品类。\",\"建造者模式\",\"将复杂的构建过程与表示分离，使得相同的构建过程可以创建不同的表示。\",\"单例模式\",\"确保一个类只有一个实例，并提供全局访问点。\"]},\"185\":{\"h\":\"结构型设计模式\",\"t\":[\"适配器模式\",\"将一个类的接口转换成客户希望的另一个接口。使得原本由于接口不兼容而不能一起工作的类能够协同工作。\",\"装饰器模式\",\"在运行时动态地向对象添加新的行为，同时保持类的单一职责原则。\",\"代理模式\",\"为其他对象提供一种代理以控制对这个对象的访问。\",\"外观模式\",\"提供了一个统一的接口，用来访问子系统中的一群接口。\",\"桥接模式\",\"将抽象部分与它的实现部分分离，使它们都可以独立地变化。\",\"组合模式\",\"允许你将对象组合成树形结构来表现“整体-部分”的层次结构。\"]},\"186\":{\"h\":\"行为型设计模式\",\"t\":[\"策略模式\",\"定义了一系列算法，并将每个算法封装起来，让它们可以互相替换。\",\"模板方法模式\",\"在一个抽象类中定义一个操作中的框架，而将一些步骤延迟到子类中实现。\",\"观察者模式\",\"多个对象间存在一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都会得到通知并自动更新。\",\"发布-订阅模式\",\"也称为事件驱动模式，它解耦了事件的生产者和消费者，通常通过事件中心或者消息队列来处理异步通信。\",\"状态模式\",\"允许一个对象在其内部状态改变时改变其行为。\",\"迭代器模式\",\"提供一种方法顺序访问聚合对象的元素，而又不暴露其底层表示。\",\"责任链模式\",\"使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。\",\"命令模式\",\"将一个请求封装为一个对象，从而使用户能够参数化其他对象的方法调用、排队或记录请求。\"]},\"187\":{\"h\":\"深拷贝&浅拷贝\"},\"188\":{\"h\":\"JS 数据类型\",\"t\":[\"JavaScript 是一种动态类型的语言，这意味着变量可以在程序执行期间更改其数据类型。JavaScript 提供了多种数据类型，可以大致分为两类：基本数据类型（也称为原始值）和引用数据类型。\"]},\"189\":{\"h\":\"基本数据类型\",\"t\":[\"基本数据类型直接存储在栈内存中，它们的值是不可变的，这是因为当我们想从新给基础类型赋值来“改变”它们的值时，实际上是创建了一个新的基本数据类型实例，并将其分配给当前的变量名中。\",\"这样的好处在于，基本数据类型的值不可变，所以在代码中传递这些值时不需要担心它们被意外地修改。这有助于编写无副作用的纯函数，并提高程序的可预测性和稳定性。\",\"let myNum = 42 // 创建一个数值变量 myNum = 43 // 不是改变原来的数值，而是创建一个新的数值并重新分配给 myNum \",\"在 code - 1 中，myNum 变量最初存储的是整数 42，然后通过重新赋值将其改为 43。实际上，这是创建了两个不同的 Number 实例，而不是直接改变了原始数值的值。\"]},\"190\":{\"h\":\"引用数据类型\",\"t\":[\"引用数据类型存储在堆内存中，它们的值是可以改变的，值得注意的是 引用数据类型都是以 object 的基础上派生的，所以除了 null 类型以外，所有的引用类型都是 typeof 运算符返回结果为 object 的对象。\",\"如果你需要区分具体的引用类型，可以使用 instanceof 操作符或者检查构造函数名称。\",\"let arr = [] window.console.log(arr instanceof Array) // true window.console.log(arr.constructor.name) // Array \"]},\"191\":{\"h\":\"浅拷贝与深拷贝\",\"t\":[\"在 JavaScript 中，深拷贝和浅拷贝一般情况都是在引用数据类型的基础上所讨论的，它们是两种不同的复制对象的方式，区别就在于复制的深度以及对原始对象和副本之间关系的影响。\",\"这主要是因为在引用类型中，当我们将变量赋值给另一个变量时，实际上是将它们的引用地址复制了一份。这样，当我们对其中一个变量进行修改时，另一个变量也会受到影响。因此，为了避免这种情况的发生，所以我们通常需要使用拷贝的手段来创建一个新的副本。\",\"let objA = { name: \\\"Li Ming\\\", age: 18 } let objB = objA objA.name = \\\"Xiao Hua\\\" window.console.log(objA) // { name: \\\"Xiao Hua\\\", age: 18 } window.console.log(objB) // { name: \\\"Xiao Hua\\\", age: 18 } \"]},\"192\":{\"h\":\"浅拷贝\",\"t\":[\"浅拷贝只复制了对象的第一层属性值，而不复制其内部的引用。当对象包含其他对象或数组作为属性时，浅拷贝只会创建这些嵌套对象或数组的引用副本，而不是实际的对象或数组本身。因此，如果修改了原对象中的嵌套对象或数组，那么这个修改也会反映到浅拷贝后的副本上，因为它们共享相同的引用。\",\"let objA = { name: \\\"Li Ming\\\", score: [80, 60, 90] } let objB = { ...objA } objA.name = \\\"Xiao Hua\\\" objA.score[0] = 100 window.console.log(objA) // { name: \\\"Xiao Hua\\\", score: [100, 60, 90] } window.console.log(objB) // { name: \\\"Li Ming\\\", score: [100, 60, 90] } \",\"值得注意的是在 code - 5 中，我们修改了原对象中嵌套的数组，但这个修改没有反映到浅拷贝后的副本上，这是因为我们相当于重写了一个数组，如果重写的话，那么他相当于在堆内存中重新开辟了一块空间这样修改之后的这个数组与之前修改的数组会分别处在两个不同地址的内存空间中且他们互不影响，同理此种情况也适用于对象与函数。\",\"let objA = { name: \\\"Li Ming\\\", score: [80, 60, 90] } let objB = { ...objA } objA.name = \\\"Xiao Hua\\\" objA.score = [100, 60, 90] window.console.log(objA) // { name: \\\"Xiao Hua\\\", score: [100, 60, 90] } window.console.log(objB) // { name: \\\"Li Ming\\\", score: [80, 60, 90] } \"]},\"193\":{\"h\":\"深拷贝\",\"t\":[\"深拷贝会递归地复制整个对象及其所有嵌套的对象和数组。它会在内存中为每个被复制的对象分配新的空间，并将所有的属性值都复制过去。这意味着即使原对象中的嵌套对象或数组发生了变化，也不会影响到深拷贝后的副本，因为它们各自拥有独立的内存空间。\",\"实现深拷贝的方法有很多种，只要达到它们各自拥有独立的内存空间且互不干扰，例如使用 JSON.stringify 方法将对象转换为 JSON 字符串，然后使用 JSON.parse 方法将 JSON 字符串解析为新的对象，这样也可以实现深拷贝。但是，这种方法有一些局限性，例如它不能处理函数和 undefined。\",\"let objA = { name: \\\"Li Ming\\\", score: [80, 60, 90], select: function () { return this.name }, age: undefined, } let objB = JSON.parse(JSON.stringify(objA)) window.console.log(objA) // { name: \\\"Li Ming\\\", score: [80, 60, 90], select: ƒ, age: undefined } window.console.log(objB) // { name: \\\"Li Ming\\\", score: [80, 60, 90] } \",\"我们也可以手动去实现一个深拷贝，实现该方法通常需要递归地复制对象的所有属性，并创建任何嵌套对象或数组的新副本。\",\"function deepCopy(obj) { // 对于非对象和null值，直接返回 if (obj === null || typeof obj !== \\\"object\\\") return obj // 根据obj的类型来决定新创建对象的类型 let copy = Array.isArray(obj) ? [] : {} for (let key in obj) { if (obj.hasOwnProperty(key)) { // 递归调用deepCopy处理每个属性 copy[key] = deepCopy(obj[key]) } } return copy } \"]},\"194\":{\"c\":[\"JavaScript\"]},\"195\":{\"c\":[\"JavaScript\"]},\"196\":{\"h\":\"Blob 类型\"},\"197\":{\"h\":\"Blob\",\"t\":[\"Blob 是 JavaScript 中的一个对象，其全称为 binary large object（二进制大对象），用于表示一个不可变、原始数据的类文件对象，它本身是不能直接读写所存储的数据，需要借助图 1 中来对它的数据以不同形式的格式进行读取操作。\"]},\"198\":{\"h\":\"File\",\"t\":[\"File 对象中存在于浏览器环境中，在 node.js 环境中不存在，并且 Blob 的属性和方法都可以应用于 File 对象上，对此我们可以将 File 对象看作是特殊类型的 Blob，且可以用在任意的 Blob 类型的 context 中,比如: FileReader, URL.createObjectURL, createImageBitmap, 及 XMLHttpRequest.send 都能处理 Blob 和 File 对象。\",\"从图 2 可以看出 File 对象相比于 Blob 对象多包含了一些文件属性，File 原型中可以了解 File 是继承自 Blob。\"]},\"199\":{\"h\":\"前端获取文件的几种情况\"},\"200\":{\"h\":\"input 上传\",\"t\":[\"创建 <input> 元素并在其上绑定 onchange 事件，在通过用户点击上传后获取 FileList 对象，其中 input 标签中 type 是用来决定用户的输入类型，multiple 是用来确定是否可以同时上传多个文件。\",\"<input id=\\\"cake\\\" type=\\\"file\\\" multiple=\\\"multiple\\\" /> \",\"const selectElement = window.document.getElementById(\\\"cake\\\") selectElement.onchange = (event) => { window.console.log(event.target.files) } \"]},\"201\":{\"h\":\"文件拖放\",\"t\":[\"创建一个 <div> 标签或者创建其他任意一种标签，通过绑定 ondragover 与 ondrop 事件来完成将浏览器之外的文件拖拽到浏览器窗口中，并将它放在一个成为拖放区域的特殊区域中，也就是之前所创建的 <div> 标签中。\",\"ondragover：当元素或选中的文本被拖到一个可释放目标上时触发（每 100 毫秒触发一次）。\",\"ondrop：当元素或选中的文本在可释放目标上被释放时触发。\",\"<div id=\\\"cake\\\"></div> \",\"const selectElement = window.document.getElementById(\\\"cake\\\") selectElement.ondragover = (event) => { event.preventDefault() } selectElement.ondrop = (event) => { event.preventDefault() window.console.log(event.dataTransfer.files) } \",\"##cake { width: 200px; height: 200px; border: 1px solid black; } \",\"值得注意的是在 ondragover 与 ondrop 事件中均调用 preventDefault() 来阻止对这个事件的其他处理过程（如触点事件或指针事件更或者是放置文件时将文件显示在浏览器窗口中），但此事件还是会继续传播，除非碰到事件监听器调用 stopPropagation() 或 stopImmediatePropagation() 才停止传播。\"]},\"202\":{\"h\":\"showOpenFilePicker API\",\"t\":[\"通过 window.showOpenFilePicker() 方法，该方法用于显示一个文件选择器，以允许用户选择一个或多个文件并返回这些文件的句柄。\",\"<button id=\\\"cake\\\">点击上传文件</button> \",\"const selectElement = window.document.getElementById(\\\"cake\\\") selectElement.onclick = async () => { const pickerOpts = { types: [ { description: \\\"Images\\\", accept: { \\\"image/*\\\": [\\\".png\\\", \\\".gif\\\", \\\".jpeg\\\", \\\".jpg\\\"], }, }, ], excludeAcceptAllOption: true, multiple: false, } const [fileHandle] = await window.showOpenFilePicker(pickerOpts) window.console.log(fileHandle) } \",\"值得注意的是 window.showOpenFilePicker() API 较新，使用时需注意此项功能仅在一些支持的浏览器的安全上下文（HTTPS）中可用，在将其用于生产之前，需仔细检查浏览器兼容性。\"]},\"203\":{\"h\":\"请求远端\",\"t\":[\"通过 fetch 或 axios 等获取远端文件，这也是我们最常用到的。\",\"fetch(\\\"../src/assets/image/cake.png\\\") .then(async (responce) => { window.console.log(await responce.blob()) }) .catch((err) => { window.console.log(err) }) \"]},\"204\":{\"h\":\"FileReader\",\"t\":[\"FileReader 对象允许 Web 应用程序异步读取存储在用户计算机上的文件（但不能用于从文件系统中按路径名简单地读取文件）或原始数据缓冲区的内容，使用 File 或 Blob 对象指定要读取的文件或数据。 简单来说 FileReader 是一个异步 API，它允许接受 File 或 Blob 对象，并根据我们的要求读取成我们想要的文件或数据类型。\",\"FileReader 对象可以使用 FileReader 构造函数来创建，并从图 5 中分别可以看到 FileReader 对象所提供的属性与事件处理。\",\"const fr = new FileReader() window.console.log(fr) \",\"FileReader 对象属性如下：\",\"error（只读）：表示在读取文件时发生的错误；\",\"readyState（只读）：表示 FileReader 状态的数字，取值如下：0（EMPTY）还没有加载任何数据、1（LOADING）数据正在被加载、2（DONE）已完成全部的读取请求。\",\"result（只读）：文件的内容，该属性仅在读取操作完成后才有效，数据的格式取决于使用哪个方法来启动读取操作。\",\"FileReader 对象事件处理如下：\",\"onabort：该事件在读取操作被中断时触发。\",\"onerror：该事件在读取操作发生错误时触发。\",\"onload：该事件在读取操作完成时触发。\",\"onloadstart：该事件在读取操作开始时触发。\",\"onloadend：该事件在读取操作结束时（要么成功，要么失败）触发。\",\"onprogress：该事件在读取 Blob 时触发，当上传大文件时，可以用该事件来监控文件的读取进度。\",\"回归正文，在图 4 中可以看到 FileReader 对象可以将 File 或 Blob 输出成不同的数据格式，所以可以把 FileReader 对象看成一个工具，该工具提供了一些读取方法，这关乎着 result 属性最后所呈现的文件内容，FileReader 对象提供了以下方法来加载文件：\",\"readAsArrayBuffer: 读取指定 Blob 中的内容，完成之后，result 属性中保存的将是被读取文件的 ArrayBuffer 数据对象。\",\"readAsBinaryString: 读取指定 Blob 中的内容，完成之后，result 属性中将包含所读取文件的原始二进制数据。\",\"readAsDataURL: 读取指定 Blob 中的内容，完成之后，result 属性中将包含一个 data: URL 格式的 Base64 字符串以表示所读取文件的内容。\",\"readAsText: 读取指定 Blob 中的内容，完成之后，result 属性中将包含一个字符串以表示所读取的文件内容。\",\"以 readAsDataURL 方法为例，首先创建一个 FileReader 对象，当文件上传成功时，使用该方法读取 File 对象，当读取操作完成时打印读取结果。\",\"<input id=\\\"cake\\\" type=\\\"file\\\" /> \",\"const selectElement = window.document.getElementById(\\\"cake\\\") const fr = new FileReader() fr.onload = (e) => { window.console.log(e.target.result) } selectElement.onchange = (event) => { fr.readAsDataURL(event.target.files[0]) } \",\"如果此时打印 FileReader 对象我们就可以看见 readyState 状态为已完成、 onload 事件为我们刚刚定义的方法、 result 内容为 readAsDataURL 方法启动的读取结果。\"]},\"205\":{\"h\":\"ArrayBuffer\",\"t\":[\"ArrayBuffer 对象用来表示通用的、固定长度的原始二进制数据缓冲区，ArrayBuffer 的内容不能直接操作，只能通过 DataView 对象或 TypedArrray 对象来访问，这些对象用于读取和写入缓冲区内容。 TypedArrray 视图与 DataView 视图的区别主要是字节序，前者的数组成员都是同一个数据类型，后者的数组成员可以是不同的数据类型。\",\"TypedArrray 只是一个概念，实际使用的是那图 7 中的 9 个对象。\",\"DataView 可以自定义格式和字节序，更像是 TypeScript 中的元祖。\",\"Blob 相较于 ArrayBuffer 它作为一个整体文件，更适合用于文件传输，当需要对二进制数据进行操作时（例如修改文件中某一段数据时）就可以使用 ArrayBuffer 来完成。\",\"const Hello = [72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100] const buffer = new ArrayBuffer(Hello.length) const wrapBuffer = new Int8Array(buffer) for (let i = 0; i < Hello.length; i++) { wrapBuffer[i] = Hello[i] } const blob = new Blob([buffer]) const reader = new FileReader() reader.readAsText(blob) window.console.log(reader) \"]},\"206\":{\"c\":[\"JavaScript\"]},\"207\":{\"c\":[\"JavaScript\"]},\"208\":{\"h\":\"this 指向\"},\"209\":{\"c\":[\"JavaScript\"]},\"210\":{\"c\":[\"JavaScript\"]},\"211\":{\"h\":\"创建型设计模式\"},\"212\":{\"h\":\"行为型设计模式\",\"t\":[\"策略模式\",\"定义了一系列算法，并将每个算法封装起来，让它们可以互相替换。\",\"模板方法模式\",\"在一个抽象类中定义一个操作中的框架，而将一些步骤延迟到子类中实现。\",\"观察者模式\",\"多个对象间存在一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都会得到通知并自动更新。\",\"发布-订阅模式\",\"也称为事件驱动模式，它解耦了事件的生产者和消费者，通常通过事件中心或者消息队列来处理异步通信。\",\"状态模式\",\"允许一个对象在其内部状态改变时改变其行为。\",\"迭代器模式\",\"提供一种方法顺序访问聚合对象的元素，而又不暴露其底层表示。\",\"责任链模式\",\"使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。\",\"命令模式\",\"将一个请求封装为一个对象，从而使用户能够参数化其他对象的方法调用、排队或记录请求。\"]},\"213\":{\"h\":\"创建型设计模式\"},\"214\":{\"h\":\"创建型设计模式\",\"t\":[\"构造函数模式\",\"通过定义一个构造函数来初始化新对象的属性，并通过new关键字调用构造函数创建实例。\",\"原型模式\",\"通过复制现有对象来创建新对象，而不是每次都新建一个全新的实例。\",\"工厂模式\",\"提供一个接口用于创建一系列相关或依赖对象，而无需指定具体的类。\",\"抽象工厂模式\",\"提供一个接口，用于创建相关或依赖对象家族的工厂，而无需指定具体的产品类。\",\"建造者模式\",\"将复杂的构建过程与表示分离，使得相同的构建过程可以创建不同的表示。\",\"单例模式\",\"确保一个类只有一个实例，并提供全局访问点。\"]},\"215\":{\"h\":\"创建型设计模式\"},\"216\":{\"h\":\"结构型设计模式\",\"t\":[\"适配器模式\",\"将一个类的接口转换成客户希望的另一个接口。使得原本由于接口不兼容而不能一起工作的类能够协同工作。\",\"装饰器模式\",\"在运行时动态地向对象添加新的行为，同时保持类的单一职责原则。\",\"代理模式\",\"为其他对象提供一种代理以控制对这个对象的访问。\",\"外观模式\",\"提供了一个统一的接口，用来访问子系统中的一群接口。\",\"桥接模式\",\"将抽象部分与它的实现部分分离，使它们都可以独立地变化。\",\"组合模式\",\"允许你将对象组合成树形结构来表现“整体-部分”的层次结构。\"]},\"217\":{\"h\":\"Algorithm Training\"},\"218\":{\"h\":\"Data Structure\"},\"219\":{\"h\":\"Language Foundation\"},\"220\":{\"h\":\"Standard Library\"},\"221\":{\"h\":\"Basic\"}},\"dirtCount\":0,\"index\":[[\"视图的区别主要是字节序\",{\"1\":{\"205\":1}}],[\"视图与\",{\"1\":{\"205\":1}}],[\"固定长度的原始二进制数据缓冲区\",{\"1\":{\"205\":1}}],[\"固定的序列\",{\"1\":{\"18\":1}}],[\"格式的\",{\"1\":{\"204\":1}}],[\"读取指定\",{\"1\":{\"204\":4}}],[\"读取是当前定义类型的初始值\",{\"1\":{\"34\":1}}],[\"属性中将包含一个字符串以表示所读取的文件内容\",{\"1\":{\"204\":1}}],[\"属性中将包含一个\",{\"1\":{\"204\":1}}],[\"属性中将包含所读取文件的原始二进制数据\",{\"1\":{\"204\":1}}],[\"属性中保存的将是被读取文件的\",{\"1\":{\"204\":1}}],[\"属性最后所呈现的文件内容\",{\"1\":{\"204\":1}}],[\"属性指向了其自身\",{\"1\":{\"56\":1}}],[\"输出成不同的数据格式\",{\"1\":{\"204\":1}}],[\"输出到字符串的更安全版本\",{\"1\":{\"180\":1}}],[\"输出到字符串\",{\"1\":{\"180\":1}}],[\"输出到文件\",{\"1\":{\"179\":1}}],[\"输出到控制台\",{\"1\":{\"178\":1}}],[\"回归正文\",{\"1\":{\"204\":1}}],[\"触发\",{\"1\":{\"204\":1}}],[\"已完成全部的读取请求\",{\"1\":{\"204\":1}}],[\"已废除\",{\"1\":{\"178\":1}}],[\"取值如下\",{\"1\":{\"204\":1}}],[\"状态为已完成\",{\"1\":{\"204\":1}}],[\"状态的数字\",{\"1\":{\"204\":1}}],[\"状态模式\",{\"1\":{\"186\":1,\"212\":1}}],[\"应用程序异步读取存储在用户计算机上的文件\",{\"1\":{\"204\":1}}],[\"请求远端\",{\"0\":{\"203\":1}}],[\"需仔细检查浏览器兼容性\",{\"1\":{\"202\":1}}],[\"需要借助图\",{\"1\":{\"197\":1}}],[\"需要根据程序需要进行强制类型转换\",{\"1\":{\"134\":1}}],[\"需要注意的是\",{\"1\":{\"134\":1}}],[\"需要使用\",{\"1\":{\"91\":1}}],[\"需要先调用\",{\"1\":{\"44\":1}}],[\"较新\",{\"1\":{\"202\":1}}],[\"才停止传播\",{\"1\":{\"201\":1}}],[\"毫秒触发一次\",{\"1\":{\"201\":1}}],[\"事件为我们刚刚定义的方法\",{\"1\":{\"204\":1}}],[\"事件中均调用\",{\"1\":{\"201\":1}}],[\"事件来完成将浏览器之外的文件拖拽到浏览器窗口中\",{\"1\":{\"201\":1}}],[\"事件\",{\"1\":{\"200\":1}}],[\"事实上\",{\"1\":{\"107\":1}}],[\"及\",{\"1\":{\"198\":1}}],[\"环境中不存在\",{\"1\":{\"198\":1}}],[\"环形链表\",{\"1\":{\"140\":1}}],[\"原型中可以了解\",{\"1\":{\"198\":1}}],[\"原型模式\",{\"1\":{\"184\":1,\"214\":1}}],[\"原始数据的类文件对象\",{\"1\":{\"197\":1}}],[\"递归调用deepcopy处理每个属性\",{\"1\":{\"193\":1}}],[\"递归方法\",{\"0\":{\"121\":1}}],[\"ƒ\",{\"1\":{\"193\":1}}],[\"区别就在于复制的深度以及对原始对象和副本之间关系的影响\",{\"1\":{\"191\":1}}],[\"运算符返回结果为\",{\"1\":{\"190\":1}}],[\"运行时会调用\",{\"1\":{\"98\":1}}],[\"运行到此处时说明\",{\"1\":{\"38\":1}}],[\"引用数据类型都是以\",{\"1\":{\"190\":1}}],[\"引用数据类型存储在堆内存中\",{\"1\":{\"190\":1}}],[\"引用数据类型\",{\"0\":{\"190\":1}}],[\"引用这个位置并不会报错\",{\"1\":{\"113\":1}}],[\"实际使用的是那图\",{\"1\":{\"205\":1}}],[\"实际上是将它们的引用地址复制了一份\",{\"1\":{\"191\":1}}],[\"实际上是创建了一个新的基本数据类型实例\",{\"1\":{\"189\":1}}],[\"实际上\",{\"1\":{\"189\":1}}],[\"实现该方法通常需要递归地复制对象的所有属性\",{\"1\":{\"193\":1}}],[\"实现深拷贝的方法有很多种\",{\"1\":{\"193\":1}}],[\"实现方法以及常见操作\",{\"1\":{\"117\":1}}],[\"实例\",{\"1\":{\"189\":1}}],[\"改变\",{\"1\":{\"189\":1}}],[\"浅拷贝只会创建这些嵌套对象或数组的引用副本\",{\"1\":{\"192\":1}}],[\"浅拷贝只复制了对象的第一层属性值\",{\"1\":{\"192\":1}}],[\"浅拷贝与深拷贝\",{\"0\":{\"191\":1}}],[\"浅拷贝\",{\"0\":{\"187\":1,\"192\":1}}],[\"深拷贝会递归地复制整个对象及其所有嵌套的对象和数组\",{\"1\":{\"193\":1}}],[\"深拷贝和浅拷贝一般情况都是在引用数据类型的基础上所讨论的\",{\"1\":{\"191\":1}}],[\"深拷贝\",{\"0\":{\"187\":1,\"193\":1}}],[\"排队或记录请求\",{\"1\":{\"186\":1,\"212\":1}}],[\"命令模式\",{\"1\":{\"186\":1,\"212\":1}}],[\"命名有严格的规范\",{\"1\":{\"171\":1}}],[\"责任链模式\",{\"1\":{\"186\":1,\"212\":1}}],[\"迭代器模式\",{\"1\":{\"186\":1,\"212\":1}}],[\"订阅模式\",{\"1\":{\"186\":1,\"212\":1}}],[\"观察者模式\",{\"1\":{\"186\":1,\"212\":1}}],[\"模板方法模式\",{\"1\":{\"186\":1,\"212\":1}}],[\"模运算对于处理循环序列非常有用\",{\"1\":{\"149\":1}}],[\"让它们可以互相替换\",{\"1\":{\"186\":1,\"212\":1}}],[\"策略模式\",{\"1\":{\"186\":1,\"212\":1}}],[\"部分\",{\"1\":{\"185\":1,\"216\":1}}],[\"部分构成\",{\"1\":{\"67\":1}}],[\"允许一个对象在其内部状态改变时改变其行为\",{\"1\":{\"186\":1,\"212\":1}}],[\"允许你将对象组合成树形结构来表现\",{\"1\":{\"185\":1,\"216\":1}}],[\"允许用户分配的最大虚拟内存空间\",{\"1\":{\"69\":1}}],[\"组合模式\",{\"1\":{\"185\":1,\"216\":1}}],[\"组成的代码块\",{\"1\":{\"174\":1}}],[\"组成一个块\",{\"1\":{\"162\":1}}],[\"组成\",{\"1\":{\"54\":1,\"171\":1}}],[\"桥接模式\",{\"1\":{\"185\":1,\"216\":1}}],[\"外观模式\",{\"1\":{\"185\":1,\"216\":1}}],[\"外部是不可见的\",{\"1\":{\"174\":1}}],[\"装饰器模式\",{\"1\":{\"185\":1,\"216\":1}}],[\"适配器模式\",{\"1\":{\"185\":1,\"216\":1}}],[\"确保一个类只有一个实例\",{\"1\":{\"184\":1,\"214\":1}}],[\"建造者模式\",{\"1\":{\"184\":1,\"214\":1}}],[\"抽象工厂模式\",{\"1\":{\"184\":1,\"214\":1}}],[\"工厂模式\",{\"1\":{\"184\":1,\"214\":1}}],[\"工具\",{\"2\":{\"13\":1,\"14\":1}}],[\"设计模式\",{\"0\":{\"183\":1}}],[\"设置文件内部指针的当前位置\",{\"1\":{\"179\":1}}],[\"设置查找范围的左右边界\",{\"1\":{\"101\":1}}],[\"重置文件错误指示器\",{\"1\":{\"179\":1}}],[\"向文件写入二进制数据\",{\"1\":{\"179\":1}}],[\"向文件写入字符串\",{\"1\":{\"179\":1}}],[\"向文件写入一个字符\",{\"1\":{\"179\":2}}],[\"向控制台写入一个字符串\",{\"1\":{\"178\":1}}],[\"向控制台写入一个字符\",{\"1\":{\"178\":1}}],[\"打开一个新文件\",{\"1\":{\"179\":1}}],[\"打开文件\",{\"1\":{\"179\":1}}],[\"打印节点\",{\"0\":{\"138\":1}}],[\"文件的内容\",{\"1\":{\"204\":1}}],[\"文件拖放\",{\"0\":{\"201\":1}}],[\"文件改名\",{\"1\":{\"179\":1}}],[\"文件操作函数\",{\"0\":{\"179\":1}}],[\"文件作用域\",{\"1\":{\"174\":1}}],[\"文件作用域和块作用域\",{\"1\":{\"174\":1}}],[\"代理模式\",{\"1\":{\"185\":1,\"216\":1}}],[\"代码块可以嵌套\",{\"1\":{\"174\":1}}],[\"代码块里面声明的\",{\"1\":{\"174\":1}}],[\"代码块外部不可见\",{\"1\":{\"174\":1}}],[\"代表了程序的命令行参数\",{\"1\":{\"167\":1}}],[\"代表移动\",{\"1\":{\"104\":1}}],[\"代表\",{\"1\":{\"70\":1}}],[\"代表一个位置标符\",{\"1\":{\"44\":1}}],[\"代表当前最小堆的数组长度\",{\"1\":{\"38\":1}}],[\"代表当前最小堆的一个父节点\",{\"1\":{\"38\":1}}],[\"凡是在块作用域里面声明的变量\",{\"1\":{\"174\":1}}],[\"块作用域\",{\"1\":{\"174\":1}}],[\"作用域指的是变量生效的范围\",{\"1\":{\"174\":1}}],[\"作为\",{\"1\":{\"23\":1}}],[\"自己不应该起这样的变量名\",{\"1\":{\"171\":1}}],[\"自动确定数组的长度\",{\"1\":{\"112\":1}}],[\"供未来使用\",{\"1\":{\"171\":1}}],[\"供大家理解\",{\"1\":{\"63\":1}}],[\"另外\",{\"1\":{\"171\":2}}],[\"另一些词是命令\",{\"1\":{\"171\":1}}],[\"另一个变量也会受到影响\",{\"1\":{\"191\":1}}],[\"另一个用于表示整个链表\",{\"1\":{\"132\":1}}],[\"另一个代表\",{\"1\":{\"67\":1}}],[\"另一个则是在\",{\"1\":{\"48\":1}}],[\"另一个则是在当前元素之后插入一个值为\",{\"1\":{\"47\":1}}],[\"另一种是使用\",{\"1\":{\"20\":1}}],[\"调用各种函数\",{\"1\":{\"167\":1}}],[\"总之\",{\"1\":{\"167\":1}}],[\"总结一下分别为\",{\"1\":{\"104\":1}}],[\"获取文件内部指针的当前位置\",{\"1\":{\"179\":2}}],[\"获取得这些环境变量\",{\"1\":{\"167\":1}}],[\"获取到数据结构的长度\",{\"1\":{\"83\":1}}],[\"获取到当前数据的长度\",{\"1\":{\"79\":1}}],[\"名称\",{\"1\":{\"167\":1}}],[\"照样能正常运行\",{\"1\":{\"167\":1}}],[\"坚持使用标准的意义在于\",{\"1\":{\"167\":1}}],[\"非标准语法的书写形式\",{\"1\":{\"167\":1}}],[\"非递归方法\",{\"0\":{\"125\":1}}],[\"许多\",{\"1\":{\"167\":1}}],[\"许多数学定理和算法都与素数有关\",{\"1\":{\"107\":1}}],[\"全称为\",{\"1\":{\"167\":3}}],[\"参数\",{\"1\":{\"167\":1}}],[\"参数看完了就来看看具体的逻辑\",{\"1\":{\"38\":1}}],[\"错误代码及其含义\",{\"1\":{\"167\":1}}],[\"若\",{\"1\":{\"167\":1}}],[\"若每写一个新类型就需要实现这三种方法会比较麻烦\",{\"1\":{\"84\":1}}],[\"失去注释作用\",{\"1\":{\"164\":1}}],[\"双引号里面的注释符号\",{\"1\":{\"164\":1}}],[\"双向链表更具灵活性\",{\"1\":{\"140\":1}}],[\"双向链表的节点定义同时包含指向后继节点\",{\"1\":{\"140\":1}}],[\"双向链表记录了两个方向的引用\",{\"1\":{\"140\":1}}],[\"双向链表\",{\"1\":{\"140\":1}}],[\"标签或者创建其他任意一种标签\",{\"1\":{\"201\":1}}],[\"标签中\",{\"1\":{\"200\":1,\"201\":1}}],[\"标准\",{\"0\":{\"178\":1}}],[\"标准中\",{\"1\":{\"167\":1}}],[\"标准新增的语法\",{\"1\":{\"164\":1}}],[\"标记为\",{\"1\":{\"94\":1}}],[\"跟在它后面的代码依然会有效执行\",{\"1\":{\"164\":1}}],[\"跟单个空格的效果是一样的\",{\"1\":{\"163\":1}}],[\"注意\",{\"1\":{\"171\":1}}],[\"注意到一个正整数是不可能写成比自身还大的两个正整数的乘积的\",{\"1\":{\"107\":1}}],[\"注释对实际代码没有影响\",{\"1\":{\"164\":1}}],[\"注释是对代码的说明\",{\"1\":{\"164\":1}}],[\"注释\",{\"0\":{\"164\":1},\"1\":{\"164\":2}}],[\"便于区分代码块\",{\"1\":{\"163\":1}}],[\"强调代码缩进\",{\"1\":{\"163\":1}}],[\"没有缩进的代码也是完全可以运行的\",{\"1\":{\"163\":1}}],[\"没有出现错误时就会调用\",{\"1\":{\"20\":1}}],[\"各个语法单位之间的多个空格\",{\"1\":{\"163\":1}}],[\"赋值\",{\"1\":{\"173\":2}}],[\"赋值运算符是从右到左执行\",{\"1\":{\"173\":1}}],[\"赋值表达式有返回值\",{\"1\":{\"173\":2}}],[\"赋值号\",{\"1\":{\"163\":1}}],[\"赋值为\",{\"1\":{\"160\":1}}],[\"主要用来帮助编译器区分语法单位\",{\"1\":{\"163\":1}}],[\"主要通过表达式完成\",{\"1\":{\"161\":1}}],[\"很多时候不需要返回值\",{\"1\":{\"161\":1}}],[\"表达式都有返回值\",{\"1\":{\"161\":1}}],[\"表达式与语句的区别主要有\",{\"1\":{\"161\":1}}],[\"表达式加上分号\",{\"1\":{\"161\":1}}],[\"表达式是一个计算式\",{\"1\":{\"161\":1}}],[\"表达式\",{\"0\":{\"161\":1}}],[\"表示\",{\"1\":{\"204\":1}}],[\"表示在读取文件时发生的错误\",{\"1\":{\"204\":1}}],[\"表示的含义是数字\",{\"1\":{\"107\":1}}],[\"表示该整数是否为素数\",{\"1\":{\"107\":1}}],[\"称为\",{\"1\":{\"160\":1}}],[\"单例模式\",{\"1\":{\"184\":1,\"214\":1}}],[\"单个分号也是有效语句\",{\"1\":{\"160\":1}}],[\"单向链表的节点包含值和指向下一节点的引用两项数据\",{\"1\":{\"140\":1}}],[\"单向链表\",{\"1\":{\"140\":1}}],[\"单向\",{\"1\":{\"30\":1}}],[\"两个下划线开头的变量名\",{\"1\":{\"171\":1}}],[\"两个语句写在一行\",{\"1\":{\"160\":1}}],[\"两个字段\",{\"1\":{\"42\":1}}],[\"除非碰到事件监听器调用\",{\"1\":{\"201\":1}}],[\"除非有明确规定可以不写分号\",{\"1\":{\"160\":1}}],[\"除此之外\",{\"1\":{\"167\":1}}],[\"除了包含值\",{\"1\":{\"132\":1}}],[\"除了\",{\"1\":{\"38\":1,\"107\":1}}],[\"基本数据类型的值不可变\",{\"1\":{\"189\":1}}],[\"基本数据类型直接存储在栈内存中\",{\"1\":{\"189\":1}}],[\"基本数据类型\",{\"0\":{\"189\":1},\"1\":{\"188\":1}}],[\"基本语法\",{\"0\":{\"159\":1}}],[\"基于此设计\",{\"1\":{\"148\":1}}],[\"基于数组实现\",{\"0\":{\"148\":1,\"156\":1}}],[\"基于链表实现\",{\"0\":{\"147\":1,\"155\":1}}],[\"构造函数来创建\",{\"1\":{\"204\":1}}],[\"构造函数模式\",{\"1\":{\"184\":1,\"214\":1}}],[\"构造函数\",{\"1\":{\"155\":1,\"156\":1}}],[\"构成一个环\",{\"1\":{\"53\":1}}],[\"屏蔽\",{\"1\":{\"154\":1}}],[\"出错\",{\"1\":{\"174\":2}}],[\"出栈\",{\"1\":{\"153\":1,\"155\":1,\"156\":1}}],[\"出队操作\",{\"1\":{\"147\":1,\"148\":1}}],[\"出队\",{\"1\":{\"145\":2}}],[\"入栈与出栈操作分别对应在数组尾部添加元素与删除元素\",{\"1\":{\"156\":1}}],[\"入栈\",{\"1\":{\"153\":1,\"155\":1,\"156\":1}}],[\"入队操作\",{\"1\":{\"147\":1,\"148\":1}}],[\"入队\",{\"1\":{\"145\":2}}],[\"底部称为\",{\"1\":{\"153\":1}}],[\"栈遵循先入后出的原则\",{\"1\":{\"154\":1}}],[\"栈的容量\",{\"1\":{\"156\":1}}],[\"栈的实现\",{\"0\":{\"154\":1}}],[\"栈的常用操作\",{\"0\":{\"153\":1}}],[\"栈底\",{\"1\":{\"153\":1}}],[\"栈顶元素的索引\",{\"1\":{\"156\":1}}],[\"栈顶\",{\"1\":{\"153\":1}}],[\"栈是一种遵循先入后出的逻辑的线性数据结构\",{\"1\":{\"152\":1}}],[\"栈\",{\"0\":{\"152\":1}}],[\"到\",{\"1\":{\"149\":1,\"167\":1}}],[\"到这为止我们已经把\",{\"1\":{\"62\":1}}],[\"减少\",{\"1\":{\"148\":2}}],[\"增加对代码的阅读负担\",{\"1\":{\"160\":1}}],[\"增加\",{\"1\":{\"148\":4}}],[\"索引处\",{\"1\":{\"148\":2}}],[\"索引为\",{\"1\":{\"38\":1}}],[\"定义了一系列算法\",{\"1\":{\"186\":1,\"212\":1}}],[\"定义\",{\"1\":{\"148\":1}}],[\"然而\",{\"1\":{\"148\":1,\"154\":1}}],[\"然后使用\",{\"1\":{\"193\":1}}],[\"然后通过重新赋值将其改为\",{\"1\":{\"189\":1}}],[\"然后依次为\",{\"1\":{\"173\":1}}],[\"然后判断目标值与中间值的大小关系\",{\"1\":{\"101\":1}}],[\"然后设置结构体持有的字符串指针\",{\"1\":{\"97\":1}}],[\"然后在\",{\"1\":{\"46\":1}}],[\"保证队列的尾节点总是指向实际的最后一个节点\",{\"1\":{\"147\":1}}],[\"规定队尾仅可添加节点\",{\"1\":{\"147\":1}}],[\"删除文件\",{\"1\":{\"179\":1}}],[\"删除栈顶元素的操作叫作\",{\"1\":{\"153\":1}}],[\"删除队首元素的操作称为\",{\"1\":{\"145\":1}}],[\"删除节点\",{\"0\":{\"137\":1}}],[\"队头指针\",{\"1\":{\"147\":1}}],[\"队尾指针\",{\"1\":{\"147\":1}}],[\"队尾\",{\"1\":{\"145\":1,\"147\":1}}],[\"队首仅可删除节点\",{\"1\":{\"147\":1}}],[\"队首\",{\"1\":{\"145\":1,\"147\":1}}],[\"队列有两个主要的操作\",{\"1\":{\"145\":1}}],[\"队列的实现\",{\"0\":{\"146\":1}}],[\"队列的常用操作\",{\"0\":{\"145\":1}}],[\"队列的概念\",{\"0\":{\"144\":1}}],[\"队列是一种基础且广泛应用的线性数据结构\",{\"1\":{\"143\":1}}],[\"队列\",{\"0\":{\"143\":1},\"1\":{\"144\":1}}],[\"遵循先进先出的原则\",{\"1\":{\"144\":1}}],[\"queue\",{\"1\":{\"144\":1,\"147\":30,\"148\":37}}],[\"quicksort\",{\"1\":{\"79\":1}}],[\"操作符或者检查构造函数名称\",{\"1\":{\"190\":1}}],[\"操作系统调度等领域具有重要作用\",{\"1\":{\"143\":1}}],[\"操作向上层进行调整\",{\"1\":{\"38\":1}}],[\"消息传递\",{\"1\":{\"143\":1}}],[\"尤其在多任务处理\",{\"1\":{\"143\":1}}],[\"任意节点都可以视作头节点\",{\"1\":{\"140\":1}}],[\"首尾相接\",{\"1\":{\"140\":1}}],[\"首先创建一个\",{\"1\":{\"204\":1}}],[\"首先移动\",{\"1\":{\"104\":1}}],[\"首先可以看到该方法先判断了两种情况\",{\"1\":{\"97\":1}}],[\"首先第一是名为\",{\"1\":{\"67\":1}}],[\"首先从指针的命名中我们也可以得出是指向下一个或上一个\",{\"1\":{\"54\":1}}],[\"首先计算出当前数组中最后一个元素所在节点位置即当前元素索引\",{\"1\":{\"38\":2}}],[\"首先来看传入的函数参数分别是什么\",{\"1\":{\"38\":1}}],[\"首先我们先忽略细节\",{\"1\":{\"79\":1}}],[\"首先我们先从\",{\"1\":{\"75\":1}}],[\"首先我们先来看看扩容规则\",{\"1\":{\"70\":1}}],[\"首先我们先来看一下二叉树的数据结构\",{\"1\":{\"118\":1}}],[\"首先我们先来看一下\",{\"1\":{\"19\":1,\"67\":1,\"90\":1}}],[\"首先我们先开看一下\",{\"1\":{\"38\":1}}],[\"首先在此之前我们需要对堆\",{\"1\":{\"38\":1}}],[\"首先具体细节我们暂时先不提及\",{\"1\":{\"20\":1}}],[\"尾节点视为栈底\",{\"1\":{\"155\":1}}],[\"尾节点\",{\"1\":{\"147\":1}}],[\"尾节点指向空\",{\"1\":{\"140\":1}}],[\"尾部称为\",{\"1\":{\"145\":1}}],[\"尾部添加元素\",{\"1\":{\"70\":1}}],[\"常见的链表类型包括三种\",{\"1\":{\"140\":1}}],[\"常见链表类型\",{\"0\":{\"140\":1}}],[\"完整代码\",{\"0\":{\"139\":1}}],[\"完成之后\",{\"1\":{\"204\":4}}],[\"完成解题\",{\"1\":{\"104\":1}}],[\"完成初始化操作\",{\"1\":{\"45\":1}}],[\"释放\",{\"1\":{\"137\":1,\"139\":1}}],[\"清除已删除节点的\",{\"1\":{\"137\":1,\"139\":1}}],[\"找到了返回与给定值相同的节点\",{\"1\":{\"136\":1,\"139\":1}}],[\"找素数\",{\"0\":{\"107\":1}}],[\"插入节点\",{\"0\":{\"135\":1}}],[\"插入排序相对来说大家都很了解\",{\"1\":{\"80\":1}}],[\"初始化指针域\",{\"1\":{\"134\":1,\"139\":1}}],[\"初始化数据域\",{\"1\":{\"134\":1,\"139\":1}}],[\"初始化链表\",{\"1\":{\"132\":2,\"139\":1}}],[\"程序本身的名称也算作该字符串\",{\"1\":{\"167\":1}}],[\"程序执行的代码\",{\"1\":{\"167\":3}}],[\"程序执行是从\",{\"1\":{\"167\":1}}],[\"程序作者一定要对内存进行初始化操作\",{\"1\":{\"134\":1}}],[\"程序求解\",{\"1\":{\"104\":1}}],[\"由于动态内存区可被重复使用\",{\"1\":{\"134\":1}}],[\"分配内存空间\",{\"1\":{\"134\":1,\"139\":1}}],[\"分配内存时\",{\"1\":{\"134\":1}}],[\"分配的内存可以确保是地址连续的内存空间\",{\"1\":{\"134\":1}}],[\"分别视为\",{\"1\":{\"147\":1}}],[\"分别指向数组的第一个元素和最后一个元素\",{\"1\":{\"101\":1}}],[\"分别代表\",{\"1\":{\"67\":1}}],[\"分别为指向左右两边的指针\",{\"1\":{\"118\":1}}],[\"分别为字节数组长度为\",{\"1\":{\"97\":1}}],[\"分别为插入排序\",{\"1\":{\"79\":1}}],[\"分别为\",{\"1\":{\"42\":1}}],[\"分别是去寻找当前元素的下一个或上一个元素\",{\"1\":{\"43\":1}}],[\"分别是\",{\"1\":{\"25\":1}}],[\"分别是元素类型\",{\"1\":{\"19\":1}}],[\"创建一个\",{\"1\":{\"201\":1}}],[\"创建一个数值变量\",{\"1\":{\"189\":1}}],[\"创建\",{\"1\":{\"200\":1}}],[\"创建型设计模式\",{\"0\":{\"184\":1,\"211\":1,\"213\":1,\"214\":1,\"215\":1}}],[\"创建新节点函数\",{\"1\":{\"134\":1}}],[\"创建链表节点一般情况下需要使用\",{\"1\":{\"134\":1}}],[\"创建节点\",{\"0\":{\"119\":1,\"134\":1}}],[\"永远指向链表中第一个节点的位置\",{\"1\":{\"132\":1}}],[\"头文件\",{\"1\":{\"177\":1}}],[\"头插法\",{\"1\":{\"155\":1}}],[\"头指针只声明没有分配存储空间\",{\"1\":{\"132\":1}}],[\"头指针与头节点的区别\",{\"1\":{\"132\":1}}],[\"头结点是整个链表的入口\",{\"1\":{\"132\":1}}],[\"头节点与尾节点均指向将要入队的节点\",{\"1\":{\"147\":1}}],[\"头节点进行了声明并分配了一个结点大小的实际物理内存\",{\"1\":{\"132\":1}}],[\"头节点通常包含指向下一个节点的指针\",{\"1\":{\"132\":1}}],[\"头节点\",{\"1\":{\"132\":2,\"147\":1}}],[\"一次为多个变量赋值\",{\"1\":{\"173\":1}}],[\"一旦声明\",{\"1\":{\"172\":1}}],[\"一定不能忘记写结束符号\",{\"1\":{\"164\":1}}],[\"一是本身存储的数据信息\",{\"1\":{\"131\":1}}],[\"一个语句也可以写成多行\",{\"1\":{\"160\":1}}],[\"一个用于表示链表节点\",{\"1\":{\"132\":1}}],[\"一个正值的长度\",{\"1\":{\"111\":1}}],[\"一个素数只有两个正因数\",{\"1\":{\"107\":1}}],[\"一个完整且正常的二分查找并不是很容易可以完成的\",{\"1\":{\"101\":1}}],[\"一个\",{\"1\":{\"68\":1}}],[\"一个是在\",{\"1\":{\"48\":1}}],[\"一个是在当前元素之前插入一个值为\",{\"1\":{\"47\":1}}],[\"内容为\",{\"1\":{\"204\":1}}],[\"内层代码块可以使用外层声明的变量\",{\"1\":{\"174\":1}}],[\"内层和外层都有一个变量\",{\"1\":{\"174\":1}}],[\"内部就可以读取这个变量\",{\"1\":{\"174\":1}}],[\"内部可以分行\",{\"1\":{\"164\":1}}],[\"内部的实现原理是双链表\",{\"1\":{\"41\":1}}],[\"内存可能无法提供如此大的连续空间\",{\"1\":{\"131\":1}}],[\"存储栈元素的数组\",{\"1\":{\"156\":1}}],[\"存储数组的内存空间必须是连续的\",{\"1\":{\"131\":1}}],[\"存在的两种方法\",{\"1\":{\"43\":1}}],[\"存在两种方法\",{\"1\":{\"42\":1,\"43\":1}}],[\"空格还用来表示缩进\",{\"1\":{\"163\":1}}],[\"空格就不是必须的\",{\"1\":{\"163\":1}}],[\"空格\",{\"0\":{\"163\":1}}],[\"空语句\",{\"1\":{\"160\":1}}],[\"空闲的内存空间可能散落在内存各处\",{\"1\":{\"131\":1}}],[\"空就直接调用\",{\"1\":{\"57\":1}}],[\"链表和数组都符合要求\",{\"1\":{\"146\":1}}],[\"链表比数组占用更多的内存空间\",{\"1\":{\"132\":1}}],[\"链表节点\",{\"1\":{\"132\":1}}],[\"链表节点结构体定义\",{\"1\":{\"132\":2,\"139\":1}}],[\"链表大小\",{\"1\":{\"132\":1,\"139\":1}}],[\"链表头结点\",{\"1\":{\"132\":1,\"139\":1}}],[\"链表结构体定义\",{\"1\":{\"132\":1,\"139\":1}}],[\"链表还拥有一个头指针\",{\"1\":{\"132\":1}}],[\"链表的常用操作\",{\"0\":{\"133\":1}}],[\"链表的首个节点被称为\",{\"1\":{\"132\":1}}],[\"链表的结构定义\",{\"0\":{\"132\":1}}],[\"链表中的每个节点由两部分构成\",{\"1\":{\"131\":1}}],[\"链表是一种线性数据结构\",{\"1\":{\"131\":1}}],[\"链表\",{\"0\":{\"131\":1}}],[\"链表元素中且结构体中\",{\"1\":{\"42\":1}}],[\"前者的数组成员都是同一个数据类型\",{\"1\":{\"205\":1}}],[\"前者相当于两端都闭区间\",{\"1\":{\"101\":1}}],[\"前端获取文件的几种情况\",{\"0\":{\"199\":1}}],[\"前后有没有空格都可以\",{\"1\":{\"163\":1}}],[\"前序\",{\"0\":{\"122\":1,\"126\":1}}],[\"遍历节点\",{\"0\":{\"121\":1,\"125\":1}}],[\"查询节点\",{\"0\":{\"120\":1}}],[\"查找链表中的第一个具有给定值\",{\"1\":{\"136\":1,\"139\":1}}],[\"查找节点\",{\"0\":{\"136\":1}}],[\"查找更多素数\",{\"1\":{\"107\":1}}],[\"查找素数\",{\"1\":{\"107\":1}}],[\"查找失败\",{\"1\":{\"101\":1}}],[\"树和红黑树\",{\"1\":{\"117\":1}}],[\"树中最小的元素是根\",{\"1\":{\"38\":1}}],[\"平衡二叉树\",{\"1\":{\"117\":1}}],[\"满二叉树\",{\"1\":{\"117\":1}}],[\"根据obj的类型来决定新创建对象的类型\",{\"1\":{\"193\":1}}],[\"根据节点间的关系和附加条件\",{\"1\":{\"117\":1}}],[\"根据传入的\",{\"1\":{\"38\":1}}],[\"二进制大对象\",{\"1\":{\"197\":1}}],[\"二是指向后续节点的指针\",{\"1\":{\"131\":1}}],[\"二叉树有多种变体\",{\"1\":{\"117\":1}}],[\"二叉树既可以为空\",{\"1\":{\"117\":1}}],[\"二叉树是一种每个节点最多有两个子节点的树形数据结构\",{\"1\":{\"117\":1}}],[\"二叉树是计算机科学中一种基本且广泛应用的数据结构\",{\"1\":{\"117\":1}}],[\"二叉树\",{\"0\":{\"117\":1}}],[\"二分查找动态演示\",{\"1\":{\"101\":1}}],[\"二分查找的具体实现过程如下\",{\"1\":{\"101\":1}}],[\"二分查找又称折半查找\",{\"1\":{\"101\":1}}],[\"二分查找\",{\"0\":{\"101\":1}}],[\"访问数组元素\",{\"0\":{\"113\":1}}],[\"省略成员数量时\",{\"1\":{\"112\":1}}],[\"必须把变量的类型告诉编译器\",{\"1\":{\"172\":1}}],[\"必须先声明后使用\",{\"1\":{\"172\":1}}],[\"必须在数组声明时赋值\",{\"1\":{\"112\":1}}],[\"必须小于或等于\",{\"1\":{\"107\":1}}],[\"少于数组的元素数量\",{\"1\":{\"112\":1}}],[\"报错\",{\"1\":{\"112\":3}}],[\"号元素\",{\"1\":{\"111\":1}}],[\"号元素一直到第\",{\"1\":{\"111\":1}}],[\"号圆盘\",{\"1\":{\"104\":1}}],[\"号圆盘从塔\",{\"1\":{\"104\":1}}],[\"变量最初存储的是整数\",{\"1\":{\"189\":1}}],[\"变量一定要赋值以后才能使用\",{\"1\":{\"173\":1}}],[\"变量会是一个随机的值\",{\"1\":{\"173\":1}}],[\"变量的作用域\",{\"0\":{\"174\":1}}],[\"变量的值应该与类型一致\",{\"1\":{\"173\":1}}],[\"变量的赋值\",{\"0\":{\"173\":1}}],[\"变量的类型就不能在运行时修改\",{\"1\":{\"172\":1}}],[\"变量的声明和赋值\",{\"1\":{\"173\":1}}],[\"变量的声明\",{\"0\":{\"172\":1}}],[\"变量名区分大小写\",{\"1\":{\"171\":1}}],[\"变量名\",{\"0\":{\"171\":1}}],[\"变量名称\",{\"1\":{\"111\":1}}],[\"变量\",{\"0\":{\"170\":1},\"1\":{\"173\":1,\"174\":2}}],[\"变量赋值\",{\"1\":{\"160\":1}}],[\"变量声明\",{\"1\":{\"160\":1}}],[\"变量声明语句\",{\"1\":{\"160\":1}}],[\"变成父节点进行下一次循环\",{\"1\":{\"38\":1}}],[\"方括号里面是数组的元素数量\",{\"1\":{\"110\":1,\"111\":1}}],[\"方法启动的读取结果\",{\"1\":{\"204\":1}}],[\"方法为例\",{\"1\":{\"204\":1}}],[\"方法为什么只需要一个\",{\"1\":{\"84\":1}}],[\"方法叫做\",{\"1\":{\"167\":1}}],[\"方法也是一个普通的函数\",{\"1\":{\"167\":1}}],[\"方法执行到末尾没有遇到返回语句\",{\"1\":{\"167\":1}}],[\"方法得到的内存不会执行内存清零操作\",{\"1\":{\"134\":1}}],[\"方法创建新的字节切片并将字符串中的内容拷贝过去\",{\"1\":{\"98\":1}}],[\"方法处理\",{\"1\":{\"94\":1}}],[\"方法将\",{\"1\":{\"193\":1}}],[\"方法将对象转换为\",{\"1\":{\"193\":1}}],[\"方法将原\",{\"1\":{\"97\":1}}],[\"方法将扫描到的内容类型\",{\"1\":{\"94\":1}}],[\"方法将最后一个元素与堆顶元素交换\",{\"1\":{\"38\":1}}],[\"方法会将传入的字符串指针转换成\",{\"1\":{\"97\":1}}],[\"方法会将非反引号的所有字符都划分到当前字符串的范围中\",{\"1\":{\"94\":1}}],[\"方法会检查所传入的切片\",{\"1\":{\"85\":1}}],[\"方法会对传入的切片\",{\"1\":{\"84\":1}}],[\"方法排序方法中的函数中的\",{\"1\":{\"84\":1}}],[\"方法里所调用的排序方法并不相同\",{\"1\":{\"84\":1}}],[\"方法它们唯一的区别在于\",{\"1\":{\"84\":1}}],[\"方法它进行哪些操作\",{\"1\":{\"56\":1}}],[\"方法相比于\",{\"1\":{\"84\":1}}],[\"方法通过调用\",{\"1\":{\"84\":1}}],[\"方法通过遍历元素的方式来计算数组中元素的数量\",{\"1\":{\"20\":1}}],[\"方法即可进行排序操作\",{\"1\":{\"84\":1}}],[\"方法则需要指出具体的元素比较项\",{\"1\":{\"84\":1}}],[\"方法就可以进行排序操作\",{\"1\":{\"84\":1}}],[\"方法只需要提供给定的\",{\"1\":{\"84\":1}}],[\"方法用来检查我们的数据是否进行过排序\",{\"1\":{\"83\":1}}],[\"方法实现逻辑基本一致\",{\"1\":{\"82\":1}}],[\"方法返回\",{\"1\":{\"80\":1}}],[\"方法返回了一个初始化的\",{\"1\":{\"45\":1}}],[\"方法完成排序\",{\"1\":{\"79\":1}}],[\"方法了\",{\"1\":{\"79\":1}}],[\"方法是所有\",{\"1\":{\"167\":1}}],[\"方法是将字符串转换为字节片\",{\"1\":{\"98\":1}}],[\"方法是将字节片转换为字符串\",{\"1\":{\"97\":1}}],[\"方法是它用来解析使用反引号声明的字符串\",{\"1\":{\"94\":1}}],[\"方法是它用来解析使用双引号声明的标准字符串\",{\"1\":{\"93\":1}}],[\"方法是如何实现的呢\",{\"1\":{\"84\":1}}],[\"方法是对于集合中位于\",{\"1\":{\"76\":2}}],[\"方法是有返回值的吗\",{\"1\":{\"38\":1}}],[\"方法从注解中我们可以知道\",{\"1\":{\"76\":1}}],[\"方法从下到上依次校验\",{\"1\":{\"38\":1}}],[\"方法基本一致\",{\"1\":{\"62\":1,\"85\":1}}],[\"方法便利下一个元素并进行判断是否为起始元素\",{\"1\":{\"61\":1}}],[\"方法操作\",{\"1\":{\"60\":1}}],[\"方法来实现移除操作\",{\"1\":{\"60\":1}}],[\"方法移动当前\",{\"1\":{\"60\":1}}],[\"方法的大体实现逻辑\",{\"1\":{\"79\":1}}],[\"方法的代码实现\",{\"1\":{\"79\":1}}],[\"方法的实现如下图所示\",{\"1\":{\"79\":1}}],[\"方法的实现逻辑基本是一样的\",{\"1\":{\"62\":1}}],[\"方法的扩展\",{\"1\":{\"60\":1}}],[\"方法的调用\",{\"1\":{\"60\":1}}],[\"方法的封装\",{\"1\":{\"46\":1}}],[\"方法其实相差不大\",{\"1\":{\"58\":1}}],[\"方法接收\",{\"1\":{\"56\":1}}],[\"方法大致是一致的\",{\"1\":{\"49\":1}}],[\"方法上套了一层\",{\"1\":{\"45\":1}}],[\"方法我们可以发现该方法只是在\",{\"1\":{\"45\":1}}],[\"方法获取到当前存储数据长度的最小位数\",{\"1\":{\"79\":1}}],[\"方法获取\",{\"1\":{\"44\":1}}],[\"方法与\",{\"1\":{\"43\":2,\"44\":6,\"47\":1,\"48\":2,\"49\":3,\"57\":1,\"58\":1,\"62\":3,\"84\":2}}],[\"方法代表当前\",{\"1\":{\"42\":2}}],[\"方法中的第一句开始执行\",{\"1\":{\"167\":1}}],[\"方法中的部分逻辑等效\",{\"1\":{\"38\":1}}],[\"方法中\",{\"1\":{\"60\":1}}],[\"方法中就已经保障的\",{\"1\":{\"57\":1}}],[\"方法中被调用\",{\"1\":{\"56\":1}}],[\"方法中我们可以看到\",{\"1\":{\"48\":1,\"79\":1,\"93\":1}}],[\"方法中调用\",{\"1\":{\"20\":1}}],[\"方法没有进行操作时则说明目标位置在堆的最后一层\",{\"1\":{\"38\":1}}],[\"方法进行排序\",{\"1\":{\"85\":1}}],[\"方法进行遍历元素\",{\"1\":{\"62\":1}}],[\"方法进行判断\",{\"1\":{\"38\":1}}],[\"方法进行初始化操作\",{\"1\":{\"38\":1}}],[\"方法类似\",{\"1\":{\"38\":1}}],[\"方法弹出并删除该元素\",{\"1\":{\"38\":1}}],[\"方法对堆从上到下调整各节点位置使之保持最小堆属性\",{\"1\":{\"38\":1}}],[\"方法共为五个方法\",{\"1\":{\"38\":1}}],[\"方法\",{\"1\":{\"20\":4,\"38\":7,\"43\":2,\"44\":6,\"45\":2,\"46\":2,\"47\":1,\"48\":2,\"49\":2,\"56\":1,\"57\":2,\"58\":1,\"59\":2,\"60\":1,\"61\":1,\"62\":3,\"84\":1,\"134\":1,\"167\":2,\"202\":1}}],[\"至少有一个因数\",{\"1\":{\"107\":1}}],[\"假设\",{\"1\":{\"107\":1}}],[\"假设一个整数\",{\"1\":{\"107\":1}}],[\"假设我们要判断\",{\"1\":{\"107\":1}}],[\"证明过程\",{\"1\":{\"107\":1}}],[\"同理此种情况也适用于对象与函数\",{\"1\":{\"192\":1}}],[\"同样\",{\"1\":{\"114\":1}}],[\"同样的原因\",{\"1\":{\"112\":1}}],[\"同样地\",{\"1\":{\"107\":1}}],[\"同时保持类的单一职责原则\",{\"1\":{\"185\":1,\"216\":1}}],[\"同时对每一个元素赋值\",{\"1\":{\"112\":1}}],[\"同时遵守以下规则\",{\"1\":{\"104\":1}}],[\"同时通过\",{\"1\":{\"94\":1}}],[\"同时也提醒着使用者应该做什么\",{\"1\":{\"33\":1}}],[\"同时\",{\"1\":{\"30\":1}}],[\"小于或等于\",{\"1\":{\"107\":1}}],[\"小于\",{\"1\":{\"107\":2}}],[\"小于则直接返回空\",{\"1\":{\"55\":1}}],[\"开始编号\",{\"1\":{\"111\":1}}],[\"开始遍历\",{\"1\":{\"107\":1}}],[\"开始遍历到\",{\"1\":{\"107\":1}}],[\"开始遍历到该整数的平方根是一种有效的算法\",{\"1\":{\"107\":1}}],[\"开始遍历到该整数的平方根\",{\"1\":{\"107\":2}}],[\"开始向前一个元素进行比较\",{\"1\":{\"80\":1}}],[\"特别是在数论领域\",{\"1\":{\"107\":1}}],[\"整体\",{\"1\":{\"185\":1,\"216\":1}}],[\"整数\",{\"1\":{\"172\":1}}],[\"整除\",{\"1\":{\"107\":2}}],[\"整型数组\",{\"1\":{\"101\":1}}],[\"例如修改文件中某一段数据时\",{\"1\":{\"205\":1}}],[\"例如它不能处理函数和\",{\"1\":{\"193\":1}}],[\"例如使用\",{\"1\":{\"193\":1}}],[\"例如\",{\"1\":{\"107\":2,\"149\":2}}],[\"素数在数学中有着重要的地位\",{\"1\":{\"107\":1}}],[\"素数\",{\"1\":{\"107\":2}}],[\"步\",{\"1\":{\"104\":3}}],[\"移动\",{\"1\":{\"104\":3}}],[\"移动第\",{\"1\":{\"104\":1}}],[\"移动到塔\",{\"1\":{\"104\":11}}],[\"移动到目标柱子\",{\"1\":{\"104\":1}}],[\"层为二的三次方减一\",{\"1\":{\"104\":1}}],[\"层为二的二次方减一\",{\"1\":{\"104\":1}}],[\"层为二的一次方减一\",{\"1\":{\"104\":1}}],[\"层圆盘需要\",{\"1\":{\"104\":3}}],[\"层圆盘的步数\",{\"1\":{\"104\":1}}],[\"层圆盘就是一步\",{\"1\":{\"104\":1}}],[\"层圆盘\",{\"1\":{\"104\":3}}],[\"层的我们从上图中可以看出\",{\"1\":{\"104\":1}}],[\"层的汉诺塔问题\",{\"1\":{\"104\":3}}],[\"层汉诺塔问题时\",{\"1\":{\"104\":1}}],[\"此时链表的灵活性优势就体现出来了\",{\"1\":{\"131\":1}}],[\"此时就展现了\",{\"1\":{\"76\":1}}],[\"此刻要解决的就是拥有二个圆盘的汉诺塔问题\",{\"1\":{\"104\":1}}],[\"换句话说\",{\"1\":{\"107\":1,\"154\":1}}],[\"换而言之要想解决拥有三个圆盘的汉诺塔问题\",{\"1\":{\"104\":1}}],[\"换成了元素所要存储的值\",{\"1\":{\"46\":1}}],[\"等获取远端文件\",{\"1\":{\"203\":1}}],[\"等同于单个空格\",{\"1\":{\"163\":1}}],[\"等同于\",{\"1\":{\"112\":5,\"163\":1,\"172\":1}}],[\"等不是素数\",{\"1\":{\"107\":1}}],[\"等都是素数\",{\"1\":{\"107\":1}}],[\"等等这个问题与我们最开始讨论的问题是不是有些相似\",{\"1\":{\"104\":1}}],[\"等于等号右边的值\",{\"1\":{\"173\":1}}],[\"等于\",{\"1\":{\"79\":1,\"107\":1}}],[\"或原始数据缓冲区的内容\",{\"1\":{\"204\":1}}],[\"或\",{\"1\":{\"107\":1,\"167\":1,\"201\":1,\"203\":1,\"204\":3}}],[\"或是\",{\"1\":{\"104\":1}}],[\"或者为命令行中启动该程序的字符串的数量\",{\"1\":{\"167\":1}}],[\"或者它的指针指向\",{\"1\":{\"132\":1}}],[\"或者\",{\"1\":{\"97\":1}}],[\"或者其他复杂数据格式的场景下非常方便\",{\"1\":{\"91\":1}}],[\"甚至我们可以将它忽略掉\",{\"1\":{\"104\":1}}],[\"现在最大的圆盘已经抵达了它应在的位置\",{\"1\":{\"104\":1}}],[\"现实中的排序算法要复杂很多\",{\"1\":{\"79\":1}}],[\"率先落入到塔\",{\"1\":{\"104\":1}}],[\"比\",{\"1\":{\"167\":1}}],[\"比如函数\",{\"1\":{\"174\":1}}],[\"比如变量声明语句\",{\"1\":{\"161\":1}}],[\"比如\",{\"1\":{\"107\":1,\"171\":2,\"173\":1,\"198\":1}}],[\"比如说\",{\"1\":{\"104\":1}}],[\"比我们的索引位要多\",{\"1\":{\"38\":1}}],[\"解释为普通符号\",{\"1\":{\"164\":1}}],[\"解题思路\",{\"1\":{\"104\":1}}],[\"解析\",{\"0\":{\"92\":1}}],[\"塔移出的圆盘重新移回\",{\"1\":{\"104\":1}}],[\"塔\",{\"1\":{\"104\":4}}],[\"提供了多种数据类型\",{\"1\":{\"188\":1}}],[\"提供了一个统一的接口\",{\"1\":{\"185\":1,\"216\":1}}],[\"提供一种方法顺序访问聚合对象的元素\",{\"1\":{\"186\":1,\"212\":1}}],[\"提供一个接口\",{\"1\":{\"184\":1,\"214\":1}}],[\"提供一个接口用于创建一系列相关或依赖对象\",{\"1\":{\"184\":1,\"214\":1}}],[\"提示\",{\"1\":{\"104\":1}}],[\"提效工具\",{\"0\":{\"12\":1}}],[\"上传\",{\"0\":{\"200\":1}}],[\"上一个节点\",{\"1\":{\"140\":1}}],[\"上面示例中\",{\"1\":{\"113\":1}}],[\"上\",{\"1\":{\"104\":1}}],[\"上的三个圆盘全部移动到塔\",{\"1\":{\"104\":1}}],[\"上的两个圆盘全部移动到塔\",{\"1\":{\"104\":2}}],[\"上的元素其本质上也就是在修改所引用的底层\",{\"1\":{\"68\":1}}],[\"上的元素\",{\"1\":{\"46\":1,\"47\":1}}],[\"上的方法\",{\"1\":{\"46\":1}}],[\"上的\",{\"1\":{\"38\":1}}],[\"问题\",{\"1\":{\"104\":1}}],[\"问题解决能力和创新意识\",{\"1\":{\"6\":1}}],[\"大写英文字母开头的变量名\",{\"1\":{\"171\":1}}],[\"大括号的结尾不需要添加分号\",{\"1\":{\"162\":1}}],[\"大于\",{\"1\":{\"107\":2,\"167\":2}}],[\"大圆盘不能放在小圆盘上面\",{\"1\":{\"104\":1}}],[\"大家可以自行查看帮助理解\",{\"1\":{\"49\":1}}],[\"大家好\",{\"0\":{\"1\":1}}],[\"目标是将若干个圆盘从起始柱子移动到目标柱子\",{\"1\":{\"104\":1}}],[\"源自于印度数学家毕达哥拉斯所提出的问题\",{\"1\":{\"104\":1}}],[\"汉诺塔中只有一个圆盘直接将圆盘从塔\",{\"1\":{\"104\":1}}],[\"汉诺塔游戏看起来很简单\",{\"1\":{\"104\":1}}],[\"汉诺塔是一个经典的益智游戏\",{\"1\":{\"104\":1}}],[\"汉诺塔\",{\"0\":{\"104\":1}}],[\"算法训练\",{\"2\":{\"103\":1,\"106\":1,\"109\":1}}],[\"行为型设计模式\",{\"0\":{\"186\":1,\"212\":1}}],[\"行\",{\"1\":{\"101\":1}}],[\"行由于\",{\"1\":{\"101\":1}}],[\"因此栈可以视为一种受限制的数组或链表\",{\"1\":{\"154\":1}}],[\"因此我们只能在栈顶添加或删除元素\",{\"1\":{\"154\":1}}],[\"因此我们可以排除这种情况\",{\"1\":{\"107\":2}}],[\"因此在相同数据量下\",{\"1\":{\"132\":1}}],[\"因此不知不觉就更改了其他变量的值\",{\"1\":{\"113\":1}}],[\"因此\",{\"1\":{\"101\":1,\"107\":6,\"113\":1,\"134\":1,\"191\":1,\"192\":1}}],[\"因为编译器这里不借助空格\",{\"1\":{\"163\":1}}],[\"因为语句用来执行某个命令\",{\"1\":{\"161\":1}}],[\"因为数组中每个元素的类型都是一样的\",{\"1\":{\"114\":1}}],[\"因为是制定的元素赋值\",{\"1\":{\"112\":1}}],[\"因为\",{\"1\":{\"107\":3}}],[\"因为它们各自拥有独立的内存空间\",{\"1\":{\"193\":1}}],[\"因为它们共享相同的引用\",{\"1\":{\"192\":1}}],[\"因为它们可以被其他的正整数整除\",{\"1\":{\"107\":1}}],[\"因为它们只能被\",{\"1\":{\"107\":1}}],[\"因为我们只要完成二个圆盘的汉诺塔问题\",{\"1\":{\"104\":1}}],[\"因为初始化\",{\"1\":{\"101\":1}}],[\"因为双引号不再负责标记字符串的开始和结束\",{\"1\":{\"91\":1}}],[\"因为在后面的方法中初始化操作使用的都是该方法\",{\"1\":{\"45\":1}}],[\"直到找到目标值或者查找范围为空为止\",{\"1\":{\"101\":1}}],[\"直接修改链表头指向下一个节点\",{\"1\":{\"137\":1,\"139\":1}}],[\"直接在函数方法中创建实例\",{\"1\":{\"46\":1}}],[\"直接返回\",{\"1\":{\"44\":1,\"193\":1}}],[\"直接来来讲一下这两个方法的具体逻辑\",{\"1\":{\"44\":1}}],[\"则直接默认执行了\",{\"1\":{\"167\":1}}],[\"则需要先将上面的盘子依次移走\",{\"1\":{\"152\":1}}],[\"则得到一个环形链表\",{\"1\":{\"140\":1}}],[\"则无需删除\",{\"1\":{\"137\":1,\"139\":1}}],[\"则将节点设为头节点\",{\"1\":{\"135\":1,\"139\":1}}],[\"则返回\",{\"1\":{\"134\":1,\"136\":1,\"139\":1}}],[\"则头结点不存在\",{\"1\":{\"132\":1}}],[\"则表示数字\",{\"1\":{\"107\":1}}],[\"则说明目标值不存在于数组中\",{\"1\":{\"101\":1}}],[\"则在右半部分继续查找\",{\"1\":{\"101\":2}}],[\"则在左半部分继续查找\",{\"1\":{\"101\":2}}],[\"则查找成功\",{\"1\":{\"101\":2}}],[\"则不是素数\",{\"1\":{\"107\":2}}],[\"则不修改\",{\"1\":{\"47\":1}}],[\"则不会做任何操作\",{\"1\":{\"45\":1}}],[\"否则很容易导致错误\",{\"1\":{\"164\":1}}],[\"否则编译时会报错\",{\"1\":{\"112\":2}}],[\"否则\",{\"1\":{\"107\":2}}],[\"否则返回\",{\"1\":{\"101\":1}}],[\"否的话父子节点数值交换且之前记录下来的子节点\",{\"1\":{\"38\":1}}],[\"写一个函数搜索\",{\"1\":{\"101\":1}}],[\"升序\",{\"1\":{\"101\":1}}],[\"给定一个拥有\",{\"1\":{\"101\":1}}],[\"拼接\",{\"0\":{\"95\":1}}],[\"无论是标准字符串还是原始字符串都会被标记成\",{\"1\":{\"94\":1}}],[\"无缓存的\",{\"1\":{\"35\":1}}],[\"无缓存\",{\"1\":{\"29\":3}}],[\"`\",{\"1\":{\"91\":2,\"92\":1,\"94\":1}}],[\"`hello\",{\"1\":{\"91\":1}}],[\"虽然\",{\"1\":{\"173\":1}}],[\"虽然毫无作用\",{\"1\":{\"160\":1}}],[\"虽然字符串往往都被看做是一个整体\",{\"1\":{\"91\":1}}],[\"虽然堆在物理结构上是一个一维的数组\",{\"1\":{\"38\":1}}],[\"符号避免编译器的解析错误\",{\"1\":{\"91\":1}}],[\"符号便可\",{\"1\":{\"31\":1,\"32\":1}}],[\"使多个对象都有机会处理请求\",{\"1\":{\"186\":1,\"212\":1}}],[\"使它们都可以独立地变化\",{\"1\":{\"185\":1,\"216\":1}}],[\"使其对外表现的逻辑符合栈的特性\",{\"1\":{\"154\":1}}],[\"使其与链表彻底隔离\",{\"1\":{\"137\":1,\"139\":1}}],[\"使得原本由于接口不兼容而不能一起工作的类能够协同工作\",{\"1\":{\"185\":1,\"216\":1}}],[\"使得相同的构建过程可以创建不同的表示\",{\"1\":{\"184\":1,\"214\":1}}],[\"使得紧跟在\",{\"1\":{\"113\":1}}],[\"使得我们将最大的圆盘从塔\",{\"1\":{\"104\":1}}],[\"使得他们可以一一对应\",{\"1\":{\"38\":1}}],[\"使用该方法读取\",{\"1\":{\"204\":1}}],[\"使用时需注意此项功能仅在一些支持的浏览器的安全上下文\",{\"1\":{\"202\":1}}],[\"使用数组实现栈时\",{\"1\":{\"156\":1}}],[\"使用链表实现栈时\",{\"1\":{\"155\":1}}],[\"使用\",{\"1\":{\"134\":1,\"204\":1}}],[\"使用大括号赋值时\",{\"1\":{\"112\":1}}],[\"使用反引号声明的原始字符串的解析规则就非常简单了\",{\"1\":{\"94\":1}}],[\"使用双引号声明的字符串和其他语言中的字符串没有太多的区别\",{\"1\":{\"91\":1}}],[\"多个对象间存在一对多的依赖关系\",{\"1\":{\"186\":1,\"212\":1}}],[\"多个相同类型变量的赋值\",{\"1\":{\"173\":1}}],[\"多层级的代码有没有缩进\",{\"1\":{\"163\":1}}],[\"多次使用\",{\"1\":{\"134\":1}}],[\"多出一个表示容量的\",{\"1\":{\"90\":1}}],[\"多数情况下是规范双向\",{\"1\":{\"35\":1}}],[\"字符\",{\"1\":{\"152\":1}}],[\"字符串以表示所读取文件的内容\",{\"1\":{\"204\":1}}],[\"字符串解析为新的对象\",{\"1\":{\"193\":1}}],[\"字符串\",{\"1\":{\"193\":1}}],[\"字符串操作函数\",{\"0\":{\"180\":1}}],[\"字符串类型的值是不可变的\",{\"1\":{\"89\":1}}],[\"字符串可以为空\",{\"1\":{\"89\":1}}],[\"字节\",{\"1\":{\"107\":1}}],[\"字段都指向自己\",{\"1\":{\"45\":1}}],[\"字段是指向\",{\"1\":{\"44\":1}}],[\"字段是可以指向\",{\"1\":{\"44\":1}}],[\"字段\",{\"1\":{\"44\":1,\"90\":1}}],[\"帮助你更好的理解它\",{\"1\":{\"89\":1}}],[\"况且还是在切片类型中\",{\"1\":{\"84\":1}}],[\"思考一下可以想到\",{\"1\":{\"84\":1}}],[\"≤\",{\"1\":{\"82\":2}}],[\"以\",{\"1\":{\"204\":1}}],[\"以允许用户选择一个或多个文件并返回这些文件的句柄\",{\"1\":{\"202\":1}}],[\"以下函数用于操作字符串\",{\"1\":{\"180\":1}}],[\"以下函数用于文件操作\",{\"1\":{\"179\":1}}],[\"以下函数用于控制台的输入和输出\",{\"1\":{\"178\":1}}],[\"以反斜杠\",{\"1\":{\"93\":1}}],[\"以双引号表示开头和结尾\",{\"1\":{\"93\":1}}],[\"以此类推\",{\"1\":{\"80\":1,\"107\":1}}],[\"以数据结构索引位\",{\"1\":{\"80\":1}}],[\"以及移动文件\",{\"1\":{\"179\":1}}],[\"以及一个下划线\",{\"1\":{\"171\":1}}],[\"以及特殊的二叉搜索树等\",{\"1\":{\"117\":1}}],[\"以及这些方法是如何实现的\",{\"1\":{\"78\":1}}],[\"以及\",{\"1\":{\"38\":1}}],[\"z\",{\"1\":{\"173\":3}}],[\"zfuncversion\",{\"1\":{\"84\":1}}],[\"zsortinterface\",{\"1\":{\"79\":1,\"80\":1,\"81\":2}}],[\"zero\",{\"1\":{\"42\":1,\"45\":1,\"54\":1}}],[\"zequanr\",{\"0\":{\"1\":1}}],[\"每\",{\"1\":{\"201\":1}}],[\"每个作用域都会优先使用当前作用域声明的\",{\"1\":{\"174\":1}}],[\"每个变量都有自己的类型\",{\"1\":{\"172\":1}}],[\"每个指针都指向组成程序环境的一个字符串\",{\"1\":{\"167\":1}}],[\"每个指针都独立的指向命令行中每个字符串\",{\"1\":{\"167\":1}}],[\"每个使用\",{\"1\":{\"134\":1}}],[\"每个节点在存储数据的同时都要配置一个指针\",{\"1\":{\"132\":1}}],[\"每次只能移动一个圆盘\",{\"1\":{\"104\":1}}],[\"每进行一次递归我们的\",{\"1\":{\"79\":1}}],[\"每当看到孩子们面对一串串代码时眼睛闪烁出好奇的光芒\",{\"1\":{\"6\":1}}],[\"时触发\",{\"1\":{\"204\":1}}],[\"时进行元素交换\",{\"1\":{\"80\":1}}],[\"时直接调用插入排序\",{\"1\":{\"79\":1}}],[\"时说明没有对其进行操作\",{\"1\":{\"38\":1}}],[\"时说明当前的父节点并不是之前传入的父节点了对此进行过操作\",{\"1\":{\"38\":1}}],[\"看一下\",{\"1\":{\"79\":1}}],[\"看到这里我们可以发现不管是第一种还是第二种声明方式在运行时是完全等价的到最后都会调用\",{\"1\":{\"20\":1}}],[\"快速排序\",{\"1\":{\"79\":1}}],[\"希望大家理解在教科书上出现的排序方法仅仅是为了理解排序问题而做出的课程安排\",{\"1\":{\"79\":1}}],[\"希望可以变得更好\",{\"1\":{\"1\":1}}],[\"执行各种操作\",{\"1\":{\"167\":1}}],[\"执行\",{\"1\":{\"79\":1}}],[\"接口中\",{\"1\":{\"84\":1}}],[\"接口的实例\",{\"1\":{\"79\":1}}],[\"接下来要考虑的问题就是如何将\",{\"1\":{\"104\":1}}],[\"接下来先看看\",{\"1\":{\"56\":1}}],[\"接下来我们看一下\",{\"1\":{\"79\":1}}],[\"接下来我们需要了解的就是当前\",{\"1\":{\"78\":1}}],[\"接下来我们开看看\",{\"1\":{\"45\":1}}],[\"接下来我们就来看看\",{\"1\":{\"44\":1}}],[\"接下来就到了我们之前所说的三个基础的数据类型\",{\"1\":{\"77\":1}}],[\"接下来就让我们去看一看这两个数据结构\",{\"1\":{\"42\":1}}],[\"接下来就来看看\",{\"1\":{\"38\":1}}],[\"接下来\",{\"1\":{\"28\":1}}],[\"传入一个满足\",{\"1\":{\"79\":1}}],[\"传入两个元素\",{\"1\":{\"46\":1}}],[\"协议\",{\"1\":{\"76\":1}}],[\"更适合用于文件传输\",{\"1\":{\"205\":1}}],[\"更像是\",{\"1\":{\"205\":1}}],[\"更换尾节点的指向\",{\"1\":{\"147\":1}}],[\"更何况加上用户定义的数据类型\",{\"1\":{\"76\":1}}],[\"更是在培养逻辑思维\",{\"1\":{\"6\":1}}],[\"里的方法\",{\"1\":{\"77\":1}}],[\"里的方法定义中我们可以知道\",{\"1\":{\"76\":1}}],[\"里指定数组大小\",{\"1\":{\"20\":1}}],[\"位字节字符串的集合\",{\"1\":{\"89\":1}}],[\"位于\",{\"1\":{\"76\":1}}],[\"位置的元素进行交换操作\",{\"1\":{\"76\":1}}],[\"位置的元素大则返回\",{\"1\":{\"76\":1}}],[\"位置的元素做比较\",{\"1\":{\"76\":1}}],[\"位置的元素与位于\",{\"1\":{\"76\":2}}],[\"还没有加载任何数据\",{\"1\":{\"204\":1}}],[\"还可以编写各种算法和逻辑\",{\"1\":{\"167\":1}}],[\"还需额外保存一个指针\",{\"1\":{\"132\":1}}],[\"还有一个移动第\",{\"1\":{\"104\":1}}],[\"还提供了一个接口类型\",{\"1\":{\"75\":1}}],[\"还记得之前我们提到过的当\",{\"1\":{\"60\":1}}],[\"还记得\",{\"1\":{\"45\":1}}],[\"还记得我们\",{\"1\":{\"38\":1}}],[\"共定义了四种数据类型\",{\"1\":{\"75\":1}}],[\"共有两种形式\",{\"1\":{\"25\":1}}],[\"要么失败\",{\"1\":{\"204\":1}}],[\"要么成功\",{\"1\":{\"204\":1}}],[\"要想实施刚刚的操作那么就必将会出现下面这一情况\",{\"1\":{\"104\":1}}],[\"要想将塔\",{\"1\":{\"104\":2}}],[\"要知道计算机中的内存空间是所有程序的公共资源\",{\"1\":{\"131\":1}}],[\"要知道在计算机中所有数据都是以二进制的形式进行存储的\",{\"1\":{\"107\":1}}],[\"要知道\",{\"1\":{\"74\":1}}],[\"要留心的是在\",{\"1\":{\"38\":1}}],[\"扩容前\",{\"1\":{\"70\":2}}],[\"新容量会从\",{\"1\":{\"70\":1}}],[\"新容量\",{\"1\":{\"70\":2}}],[\"容量平滑的过渡到\",{\"1\":{\"70\":1}}],[\"容量\",{\"1\":{\"70\":7}}],[\"倍扩容前\",{\"1\":{\"70\":6}}],[\"加上\",{\"1\":{\"70\":1}}],[\"返回文件错误指示器的状态\",{\"1\":{\"179\":1}}],[\"返回的指针类型是通用指针类型\",{\"1\":{\"134\":1}}],[\"返回可用内存的起始地址\",{\"1\":{\"134\":1}}],[\"返回\",{\"1\":{\"101\":1}}],[\"返回新的\",{\"1\":{\"70\":1}}],[\"返回一个\",{\"1\":{\"55\":1}}],[\"本文将重点探讨如何在\",{\"1\":{\"143\":1}}],[\"本文将详细介绍\",{\"1\":{\"117\":1}}],[\"本篇文章将会介绍字符串\",{\"1\":{\"89\":1}}],[\"本次新增的元素数量\",{\"1\":{\"70\":1}}],[\"本身只是一个只读对象\",{\"1\":{\"68\":1}}],[\"本身并不是动态\",{\"1\":{\"68\":1}}],[\"本周给大家带来的是\",{\"1\":{\"73\":1}}],[\"本周将带大家来了解一下\",{\"1\":{\"38\":1}}],[\"本周我们来看\",{\"1\":{\"23\":1}}],[\"想必我们已经对\",{\"1\":{\"68\":1}}],[\"想必听名字大家都可以猜到这两个方法的作用\",{\"1\":{\"43\":1}}],[\"用大括号包裹形成了一个语句块\",{\"1\":{\"162\":1}}],[\"用来访问子系统中的一群接口\",{\"1\":{\"185\":1,\"216\":1}}],[\"用来对参数进行说明\",{\"1\":{\"164\":1}}],[\"用来获取\",{\"1\":{\"161\":1}}],[\"用来获取值\",{\"1\":{\"161\":1}}],[\"用来计数操作\",{\"1\":{\"61\":1}}],[\"用\",{\"1\":{\"114\":1}}],[\"用于表示一个不可变\",{\"1\":{\"197\":1}}],[\"用于表示当前\",{\"1\":{\"67\":2}}],[\"用于创建相关或依赖对象家族的工厂\",{\"1\":{\"184\":1,\"214\":1}}],[\"用于记录队列长度\",{\"1\":{\"148\":1}}],[\"用于指向它的直接后继元素\",{\"1\":{\"132\":1}}],[\"用于指向不同类型的\",{\"1\":{\"67\":1}}],[\"通常通过事件中心或者消息队列来处理异步通信\",{\"1\":{\"186\":1,\"212\":1}}],[\"通常\",{\"1\":{\"167\":1}}],[\"通常会定义一个\",{\"1\":{\"167\":1}}],[\"通常但不一定代表\",{\"1\":{\"89\":1}}],[\"通用指针类型\",{\"1\":{\"67\":1}}],[\"通过绑定\",{\"1\":{\"201\":1}}],[\"通过复制现有对象来创建新对象\",{\"1\":{\"184\":1,\"214\":1}}],[\"通过定义一个构造函数来初始化新对象的属性\",{\"1\":{\"184\":1,\"214\":1}}],[\"通过正确地使用\",{\"1\":{\"167\":1}}],[\"通过使用模运算可以让索引值始终保持在有效范围内\",{\"1\":{\"149\":1}}],[\"通过使用指针可以方便地构建和操作二叉树结构\",{\"1\":{\"117\":1}}],[\"通过它可以遍历链表中的其他所有节点\",{\"1\":{\"132\":1}}],[\"通过它可以从当前节点访问到下一个节点\",{\"1\":{\"131\":1}}],[\"通过它内部实现的数据结构对底层\",{\"1\":{\"68\":1}}],[\"通过当前数据长度定位到数据结构中的倒数第一个与倒数第二个元素\",{\"1\":{\"83\":1}}],[\"通过接口方法\",{\"1\":{\"79\":1}}],[\"通过刚才数据结构\",{\"1\":{\"68\":1}}],[\"通过刚刚的扩容规则中\",{\"1\":{\"70\":1}}],[\"通过刚刚的讲解想必大家已经对\",{\"1\":{\"45\":1}}],[\"通过刚刚的讲述想必我们已经对堆有了一个基础的概念\",{\"1\":{\"38\":1}}],[\"通过刚刚整理的信息我们已经可以清楚的得出\",{\"1\":{\"44\":1}}],[\"通过刚刚前几个方法\",{\"1\":{\"44\":1}}],[\"通过便利\",{\"1\":{\"61\":1}}],[\"通过这种数据结构我们可以创建一个环状的数据结构\",{\"1\":{\"54\":1}}],[\"通过这两个数据结构组成为\",{\"1\":{\"42\":1}}],[\"通过\",{\"1\":{\"44\":3,\"48\":1,\"61\":1,\"93\":1,\"202\":1,\"203\":1}}],[\"通过函数名中我们可以观察到\",{\"1\":{\"38\":1}}],[\"通过本周对\",{\"1\":{\"35\":1}}],[\"通过我们刚刚的测试代码相比我们已经对\",{\"1\":{\"29\":1}}],[\"|\",{\"1\":{\"63\":7,\"128\":1}}],[\"||\",{\"1\":{\"38\":2,\"69\":5,\"77\":2,\"95\":1,\"126\":1,\"127\":1,\"128\":1,\"193\":1}}],[\"对数组长度进行取整\",{\"1\":{\"107\":1}}],[\"对于非对象和null值\",{\"1\":{\"193\":1}}],[\"对于函数外部是不可见的\",{\"1\":{\"174\":1}}],[\"对于入栈操作\",{\"1\":{\"155\":1}}],[\"对于单链表来说\",{\"1\":{\"132\":1}}],[\"对于更大的整数\",{\"1\":{\"107\":1}}],[\"对于已经\",{\"1\":{\"45\":1}}],[\"对此我们可以将\",{\"1\":{\"198\":1}}],[\"对此我们暂时先不做深入研究\",{\"1\":{\"84\":1}}],[\"对此我们应该对此包的方法做一个简单的梳理如图\",{\"1\":{\"62\":1}}],[\"对当前所要排序类型实现了这三个方法\",{\"1\":{\"76\":1}}],[\"对象来访问\",{\"1\":{\"205\":1}}],[\"对象或\",{\"1\":{\"205\":1}}],[\"对象用来表示通用的\",{\"1\":{\"205\":1}}],[\"对象我们就可以看见\",{\"1\":{\"204\":1}}],[\"对象提供了以下方法来加载文件\",{\"1\":{\"204\":1}}],[\"对象看成一个工具\",{\"1\":{\"204\":1}}],[\"对象看作是特殊类型的\",{\"1\":{\"198\":1}}],[\"对象可以将\",{\"1\":{\"204\":1}}],[\"对象可以使用\",{\"1\":{\"204\":1}}],[\"对象事件处理如下\",{\"1\":{\"204\":1}}],[\"对象属性如下\",{\"1\":{\"204\":1}}],[\"对象所提供的属性与事件处理\",{\"1\":{\"204\":1}}],[\"对象指定要读取的文件或数据\",{\"1\":{\"204\":1}}],[\"对象允许\",{\"1\":{\"204\":1}}],[\"对象多包含了一些文件属性\",{\"1\":{\"198\":1}}],[\"对象相比于\",{\"1\":{\"198\":1}}],[\"对象上\",{\"1\":{\"198\":1}}],[\"对象中存在于浏览器环境中\",{\"1\":{\"198\":1}}],[\"对象等\",{\"1\":{\"152\":1}}],[\"对象\",{\"1\":{\"70\":1,\"198\":1,\"200\":1,\"204\":3}}],[\"都能处理\",{\"1\":{\"198\":1}}],[\"都不能放在双引号里面\",{\"1\":{\"164\":1}}],[\"都大于\",{\"1\":{\"107\":1}}],[\"都是系统保留的\",{\"1\":{\"171\":1}}],[\"都是不同的变量\",{\"1\":{\"171\":1}}],[\"都是大于\",{\"1\":{\"107\":1}}],[\"都是\",{\"1\":{\"101\":1}}],[\"都是使用了二分查找算法\",{\"1\":{\"82\":1}}],[\"都是通过\",{\"1\":{\"62\":1}}],[\"都会减\",{\"1\":{\"79\":1}}],[\"都定义了哪些方法\",{\"1\":{\"38\":1}}],[\"即代码块内部还有代码块\",{\"1\":{\"174\":1}}],[\"即前面介绍的普通链表\",{\"1\":{\"140\":1}}],[\"即最后一个元素的索引\",{\"1\":{\"101\":1}}],[\"即双引号和反引号\",{\"1\":{\"91\":1}}],[\"即\",{\"1\":{\"70\":1,\"101\":3}}],[\"即当前指针指向底层数组元素为起始位向后的总元素数量\",{\"1\":{\"67\":1}}],[\"即当前元素的个数\",{\"1\":{\"67\":1}}],[\"即为当前元素数量\",{\"1\":{\"61\":1}}],[\"即一种是直接在\",{\"1\":{\"20\":1}}],[\"得出当前元素数量\",{\"1\":{\"61\":1}}],[\"结果肯定是可以的\",{\"1\":{\"104\":1}}],[\"结果仍然是\",{\"1\":{\"59\":1}}],[\"结构型设计模式\",{\"0\":{\"185\":1,\"216\":1}}],[\"结构的大致样子了\",{\"1\":{\"44\":1}}],[\"结构\",{\"1\":{\"42\":1,\"84\":1}}],[\"结构体的指针\",{\"1\":{\"56\":1}}],[\"结构体实例\",{\"1\":{\"55\":1}}],[\"结构体中\",{\"1\":{\"44\":1}}],[\"结构体\",{\"1\":{\"20\":1}}],[\"把它们连起来会使\",{\"1\":{\"59\":1}}],[\"相较于\",{\"1\":{\"205\":1}}],[\"相较于单向链表\",{\"1\":{\"140\":1}}],[\"相连\",{\"1\":{\"59\":1}}],[\"相比\",{\"1\":{\"45\":1}}],[\"相比我们已经对\",{\"1\":{\"35\":1}}],[\"连接起来\",{\"1\":{\"59\":1}}],[\"连接成一个新的\",{\"1\":{\"59\":1}}],[\"个对象\",{\"1\":{\"205\":1}}],[\"个字符\",{\"1\":{\"171\":1}}],[\"个字节是存在显著浪费的\",{\"1\":{\"107\":1}}],[\"个参数的\",{\"1\":{\"167\":1}}],[\"个元素\",{\"1\":{\"113\":1}}],[\"个元素的\",{\"1\":{\"55\":1}}],[\"个\",{\"1\":{\"112\":1}}],[\"个二进制位\",{\"1\":{\"107\":1}}],[\"个圆盘从塔\",{\"1\":{\"104\":7}}],[\"个步骤\",{\"1\":{\"104\":1}}],[\"个不同元素的有序\",{\"1\":{\"101\":1}}],[\"个方法为\",{\"1\":{\"38\":1}}],[\"个方法的函数名为首字母大写\",{\"1\":{\"38\":1}}],[\"个方法\",{\"1\":{\"38\":1}}],[\"简单来说\",{\"1\":{\"204\":1}}],[\"简单的说就是把单步操作编变成了多步操作\",{\"1\":{\"58\":1}}],[\"简单思考一下\",{\"1\":{\"54\":1}}],[\"简单理解\",{\"1\":{\"53\":1}}],[\"简单理解就是用数组实现的完全二叉树\",{\"1\":{\"38\":1}}],[\"下一个节点\",{\"1\":{\"140\":1}}],[\"下一章节带大家了解一下\",{\"1\":{\"49\":1}}],[\"下面就是\",{\"1\":{\"171\":1}}],[\"下面就让我们来深入了解一下函数\",{\"1\":{\"70\":1}}],[\"下面是一些测试代码\",{\"1\":{\"49\":1}}],[\"下面我们从源代码\",{\"1\":{\"69\":1}}],[\"下面我们来看看该方法是如何创建的吧\",{\"1\":{\"55\":1}}],[\"下面我们就来总结一下我们的测试结果\",{\"1\":{\"35\":1}}],[\"下面我们就来总结一下\",{\"1\":{\"29\":1}}],[\"下面我们就来看看\",{\"1\":{\"20\":1}}],[\"下面我们将通过一些测试代码来开始本周的\",{\"1\":{\"23\":1}}],[\"好了今天先带大家看到这里\",{\"1\":{\"49\":1}}],[\"且可以用在任意的\",{\"1\":{\"198\":1}}],[\"且顺序不能随意颠倒\",{\"1\":{\"118\":1}}],[\"且小于自身的数字整除的话\",{\"1\":{\"107\":1}}],[\"且保持圆盘的排列顺序不变\",{\"1\":{\"104\":1}}],[\"且方法名均为小写说明这两个方法并不包外提供\",{\"1\":{\"46\":1}}],[\"且因为这两个方法的逻辑是一致的\",{\"1\":{\"44\":1}}],[\"具体过程如下\",{\"1\":{\"104\":1}}],[\"具体过程我们可以将其抽象成\",{\"1\":{\"104\":1}}],[\"具体过程也相对简单\",{\"1\":{\"38\":1}}],[\"具体逻辑如图\",{\"1\":{\"80\":1,\"82\":1}}],[\"具体操作如图\",{\"1\":{\"46\":1}}],[\"之间\",{\"1\":{\"149\":1,\"164\":1}}],[\"之间的关系始终保持在\",{\"1\":{\"69\":1}}],[\"之间的关系\",{\"1\":{\"69\":1}}],[\"之间的元素从环上消失\",{\"1\":{\"59\":1}}],[\"之间的通信方式\",{\"1\":{\"23\":1,\"24\":1}}],[\"之后插入\",{\"1\":{\"46\":1}}],[\"过的\",{\"1\":{\"45\":1}}],[\"说明\",{\"1\":{\"44\":1}}],[\"反之返回\",{\"1\":{\"76\":1}}],[\"反之长度不等于\",{\"1\":{\"44\":1}}],[\"反之则继续执行接下来的语句不会对\",{\"1\":{\"38\":1}}],[\"故不存在第一个或最后一个元素\",{\"1\":{\"44\":1}}],[\"可将圆盘临时置于\",{\"1\":{\"104\":1}}],[\"可能会超出\",{\"1\":{\"101\":1}}],[\"可能只存在\",{\"1\":{\"44\":1}}],[\"可以自定义格式和字节序\",{\"1\":{\"205\":1}}],[\"可以用该事件来监控文件的读取进度\",{\"1\":{\"204\":1}}],[\"可以看出\",{\"1\":{\"198\":1}}],[\"可以使用\",{\"1\":{\"190\":1}}],[\"可以使用大括号\",{\"1\":{\"112\":1}}],[\"可以大致分为两类\",{\"1\":{\"188\":1}}],[\"可以写在同一行\",{\"1\":{\"173\":1}}],[\"可以在这个范围的任何地方读取这个变量\",{\"1\":{\"174\":1}}],[\"可以在同一行声明\",{\"1\":{\"172\":1}}],[\"可以在一端添加元素\",{\"1\":{\"146\":1}}],[\"可以利用函数\",{\"1\":{\"167\":1}}],[\"可以放在行首\",{\"1\":{\"164\":1}}],[\"可以确保下标总是在\",{\"1\":{\"149\":1}}],[\"可以朝两个方向遍历链表\",{\"1\":{\"140\":1}}],[\"可以获得数据类型或变量在内存中所占的字节数\",{\"1\":{\"114\":1}}],[\"可以结合使用\",{\"1\":{\"112\":1}}],[\"可以指定为哪些位置的元素赋值\",{\"1\":{\"112\":1}}],[\"可以通过位的形式对程序进行改写\",{\"1\":{\"107\":1}}],[\"可以快速判断一个整数是否为素数\",{\"1\":{\"107\":1}}],[\"可以表示为\",{\"1\":{\"107\":1}}],[\"可以被分为三大类\",{\"1\":{\"183\":1}}],[\"可以被某个数字整除\",{\"1\":{\"107\":1}}],[\"可以被\",{\"1\":{\"107\":2}}],[\"可以被多个\",{\"1\":{\"68\":1}}],[\"可以发送任意类型\",{\"1\":{\"35\":1}}],[\"可以传递任意类型\",{\"1\":{\"29\":1}}],[\"元素并在其上绑定\",{\"1\":{\"200\":1}}],[\"元素类型为\",{\"1\":{\"111\":1}}],[\"元素我们可以很轻松的定位到\",{\"1\":{\"48\":1}}],[\"元素不是\",{\"1\":{\"47\":1}}],[\"元素中\",{\"1\":{\"44\":1}}],[\"元素\",{\"1\":{\"43\":1,\"59\":1}}],[\"语法单位之间的多个空格\",{\"1\":{\"163\":1}}],[\"语句块可以视为多个语句组成的一个复合语句\",{\"1\":{\"162\":1}}],[\"语句块\",{\"0\":{\"162\":1}}],[\"语句不一定有\",{\"1\":{\"161\":1}}],[\"语句可以包含表达式\",{\"1\":{\"161\":1}}],[\"语句之间的换行符并不是必需的\",{\"1\":{\"160\":1}}],[\"语句必须使用分号结尾\",{\"1\":{\"160\":1}}],[\"语句就是程序执行的一个操作命令\",{\"1\":{\"160\":1}}],[\"语句\",{\"0\":{\"160\":1}}],[\"语句中也解决了我们之前的疑问\",{\"1\":{\"47\":1}}],[\"语句中除了判断当前元素的下一个或上一个元素是否存在外还需要判断是否等于\",{\"1\":{\"43\":1}}],[\"语言可以写出多重赋值表达式\",{\"1\":{\"173\":1}}],[\"语言会自动转换类型\",{\"1\":{\"173\":1}}],[\"语言会在变量声明时\",{\"1\":{\"173\":1}}],[\"语言会在编译期间通过源代码推导数组的大小\",{\"1\":{\"20\":1}}],[\"语言主要的关键字和保留字\",{\"1\":{\"171\":1}}],[\"语言还保留了一些词\",{\"1\":{\"171\":1}}],[\"语言里面有特殊含义\",{\"1\":{\"171\":1}}],[\"语言里面的空格\",{\"1\":{\"163\":1}}],[\"语言程序都需要一个称之为\",{\"1\":{\"167\":1}}],[\"语言程序执行的入口\",{\"1\":{\"167\":1}}],[\"语言程序中一个\",{\"1\":{\"107\":1}}],[\"语言允许多个语句使用一对大括号\",{\"1\":{\"162\":1}}],[\"语言允许省略方括号里面的数组元素数量\",{\"1\":{\"112\":1}}],[\"语言的变量作用域主要有两种\",{\"1\":{\"174\":1}}],[\"语言的变量\",{\"1\":{\"172\":1}}],[\"语言的执行开始于\",{\"1\":{\"167\":1}}],[\"语言的各种计算\",{\"1\":{\"161\":1}}],[\"语言的代码是由一行行的语句所组成\",{\"1\":{\"160\":1}}],[\"语言的开发者们已经为我们写好了所需要的方法\",{\"1\":{\"75\":1}}],[\"语言规定\",{\"1\":{\"112\":1,\"160\":1}}],[\"语言对标准字符串的解析逻辑\",{\"1\":{\"93\":1}}],[\"语言在解析两种不同的字符串格式中所采用的解析函数\",{\"1\":{\"92\":1}}],[\"语言编译器需要能够区分并且正确解析两种不同的字符串格式\",{\"1\":{\"92\":1}}],[\"语言提供的内置容器\",{\"1\":{\"41\":1,\"42\":1,\"44\":1,\"49\":1,\"53\":1}}],[\"语言标准库中的\",{\"1\":{\"38\":1,\"73\":1}}],[\"语言核心的数据结构\",{\"1\":{\"23\":1}}],[\"语言为我们提供的一种语法糖\",{\"1\":{\"20\":1}}],[\"语言和\",{\"1\":{\"18\":1}}],[\"语言家族的编程语言\",{\"1\":{\"18\":1}}],[\"语言是一门属于\",{\"1\":{\"18\":1}}],[\"语言中变量名属于标识符\",{\"1\":{\"171\":1}}],[\"语言中注释写法有两种\",{\"1\":{\"164\":1}}],[\"语言中实现并操作队列\",{\"1\":{\"143\":1}}],[\"语言中二叉树的基本概念\",{\"1\":{\"117\":1}}],[\"语言中对\",{\"1\":{\"92\":1}}],[\"语言中声明字符串\",{\"1\":{\"91\":1}}],[\"语言中声明数组\",{\"1\":{\"20\":1}}],[\"语言中所提供的字符串\",{\"1\":{\"89\":1}}],[\"语言中所采用的是最小堆\",{\"1\":{\"38\":1}}],[\"语言中的\",{\"1\":{\"23\":1,\"167\":1}}],[\"语言中的数组可以简单理解为存储同一种数据类型且存储数量\",{\"1\":{\"18\":1}}],[\"语言中\",{\"1\":{\"18\":1,\"24\":1,\"27\":1,\"28\":1,\"30\":1,\"110\":1,\"117\":1,\"167\":1}}],[\"语言中许多基础的数据结构都是通过数组来实现数据的存储工作\",{\"1\":{\"18\":1}}],[\"语言课堂笔记\",{\"0\":{\"6\":1}}],[\"语言\",{\"0\":{\"3\":1}}],[\"唯一值得注意的是在\",{\"1\":{\"43\":1}}],[\"再用大括号修改值\",{\"1\":{\"112\":1}}],[\"再将\",{\"1\":{\"59\":1}}],[\"再通过\",{\"1\":{\"58\":1}}],[\"再声明一个变量让其等于刚刚声明的结构体\",{\"1\":{\"55\":1}}],[\"再从注解中我们可以了解到\",{\"1\":{\"42\":1}}],[\"再来看\",{\"1\":{\"42\":1}}],[\"四个字段\",{\"1\":{\"42\":1}}],[\"节点数量\",{\"1\":{\"132\":1,\"139\":1}}],[\"节点数据域\",{\"1\":{\"132\":2,\"139\":1,\"140\":1}}],[\"节点指针域\",{\"1\":{\"132\":2,\"139\":1,\"140\":2}}],[\"节点\",{\"1\":{\"42\":1,\"131\":1}}],[\"列表元素所展现的作用了\",{\"1\":{\"48\":1}}],[\"列表元素中的\",{\"1\":{\"45\":1}}],[\"列表元素中所指向的元素\",{\"1\":{\"44\":1}}],[\"列表元素的\",{\"1\":{\"44\":2}}],[\"列表元素\",{\"1\":{\"42\":1,\"43\":1,\"44\":1}}],[\"列表能够高效地进行任意位置的元素插入和删除操作\",{\"1\":{\"41\":1}}],[\"哨兵\",{\"1\":{\"42\":1,\"43\":1,\"44\":4,\"45\":1,\"48\":1}}],[\"当需要对二进制数据进行操作时\",{\"1\":{\"205\":1}}],[\"当读取操作完成时打印读取结果\",{\"1\":{\"204\":1}}],[\"当文件上传成功时\",{\"1\":{\"204\":1}}],[\"当上传大文件时\",{\"1\":{\"204\":1}}],[\"当元素或选中的文本在可释放目标上被释放时触发\",{\"1\":{\"201\":1}}],[\"当元素或选中的文本被拖到一个可释放目标上时触发\",{\"1\":{\"201\":1}}],[\"当对象包含其他对象或数组作为属性时\",{\"1\":{\"192\":1}}],[\"当一个对象的状态发生改变时\",{\"1\":{\"186\":1,\"212\":1}}],[\"当你把程序从一个编译器移到另一个编译器时\",{\"1\":{\"167\":1}}],[\"当你有一个长度为\",{\"1\":{\"149\":1}}],[\"当队列中没有节点时\",{\"1\":{\"147\":1}}],[\"当要解决\",{\"1\":{\"104\":1}}],[\"当遇到这样的题目时我们就可以采用二分查找来完成\",{\"1\":{\"101\":1}}],[\"当没有传入缓冲区时\",{\"1\":{\"98\":1}}],[\"当传入缓冲区时\",{\"1\":{\"98\":1}}],[\"当使用反引号时\",{\"1\":{\"91\":1}}],[\"当\",{\"1\":{\"79\":1,\"80\":1,\"167\":1}}],[\"当前期望容量\",{\"1\":{\"70\":4}}],[\"当前的容量\",{\"1\":{\"67\":1}}],[\"当前的长度\",{\"1\":{\"67\":1}}],[\"当前数据结构中包含\",{\"1\":{\"42\":2}}],[\"当我们对其中一个变量进行修改时\",{\"1\":{\"191\":1}}],[\"当我们将变量赋值给另一个变量时\",{\"1\":{\"191\":1}}],[\"当我们的数据结构长度小于\",{\"1\":{\"79\":1}}],[\"当我们判断\",{\"1\":{\"38\":1}}],[\"当我们使用第二种声明方式时\",{\"1\":{\"20\":1}}],[\"当我们以已第一种声明方式进入到此函数时\",{\"1\":{\"20\":1}}],[\"老规矩先从\",{\"1\":{\"76\":1}}],[\"老规矩我们先来了解一下\",{\"1\":{\"54\":1}}],[\"老规矩我们先从数据结构中看起\",{\"1\":{\"42\":1}}],[\"老样子我们先来看看传入的参数\",{\"1\":{\"38\":1}}],[\"今天给大家带来的是\",{\"1\":{\"41\":1,\"53\":1}}],[\"修复在索引\",{\"1\":{\"38\":1}}],[\"不应该赋予不是同一个类型的值\",{\"1\":{\"173\":1}}],[\"不管是哪一种注释\",{\"1\":{\"164\":1}}],[\"不建议这样做\",{\"1\":{\"160\":1}}],[\"不妨设为\",{\"1\":{\"107\":1}}],[\"不能用作变量名\",{\"1\":{\"171\":1}}],[\"不能以数字开头\",{\"1\":{\"171\":1}}],[\"不能确保每个独立内存的起始地址是连续的\",{\"1\":{\"134\":1}}],[\"不能被其他正整数整除\",{\"1\":{\"107\":1}}],[\"不能为空\",{\"1\":{\"57\":1}}],[\"不是改变原来的数值\",{\"1\":{\"189\":1}}],[\"不是素数\",{\"1\":{\"107\":4}}],[\"不是切片它会\",{\"1\":{\"84\":1,\"85\":1}}],[\"不是\",{\"1\":{\"46\":1}}],[\"不是就与最后一个元素进行交换并调用\",{\"1\":{\"38\":1}}],[\"不认作链表中的元素\",{\"1\":{\"44\":1}}],[\"不记录在当前链表长度中\",{\"1\":{\"44\":1,\"45\":1}}],[\"不算在\",{\"1\":{\"44\":1}}],[\"不算在当前\",{\"1\":{\"42\":1}}],[\"不过该方法可以指定元素\",{\"1\":{\"38\":1}}],[\"函数内部声明的变量\",{\"1\":{\"174\":1}}],[\"函数中\",{\"1\":{\"167\":1}}],[\"函数称之为主函数\",{\"1\":{\"167\":1}}],[\"函数版本中\",{\"1\":{\"167\":1}}],[\"函数只有两种标准形式\",{\"1\":{\"167\":1}}],[\"函数只是创建出了数据结构\",{\"1\":{\"55\":1}}],[\"函数返回时程序也会随之结束\",{\"1\":{\"167\":1}}],[\"函数申请的空间\",{\"1\":{\"137\":1,\"139\":1}}],[\"函数来获取最新的未解析的字符\",{\"1\":{\"93\":1}}],[\"函数\",{\"0\":{\"167\":1,\"178\":1},\"1\":{\"84\":1,\"114\":1,\"167\":2}}],[\"函数进行扩容\",{\"1\":{\"70\":1}}],[\"函数的是如何做的\",{\"1\":{\"69\":1}}],[\"函数是程序的入口函数\",{\"1\":{\"167\":1}}],[\"函数是向\",{\"1\":{\"70\":1}}],[\"函数是创建一个包含\",{\"1\":{\"55\":1}}],[\"函数是如何实现的\",{\"1\":{\"45\":1}}],[\"函数了\",{\"1\":{\"55\":1}}],[\"函数添加元素时也只能在最后位置添加\",{\"1\":{\"38\":1}}],[\"函数传入\",{\"1\":{\"20\":2}}],[\"既然\",{\"1\":{\"68\":1}}],[\"既然存在两种不同的声明方式\",{\"1\":{\"20\":1}}],[\"既是从下到上所以当我们定义\",{\"1\":{\"38\":1}}],[\"推入堆中\",{\"1\":{\"38\":1}}],[\"随后我们会先对这三个方法做探讨\",{\"1\":{\"56\":1}}],[\"随后判断如果正是当前元素直接返回\",{\"1\":{\"38\":1}}],[\"随后调用\",{\"1\":{\"38\":2}}],[\"随后依次调用\",{\"1\":{\"38\":1}}],[\"随后就是判断缓冲区的大小是否可以够用\",{\"1\":{\"97\":1}}],[\"随后就是运用\",{\"1\":{\"55\":1}}],[\"随后就是生成一个\",{\"1\":{\"55\":1}}],[\"随后就是\",{\"1\":{\"38\":1}}],[\"该工具提供了一些读取方法\",{\"1\":{\"204\":1}}],[\"该事件在读取\",{\"1\":{\"204\":1}}],[\"该事件在读取操作结束时\",{\"1\":{\"204\":1}}],[\"该事件在读取操作开始时触发\",{\"1\":{\"204\":1}}],[\"该事件在读取操作完成时触发\",{\"1\":{\"204\":1}}],[\"该事件在读取操作发生错误时触发\",{\"1\":{\"204\":1}}],[\"该事件在读取操作被中断时触发\",{\"1\":{\"204\":1}}],[\"该属性仅在读取操作完成后才有效\",{\"1\":{\"204\":1}}],[\"该游戏通常由三个柱子和若干个圆盘组成\",{\"1\":{\"104\":1}}],[\"该包提供了对切片和用户定义的集合进行排序的操作\",{\"1\":{\"73\":1}}],[\"该方法用于显示一个文件选择器\",{\"1\":{\"202\":1}}],[\"该方法返回一个指针\",{\"1\":{\"134\":1}}],[\"该方法会根据是否传入缓冲区做出不同的处理\",{\"1\":{\"98\":1}}],[\"该方法中一共包含了三种排序算法\",{\"1\":{\"79\":1}}],[\"该方法就相对简单许多\",{\"1\":{\"61\":1}}],[\"该方法就是\",{\"1\":{\"46\":1}}],[\"该方法只对\",{\"1\":{\"45\":1}}],[\"该方法的作用我们已经知道了\",{\"1\":{\"44\":1}}],[\"该方法与\",{\"1\":{\"38\":1,\"62\":1}}],[\"该函数的具体实现逻辑与\",{\"1\":{\"85\":1}}],[\"该函数的具体逻辑就是通过\",{\"1\":{\"58\":1}}],[\"该函数的实现逻辑比较简单调用\",{\"1\":{\"45\":1}}],[\"该函数与\",{\"1\":{\"38\":1}}],[\"该函数会对其进行错误判断\",{\"1\":{\"20\":1}}],[\"该算式等价于\",{\"1\":{\"38\":1}}],[\"计算下标\",{\"1\":{\"149\":1}}],[\"计算数组长度可以使用\",{\"1\":{\"114\":1}}],[\"计算数组长度\",{\"0\":{\"114\":1}}],[\"计算中间位置\",{\"1\":{\"101\":1}}],[\"计算节点的过程中我们可以理解为\",{\"1\":{\"38\":1}}],[\"计算出右子节点赋值给\",{\"1\":{\"38\":1}}],[\"计算出左子节点赋值给\",{\"1\":{\"38\":1}}],[\"计算出当前的父节点\",{\"1\":{\"38\":1}}],[\"为其他对象提供一种代理以控制对这个对象的访问\",{\"1\":{\"185\":1,\"216\":1}}],[\"为空\",{\"1\":{\"167\":1}}],[\"为什么要用模运算\",{\"0\":{\"149\":1}}],[\"为了避免这种情况的发生\",{\"1\":{\"191\":1}}],[\"为了避免大数越界\",{\"1\":{\"101\":1}}],[\"为了深入了解栈的运行机制\",{\"1\":{\"154\":1}}],[\"为了实现队列\",{\"1\":{\"146\":1}}],[\"为了求解更多的素数\",{\"1\":{\"107\":1}}],[\"为了表达一个数字是否为素数\",{\"1\":{\"107\":1}}],[\"为此我们可以推断出\",{\"1\":{\"69\":1}}],[\"为一个闭环的数据结构\",{\"1\":{\"57\":1}}],[\"为的是要保留一下当前地址\",{\"1\":{\"55\":1}}],[\"为零值状态时他才会进行\",{\"1\":{\"45\":1}}],[\"为指针类型可以看出这是一个双向链表\",{\"1\":{\"42\":1}}],[\"为\",{\"1\":{\"38\":1,\"42\":1,\"107\":1}}],[\"值感兴趣的话可以试着去搜索一下\",{\"1\":{\"167\":1}}],[\"值一般代表着成功的意思\",{\"1\":{\"167\":1}}],[\"值小于当前\",{\"1\":{\"70\":1}}],[\"值得注意的就是在工作期间会去检查下一个或者上一个环元素是否为空\",{\"1\":{\"57\":1}}],[\"值得注意的是\",{\"1\":{\"190\":1,\"202\":1}}],[\"值得注意的是标准\",{\"1\":{\"167\":1}}],[\"值得注意的是堆并不是真正的完全二叉树\",{\"1\":{\"38\":1}}],[\"值得注意的是在\",{\"1\":{\"27\":1,\"192\":1,\"201\":1}}],[\"值得思考的是这些这两个方法都是\",{\"1\":{\"46\":1}}],[\"值为\",{\"1\":{\"38\":1}}],[\"值\",{\"1\":{\"38\":1,\"101\":1,\"167\":1}}],[\"最先到达的元素最先离开\",{\"1\":{\"144\":1}}],[\"最简单的写法就是下面这样\",{\"1\":{\"112\":1}}],[\"最少要移动多少次\",{\"1\":{\"104\":1}}],[\"最后一个元素\",{\"1\":{\"167\":1}}],[\"最后一个元素的编号会比数组长度小\",{\"1\":{\"111\":1}}],[\"最后将尾节点变更为当前将要入队的节点\",{\"1\":{\"147\":1}}],[\"最后通过\",{\"1\":{\"97\":1}}],[\"最后如\",{\"1\":{\"84\":1}}],[\"最后再返回子环\",{\"1\":{\"60\":1}}],[\"最后再返回\",{\"1\":{\"59\":1}}],[\"最后再首尾相连\",{\"1\":{\"55\":1}}],[\"最后我们可以发现\",{\"1\":{\"55\":1}}],[\"最后在返回一个\",{\"1\":{\"38\":1}}],[\"最小堆中子节点都必须要比父节点大\",{\"1\":{\"38\":1}}],[\"进行排序的同时保持相等元素的原始顺序不变\",{\"1\":{\"84\":1}}],[\"进行排序\",{\"1\":{\"84\":1}}],[\"进行扩容的\",{\"1\":{\"70\":1}}],[\"进行遍历其中的元素依次调用\",{\"1\":{\"49\":1}}],[\"进行判断当前\",{\"1\":{\"48\":1}}],[\"进行任何操作\",{\"1\":{\"38\":1}}],[\"进行简单计算就可得到当前节点的父节点以及子节点\",{\"1\":{\"38\":1}}],[\"判断文件内部指针是否指向文件结尾\",{\"1\":{\"179\":1}}],[\"判断一个数是否为素数\",{\"1\":{\"107\":1}}],[\"判断目标值与中间值的大小关系\",{\"1\":{\"101\":1}}],[\"判断\",{\"1\":{\"45\":1}}],[\"判断之前记录下来的子节点\",{\"1\":{\"38\":1}}],[\"判断右子节点是否存在并且右子节点是否小于左子节点\",{\"1\":{\"38\":1}}],[\"判断左子节点是否大于等于当前数组的长度或者在\",{\"1\":{\"38\":1}}],[\"将抽象部分与它的实现部分分离\",{\"1\":{\"185\":1,\"216\":1}}],[\"将一个请求封装为一个对象\",{\"1\":{\"186\":1,\"212\":1}}],[\"将一个类的接口转换成客户希望的另一个接口\",{\"1\":{\"185\":1,\"216\":1}}],[\"将一个数组分配给另一个数组会复制所有元素\",{\"1\":{\"18\":1}}],[\"将复杂的构建过程与表示分离\",{\"1\":{\"184\":1,\"214\":1}}],[\"将文件内部指针重置到文件开始处\",{\"1\":{\"179\":1}}],[\"将文件内部指针移到指定位置\",{\"1\":{\"179\":1}}],[\"将注释放在双斜杠\",{\"1\":{\"164\":1}}],[\"将要注释的内容放在\",{\"1\":{\"164\":1}}],[\"将要入队的元素赋值给\",{\"1\":{\"148\":1}}],[\"将要入队的节点插入到当前队列尾节点的后面\",{\"1\":{\"147\":2}}],[\"将声明的整数变量\",{\"1\":{\"160\":1}}],[\"将把元素添加到栈顶的操作叫作\",{\"1\":{\"153\":1}}],[\"将把元素加入队尾的操作称为\",{\"1\":{\"145\":1}}],[\"将输入元素赋值给\",{\"1\":{\"148\":1}}],[\"将当前队列头节点变更为头节点后下一个节点\",{\"1\":{\"147\":1}}],[\"将当前所传入的\",{\"1\":{\"45\":1}}],[\"将最后一个节点称为尾节点\",{\"1\":{\"140\":1}}],[\"将最大的\",{\"1\":{\"104\":1}}],[\"将节点添加到链表末尾\",{\"1\":{\"135\":1,\"139\":1}}],[\"将第\",{\"1\":{\"104\":2}}],[\"将字符串转换为字节片\",{\"0\":{\"98\":1}}],[\"将字节片转换为字符串\",{\"0\":{\"97\":1}}],[\"将解析到的字节转换为字符串\",{\"1\":{\"94\":1}}],[\"将\",{\"1\":{\"59\":1,\"104\":5,\"107\":1,\"148\":2}}],[\"将左子节点记录下来赋值给\",{\"1\":{\"38\":1}}],[\"父子节点数值交换\",{\"1\":{\"38\":1}}],[\"父节点的值比每一个子节点的值都要小\",{\"1\":{\"38\":1}}],[\"父节点的值比每一个子节点的值都要大\",{\"1\":{\"38\":1}}],[\"循环变量只对循环体内部可见\",{\"1\":{\"174\":1}}],[\"循环也是一个块作用域\",{\"1\":{\"174\":1}}],[\"循环的条件中是\",{\"1\":{\"101\":1}}],[\"循环向后面添加\",{\"1\":{\"55\":1}}],[\"循环\",{\"1\":{\"38\":2}}],[\"启用一个\",{\"1\":{\"38\":2}}],[\"就不应该赋值为小数\",{\"1\":{\"173\":1}}],[\"就不得修改变量指向的地址\",{\"1\":{\"112\":1}}],[\"就为它分配内存空间\",{\"1\":{\"173\":1}}],[\"就能区分语法单位\",{\"1\":{\"163\":1}}],[\"就没有返回值\",{\"1\":{\"161\":1}}],[\"就得到了栈这种数据结构\",{\"1\":{\"152\":1}}],[\"就像现实生活中排队等待服务的情景一样\",{\"1\":{\"144\":1}}],[\"就像农夫播撒种子\",{\"1\":{\"6\":1}}],[\"就可以使用\",{\"1\":{\"205\":1}}],[\"就可以确定\",{\"1\":{\"107\":1}}],[\"就可执行图\",{\"1\":{\"104\":1}}],[\"就需先解决将拥有二个圆盘的汉诺塔问题\",{\"1\":{\"104\":1}}],[\"就需要先解决\",{\"1\":{\"104\":2}}],[\"就会小于\",{\"1\":{\"107\":1}}],[\"就会对传入切片\",{\"1\":{\"84\":1}}],[\"就会调用\",{\"1\":{\"70\":1}}],[\"就是程序本身的名称\",{\"1\":{\"167\":1}}],[\"就是从第\",{\"1\":{\"111\":1}}],[\"就是一个双向循环链表\",{\"1\":{\"53\":1}}],[\"就是我们刚刚看到的\",{\"1\":{\"38\":1}}],[\"就代表我们当前所传入的节点位置\",{\"1\":{\"38\":1}}],[\"第二行给这个变量赋值\",{\"1\":{\"173\":1}}],[\"第二种声明方式也只是\",{\"1\":{\"20\":1}}],[\"第一行声明了一个整数变量\",{\"1\":{\"173\":1}}],[\"第一步就是要将\",{\"1\":{\"104\":1}}],[\"第一个要看的方法那一定就是我们的\",{\"1\":{\"79\":1}}],[\"第一个先来看看\",{\"1\":{\"38\":1}}],[\"剩余两个仅为本包中的方法\",{\"1\":{\"38\":1}}],[\"了解了\",{\"1\":{\"38\":1}}],[\"key\",{\"1\":{\"101\":4,\"193\":4}}],[\"known\",{\"1\":{\"97\":1}}],[\"k\",{\"1\":{\"38\":4,\"76\":4,\"107\":10}}],[\"kind\",{\"1\":{\"20\":1,\"94\":4}}],[\"jpg\",{\"1\":{\"202\":1}}],[\"jpeg\",{\"1\":{\"202\":1}}],[\"js\",{\"0\":{\"188\":1},\"1\":{\"198\":1}}],[\"json\",{\"1\":{\"91\":1,\"193\":6}}],[\"just\",{\"1\":{\"95\":1}}],[\"j2\",{\"1\":{\"38\":5}}],[\"j1\",{\"1\":{\"38\":8}}],[\"j\",{\"1\":{\"38\":31,\"76\":14,\"77\":19,\"80\":7,\"82\":16,\"84\":4,\"85\":1}}],[\"javascript\",{\"0\":{\"15\":1},\"1\":{\"183\":1,\"188\":2,\"191\":1,\"197\":1},\"2\":{\"16\":1,\"17\":1,\"194\":1,\"195\":1,\"206\":1,\"207\":1,\"209\":1,\"210\":1}}],[\"继承了\",{\"1\":{\"38\":1}}],[\"言归正传\",{\"1\":{\"38\":1}}],[\"右子节点必须必比父节点大\",{\"1\":{\"38\":1}}],[\"但此事件还是会继续传播\",{\"1\":{\"201\":1}}],[\"但这个修改没有反映到浅拷贝后的副本上\",{\"1\":{\"192\":1}}],[\"但外层不可以使用内层声明的变量\",{\"1\":{\"174\":1}}],[\"但相应地也需要占用更多的内存空间\",{\"1\":{\"140\":1}}],[\"但为了能够保持节点之间的顺序关系\",{\"1\":{\"132\":1}}],[\"但不能用于从文件系统中按路径名简单地读取文件\",{\"1\":{\"204\":1}}],[\"但不建议这样做\",{\"1\":{\"112\":1}}],[\"但不会是\",{\"1\":{\"89\":1}}],[\"但要注意\",{\"1\":{\"112\":1}}],[\"但大括号里面的值不能多于数组的长度\",{\"1\":{\"112\":1}}],[\"但是应该避免赋值运算符两侧的类型不一致\",{\"1\":{\"173\":1}}],[\"但是不会清除内存里面原来的值\",{\"1\":{\"173\":1}}],[\"但是还没有任何标准考虑接受它\",{\"1\":{\"167\":1}}],[\"但是表达式本身不构成语句\",{\"1\":{\"161\":1}}],[\"但是\",{\"1\":{\"113\":1,\"193\":1}}],[\"但是这与我们的假设矛盾\",{\"1\":{\"107\":1}}],[\"但是其中蕴含了很多算法思想\",{\"1\":{\"104\":1}}],[\"但是实际上字符串是一片连续的内存空间\",{\"1\":{\"91\":1}}],[\"但都必须遵循上述两条规则\",{\"1\":{\"104\":1}}],[\"但都是字面量上的不同\",{\"1\":{\"69\":1}}],[\"但对于不同的数据类型\",{\"1\":{\"76\":1}}],[\"但那并不是最终所要扩容的容量还会进行接下来的计算\",{\"1\":{\"70\":1}}],[\"但如果此时\",{\"1\":{\"70\":1}}],[\"但如果\",{\"1\":{\"59\":1}}],[\"但我们要知道的是在\",{\"1\":{\"57\":1}}],[\"但\",{\"1\":{\"53\":1}}],[\"但差别还是很大的首先我们都知道在完全二叉树中左子节点必须比父节点小\",{\"1\":{\"38\":1}}],[\"但在元素添加之前需要先调用\",{\"1\":{\"48\":1}}],[\"但在存储逻辑上是一棵完全二叉树\",{\"1\":{\"38\":1}}],[\"但在\",{\"1\":{\"18\":1}}],[\"他们都有一个指向底层数组的指针用存储数据\",{\"1\":{\"90\":1}}],[\"他们之间虽有许多相似之处\",{\"1\":{\"38\":1}}],[\"他们用稚嫩的小手敲击键盘\",{\"1\":{\"6\":1}}],[\"+=\",{\"1\":{\"70\":1,\"95\":1,\"107\":1}}],[\"+\",{\"1\":{\"38\":6,\"60\":1,\"70\":3,\"79\":1,\"80\":1,\"81\":1,\"82\":2,\"101\":6,\"104\":1,\"107\":2,\"111\":2,\"148\":3,\"161\":3,\"171\":1}}],[\"+0x4a\",{\"1\":{\"29\":3}}],[\"其全称为\",{\"1\":{\"197\":1}}],[\"其原因在于是\",{\"1\":{\"112\":1}}],[\"其原因我们也可想而知如图\",{\"1\":{\"38\":1}}],[\"其次就是内存字节对齐\",{\"1\":{\"70\":1}}],[\"其\",{\"1\":{\"68\":1}}],[\"其余两个皆为\",{\"1\":{\"67\":1}}],[\"其具体逻辑为声明一个\",{\"1\":{\"61\":1}}],[\"其本质就是在同一个环上两个不同元素位置的\",{\"1\":{\"60\":1}}],[\"其本身不存储数据\",{\"1\":{\"44\":1}}],[\"其返回结果是对该子环上元素的引用\",{\"1\":{\"59\":1}}],[\"其实对于编译器来说并没有差别\",{\"1\":{\"163\":1}}],[\"其实现逻辑也很简单\",{\"1\":{\"83\":1}}],[\"其实是一个循环链表如图\",{\"1\":{\"44\":1}}],[\"其实不然\",{\"1\":{\"38\":1}}],[\"其中每一个节点都通过指针相连接\",{\"1\":{\"131\":1}}],[\"其中的每一个元素都是一个节点\",{\"1\":{\"131\":1}}],[\"其中从指针中我们不难发现每个节点最多有两个分支\",{\"1\":{\"118\":1}}],[\"其中一个因数必然小于或等于它的平方根\",{\"1\":{\"107\":3}}],[\"其中\",{\"1\":{\"38\":2,\"70\":1,\"107\":2,\"143\":1,\"200\":1}}],[\"其中有三种是我们一般情况下经常会用到的数据类型\",{\"1\":{\"75\":1}}],[\"其中有\",{\"1\":{\"38\":1}}],[\"其属性是每个节点都是其子树中的最小值节点\",{\"1\":{\"38\":1}}],[\"那我们大致就可以了解该方法其实是对\",{\"1\":{\"60\":1}}],[\"那我们就来简单了解一下\",{\"1\":{\"38\":1}}],[\"那怎么做又是为的什么\",{\"1\":{\"46\":1}}],[\"那在了解这两个方法之前\",{\"1\":{\"43\":1}}],[\"那这也说明此\",{\"1\":{\"38\":1}}],[\"那它即没有指针指向当前节点的父节点或子节点\",{\"1\":{\"38\":1}}],[\"那问题来了\",{\"1\":{\"38\":1}}],[\"那么他相当于在堆内存中重新开辟了一块空间这样修改之后的这个数组与之前修改的数组会分别处在两个不同地址的内存空间中且他们互不影响\",{\"1\":{\"192\":1}}],[\"那么会在当前作用域覆盖外层变量\",{\"1\":{\"174\":1}}],[\"那么第一个字符串\",{\"1\":{\"167\":1}}],[\"那么数组长度将是最大的指定位置再加\",{\"1\":{\"112\":1}}],[\"那么数据类型我们看看完了\",{\"1\":{\"78\":1}}],[\"那么未赋值的元素自动初始化为\",{\"1\":{\"112\":1}}],[\"那么剩下的下一个数字必然为素数\",{\"1\":{\"107\":1}}],[\"那么该数字必然不是素数\",{\"1\":{\"107\":1}}],[\"那么另一个因数就是\",{\"1\":{\"107\":1}}],[\"那么这个修改也会反映到浅拷贝后的副本上\",{\"1\":{\"192\":1}}],[\"那么这个整数就是素数\",{\"1\":{\"107\":1}}],[\"那么这可以大大的减少我们对存储空间上的消耗\",{\"1\":{\"107\":1}}],[\"那么这也意味着\",{\"1\":{\"92\":1}}],[\"那么它们的乘积就会大于\",{\"1\":{\"107\":1}}],[\"那么它就不是素数\",{\"1\":{\"107\":1}}],[\"那么它可以表示为两个因数的乘积\",{\"1\":{\"107\":4}}],[\"那么如何计算需要多少步\",{\"1\":{\"104\":1}}],[\"那么如果\",{\"1\":{\"46\":1}}],[\"那么以当前思路来说\",{\"1\":{\"104\":1}}],[\"那么遵循上述的游戏规则\",{\"1\":{\"104\":1}}],[\"那么必然要将塔\",{\"1\":{\"104\":1}}],[\"那么既然\",{\"1\":{\"92\":1}}],[\"那么\",{\"1\":{\"84\":1,\"107\":1,\"167\":1}}],[\"那么到这里我们不禁会想到一个问题\",{\"1\":{\"84\":1}}],[\"那么判定当前数据已排序\",{\"1\":{\"83\":1}}],[\"那么从当前\",{\"1\":{\"76\":1}}],[\"那么从这里我们就可以知道\",{\"1\":{\"55\":1}}],[\"那么通过调用这三种方法就可进行排序操作\",{\"1\":{\"76\":1}}],[\"那么通过\",{\"1\":{\"68\":1}}],[\"那么作为本包中唯一一个没有被导出的方法\",{\"1\":{\"56\":1}}],[\"那么首先来看的肯定就是我们\",{\"1\":{\"55\":1}}],[\"那么之前也说过\",{\"1\":{\"44\":1}}],[\"那么说明当前\",{\"1\":{\"44\":1}}],[\"那么堆的属性又是什么呢\",{\"1\":{\"38\":1}}],[\"那么接下来的结果可想而知了\",{\"1\":{\"29\":1}}],[\"那么我们就来看看该方法的具体过程吧\",{\"1\":{\"97\":1}}],[\"那么我们就来看一下编译器在遇到不同情况时所做出的处理如\",{\"1\":{\"20\":1}}],[\"那么我们可以很清楚的知道\",{\"1\":{\"46\":1}}],[\"那么我们通过刚刚的测试代码\",{\"1\":{\"29\":1}}],[\"那么编译器所做出的处理也大不相同\",{\"1\":{\"20\":1}}],[\"指定了输出字符串的数量\",{\"1\":{\"180\":1}}],[\"指的是由大括号\",{\"1\":{\"174\":1}}],[\"指的就是最大堆与最小堆\",{\"1\":{\"38\":1}}],[\"指向\",{\"0\":{\"208\":1}}],[\"指向队尾元素之后的下一个位置\",{\"1\":{\"148\":1}}],[\"指向队首元素的索引\",{\"1\":{\"148\":1}}],[\"指向上一个节点的地址\",{\"1\":{\"140\":1}}],[\"指向下一个节点的地址\",{\"1\":{\"132\":2,\"139\":1,\"140\":1}}],[\"指向同一个环时会被分成两个环\",{\"1\":{\"60\":1}}],[\"指向同一个环\",{\"1\":{\"59\":1}}],[\"指针数组\",{\"1\":{\"167\":1}}],[\"指针\",{\"1\":{\"140\":1}}],[\"指针域\",{\"1\":{\"131\":1}}],[\"指针记录了下一个节点的内存地址\",{\"1\":{\"131\":1}}],[\"指针来进行处理\",{\"1\":{\"20\":2}}],[\"堆排序\",{\"1\":{\"79\":1}}],[\"堆属性\",{\"1\":{\"38\":1}}],[\"堆是一棵树\",{\"1\":{\"38\":1}}],[\"官方概述中有这样说道\",{\"1\":{\"38\":1}}],[\"有些词在\",{\"1\":{\"171\":1}}],[\"有些编译器允许这种形式\",{\"1\":{\"167\":1}}],[\"有\",{\"1\":{\"167\":1}}],[\"有时人们会定义两个结构体\",{\"1\":{\"132\":1}}],[\"有小数需进一\",{\"1\":{\"107\":1}}],[\"有点像循环队列\",{\"1\":{\"54\":1}}],[\"有了一个更清楚的认知\",{\"1\":{\"68\":1}}],[\"有了一个清楚的认识\",{\"1\":{\"45\":1}}],[\"有了一定的了解\",{\"1\":{\"35\":1}}],[\"有所概念\",{\"1\":{\"38\":1}}],[\"包括大写和小写\",{\"1\":{\"171\":1}}],[\"包括著名的费马小定理和欧拉定理\",{\"1\":{\"107\":1}}],[\"包含该程序命令行参数\",{\"1\":{\"167\":1}}],[\"包的方法获得\",{\"1\":{\"84\":1}}],[\"包的实现者无需知道要排序的数据类型是什么\",{\"1\":{\"76\":1}}],[\"包并不只是有排序功能的\",{\"1\":{\"74\":1}}],[\"包里的方法全部阅读一遍了\",{\"1\":{\"62\":1}}],[\"包中找到\",{\"1\":{\"84\":1}}],[\"包中都提供了什么方法\",{\"1\":{\"78\":1}}],[\"包中每个方法之间的调用关系\",{\"1\":{\"62\":1}}],[\"包中所对外提供的方法\",{\"1\":{\"38\":1}}],[\"包中还包括\",{\"1\":{\"38\":1}}],[\"包中\",{\"1\":{\"38\":1,\"75\":1,\"79\":1,\"84\":1}}],[\"包中的内容要有一个大致的了解\",{\"1\":{\"74\":1}}],[\"包中的数据结构一共有两个分别为\",{\"1\":{\"42\":1}}],[\"包中的代码都有些什么\",{\"1\":{\"38\":1}}],[\"包中的\",{\"1\":{\"38\":3}}],[\"包\",{\"1\":{\"38\":1,\"73\":1}}],[\"后者的数组成员可以是不同的数据类型\",{\"1\":{\"205\":1}}],[\"后者相当于左闭右开区间\",{\"1\":{\"101\":1}}],[\"后序\",{\"0\":{\"124\":1,\"128\":1}}],[\"后面\",{\"1\":{\"164\":1}}],[\"后面的那块内存区域被赋值\",{\"1\":{\"113\":1}}],[\"后面添加你想要声明的数据类型\",{\"1\":{\"20\":1}}],[\"后依旧可以读值\",{\"1\":{\"35\":1}}],[\"后是不可以直接被读取的\",{\"1\":{\"34\":1}}],[\"后是可以直接被读取的\",{\"1\":{\"34\":1}}],[\"后也是可以读取值的\",{\"1\":{\"34\":1}}],[\"被删除的元素构成一个子环\",{\"1\":{\"59\":1}}],[\"被赋值为父节点进行下一次循环\",{\"1\":{\"38\":1}}],[\"被\",{\"1\":{\"34\":3,\"35\":1}}],[\"是用来确定是否可以同时上传多个文件\",{\"1\":{\"200\":1}}],[\"是用来决定用户的输入类型\",{\"1\":{\"200\":1}}],[\"是继承自\",{\"1\":{\"198\":1}}],[\"是在\",{\"1\":{\"174\":1}}],[\"是在文件顶层声明的\",{\"1\":{\"174\":1}}],[\"是空指针\",{\"1\":{\"167\":1}}],[\"是要进行转换的字符串\",{\"1\":{\"98\":1}}],[\"是结果的固定大小的缓冲区\",{\"1\":{\"97\":1,\"98\":1}}],[\"是\",{\"1\":{\"97\":1,\"197\":1}}],[\"是指向片的第一个元素的指针\",{\"1\":{\"97\":1}}],[\"是所有\",{\"1\":{\"89\":1}}],[\"是否可以被这些数字整除\",{\"1\":{\"107\":1}}],[\"是否为素数\",{\"1\":{\"107\":1}}],[\"是否为一个空列表\",{\"1\":{\"48\":1}}],[\"是否根据提供的\",{\"1\":{\"85\":1}}],[\"是集合中元素的个数\",{\"1\":{\"76\":1}}],[\"是期望容量\",{\"1\":{\"70\":1}}],[\"是扩容前的切片\",{\"1\":{\"70\":1}}],[\"是如何对\",{\"1\":{\"70\":1}}],[\"是由\",{\"1\":{\"67\":1}}],[\"是不是小于\",{\"1\":{\"55\":1}}],[\"是不可以被\",{\"1\":{\"34\":1}}],[\"是一种动态类型的语言\",{\"1\":{\"188\":1}}],[\"是一种常见的查找算法\",{\"1\":{\"101\":1}}],[\"是一种常见的数据结构\",{\"1\":{\"38\":1}}],[\"是一种基础的数据类型\",{\"1\":{\"89\":1}}],[\"是一个异步\",{\"1\":{\"204\":1}}],[\"是一个核心的标准输入输出\",{\"1\":{\"177\":1}}],[\"是一个指针数组\",{\"1\":{\"167\":1}}],[\"是一个\",{\"1\":{\"167\":1}}],[\"是一个引用类型\",{\"1\":{\"68\":1}}],[\"是一个始终指向当前\",{\"1\":{\"42\":1}}],[\"是与此元素一起存储的值这个不用多说\",{\"1\":{\"42\":1}}],[\"是的话停止便利返回\",{\"1\":{\"61\":1}}],[\"是的话先进行初始化操作在添加元素\",{\"1\":{\"48\":1}}],[\"是的话则直接退出循环\",{\"1\":{\"38\":1}}],[\"是的话之前被记录下来的左子节点\",{\"1\":{\"38\":1}}],[\"是可以任意转换成\",{\"1\":{\"33\":1}}],[\"是其类型的一部分\",{\"1\":{\"18\":1}}],[\"wrapbuffer\",{\"1\":{\"205\":2}}],[\"wrapper\",{\"1\":{\"46\":1}}],[\"width\",{\"1\":{\"172\":2,\"201\":1}}],[\"window\",{\"1\":{\"167\":1,\"190\":2,\"191\":2,\"192\":4,\"193\":2,\"200\":2,\"201\":2,\"202\":5,\"203\":2,\"204\":3,\"205\":1}}],[\"without\",{\"1\":{\"79\":1}}],[\"with\",{\"1\":{\"38\":4,\"42\":1,\"47\":2,\"48\":2,\"54\":1,\"59\":2,\"76\":3,\"77\":1,\"81\":1,\"84\":1,\"126\":1,\"127\":1,\"128\":1}}],[\"want\",{\"1\":{\"97\":1}}],[\"waspartitioned\",{\"1\":{\"79\":3}}],[\"was\",{\"1\":{\"79\":4}}],[\"wasbalanced\",{\"1\":{\"79\":5}}],[\"way\",{\"0\":{\"33\":1},\"1\":{\"33\":2}}],[\"web\",{\"1\":{\"204\":1}}],[\"we\",{\"1\":{\"79\":1,\"94\":1,\"95\":1}}],[\"were\",{\"1\":{\"59\":1,\"79\":1}}],[\"well\",{\"1\":{\"38\":2,\"76\":2}}],[\"which\",{\"1\":{\"42\":1}}],[\"while\",{\"1\":{\"38\":1,\"76\":1,\"101\":2,\"120\":1,\"126\":1,\"127\":1,\"128\":1,\"135\":1,\"136\":1,\"137\":1,\"138\":1,\"139\":4,\"171\":1}}],[\"where\",{\"1\":{\"38\":5,\"81\":1}}],[\"whenever\",{\"1\":{\"38\":1}}],[\"when\",{\"1\":{\"38\":1,\"69\":1,\"70\":1,\"76\":1,\"82\":2}}],[\"whether\",{\"1\":{\"38\":1,\"76\":1,\"77\":1,\"79\":2,\"83\":1,\"85\":1}}],[\"world`\",{\"1\":{\"91\":1}}],[\"world\",{\"1\":{\"29\":4,\"63\":2,\"91\":1,\"164\":1,\"167\":1}}],[\"只读\",{\"1\":{\"204\":3}}],[\"只要达到它们各自拥有独立的内存空间且互不干扰\",{\"1\":{\"193\":1}}],[\"只要按照当前所制定好的\",{\"1\":{\"76\":1}}],[\"只在当前代码块有效\",{\"1\":{\"174\":1}}],[\"只能通过\",{\"1\":{\"205\":1}}],[\"只能由字母\",{\"1\":{\"171\":1}}],[\"只能用于接收数据\",{\"1\":{\"32\":1}}],[\"只能用于发送数据\",{\"1\":{\"31\":1}}],[\"只是一个概念\",{\"1\":{\"205\":1}}],[\"只是为了增强代码可读性\",{\"1\":{\"163\":1}}],[\"只是为了增加代码的可读性\",{\"1\":{\"163\":1}}],[\"只是为了方便阅读代码\",{\"1\":{\"160\":1}}],[\"只是对底层\",{\"1\":{\"68\":1}}],[\"只需将头节点从链表中删除即可\",{\"1\":{\"155\":1}}],[\"只需将\",{\"1\":{\"148\":1}}],[\"只需要在\",{\"1\":{\"31\":1,\"32\":1}}],[\"只有\",{\"1\":{\"113\":1}}],[\"只过是刚刚所看到的方式是插入一个元素\",{\"1\":{\"49\":1}}],[\"只对包内其他方法所提供\",{\"1\":{\"46\":1}}],[\"只不过该方法接收一个函数\",{\"1\":{\"62\":1}}],[\"只不过把传入两个元素中的\",{\"1\":{\"46\":1}}],[\"只不过从中抽象出一个元素将它定义为\",{\"1\":{\"44\":1}}],[\"只不过\",{\"1\":{\"34\":1}}],[\"声明变量的语句必须以分号结尾\",{\"1\":{\"172\":1}}],[\"声明变量时\",{\"1\":{\"172\":1}}],[\"声明了变量\",{\"1\":{\"172\":1}}],[\"声明整数变量\",{\"1\":{\"160\":2}}],[\"声明数组\",{\"0\":{\"111\":1}}],[\"声明\",{\"1\":{\"31\":1,\"32\":1,\"33\":1}}],[\"默认是双向的\",{\"1\":{\"30\":1}}],[\"收发消息有了一定的了解\",{\"1\":{\"29\":1}}],[\"并从图\",{\"1\":{\"204\":1}}],[\"并根据我们的要求读取成我们想要的文件或数据类型\",{\"1\":{\"204\":1}}],[\"并创建任何嵌套对象或数组的新副本\",{\"1\":{\"193\":1}}],[\"并提高程序的可预测性和稳定性\",{\"1\":{\"189\":1}}],[\"并提供全局访问点\",{\"1\":{\"184\":1,\"214\":1}}],[\"并非所有的词都能用作变量名\",{\"1\":{\"171\":1}}],[\"并将它放在一个成为拖放区域的特殊区域中\",{\"1\":{\"201\":1}}],[\"并将所有的属性值都复制过去\",{\"1\":{\"193\":1}}],[\"并将其分配给当前的变量名中\",{\"1\":{\"189\":1}}],[\"并将每个算法封装起来\",{\"1\":{\"186\":1,\"212\":1}}],[\"并将\",{\"1\":{\"148\":3}}],[\"并将结构体中\",{\"1\":{\"56\":1}}],[\"并维护一个变量\",{\"1\":{\"148\":1}}],[\"并在另一端删除元素\",{\"1\":{\"146\":1}}],[\"并在内部对每个元素调用所传入的函数用以来完成某些任务\",{\"1\":{\"62\":1}}],[\"并检查\",{\"1\":{\"107\":1}}],[\"并传递到语法分析阶段\",{\"1\":{\"94\":1}}],[\"并通过new关键字调用构造函数创建实例\",{\"1\":{\"184\":1,\"214\":1}}],[\"并通过\",{\"1\":{\"94\":1}}],[\"并对其进行比较以此类推\",{\"1\":{\"83\":1}}],[\"并没有去单独实现\",{\"1\":{\"77\":1}}],[\"并没有对值做初始化操作\",{\"1\":{\"55\":1}}],[\"并没有表头与表尾的概念\",{\"1\":{\"53\":1}}],[\"并返回一个布尔值\",{\"1\":{\"107\":1}}],[\"并返回\",{\"1\":{\"47\":1,\"48\":2}}],[\"并返回e\",{\"1\":{\"47\":1}}],[\"并且\",{\"1\":{\"198\":1}}],[\"并且指定类型为\",{\"1\":{\"172\":1}}],[\"并且指定位置的赋值与顺序赋值\",{\"1\":{\"112\":1}}],[\"并且很多编译器也不允许这么写\",{\"1\":{\"167\":1}}],[\"并且它会作为程序的起始点\",{\"1\":{\"167\":1}}],[\"并且将值设为\",{\"1\":{\"160\":1}}],[\"并且如果一个正整数能被大于\",{\"1\":{\"107\":1}}],[\"并且不允许出现隐式换行\",{\"1\":{\"93\":1}}],[\"并且要小于\",{\"1\":{\"69\":2}}],[\"并且修改\",{\"1\":{\"68\":1}}],[\"并且我们可以发现\",{\"1\":{\"62\":1}}],[\"并且创建开始之前会判断\",{\"1\":{\"55\":1}}],[\"并且返回\",{\"1\":{\"46\":1}}],[\"并且之前也说过\",{\"1\":{\"45\":1}}],[\"并且在存储方面完全二叉树所占用的内存空间也要比堆大上许多\",{\"1\":{\"38\":1}}],[\"并且对当前定义所传递数据类型中可以知道\",{\"1\":{\"29\":1}}],[\"并不需要过多的存储空间\",{\"1\":{\"38\":1}}],[\"并学到很多东西\",{\"1\":{\"2\":1}}],[\"发布\",{\"1\":{\"186\":1,\"212\":1}}],[\"发消息者与接收者的顺序为先发的先被接收\",{\"1\":{\"29\":1}}],[\"发送者会阻塞直至接收者接收到消息\",{\"1\":{\"29\":1}}],[\"缓存被占满的情况下是会对当前线程进行堵塞的\",{\"1\":{\"29\":1}}],[\"缓存没有被占满的情况下是不会对当前线程进行堵塞的\",{\"1\":{\"29\":1}}],[\"～\",{\"1\":{\"29\":1,\"77\":1}}],[\"90\",{\"1\":{\"192\":7,\"193\":3}}],[\"98\",{\"1\":{\"83\":1}}],[\"9999\",{\"1\":{\"107\":1}}],[\"99\",{\"1\":{\"82\":1,\"111\":1,\"112\":6,\"174\":2}}],[\"9\",{\"1\":{\"29\":2,\"49\":1,\"62\":1,\"68\":2,\"104\":1,\"107\":2,\"112\":4,\"139\":1,\"205\":1}}],[\"导致之后的程序无法运行\",{\"1\":{\"29\":1}}],[\"会成为字符串的一部分\",{\"1\":{\"164\":1}}],[\"会正常运行\",{\"1\":{\"113\":1}}],[\"会增加读代码的难度\",{\"1\":{\"112\":1}}],[\"会存在大量存储空间上的浪费\",{\"1\":{\"107\":1}}],[\"会直接报出\",{\"1\":{\"69\":1}}],[\"会堵塞当前的线程\",{\"1\":{\"29\":1}}],[\"会向\",{\"1\":{\"20\":2}}],[\"在将其用于生产之前\",{\"1\":{\"202\":1}}],[\"在通过用户点击上传后获取\",{\"1\":{\"200\":1}}],[\"在通过调用\",{\"1\":{\"79\":1}}],[\"在一个抽象类中定义一个操作中的框架\",{\"1\":{\"186\":1,\"212\":1}}],[\"在一个复杂的系统运行环境下\",{\"1\":{\"131\":1}}],[\"在运行时动态地向对象添加新的行为\",{\"1\":{\"185\":1,\"216\":1}}],[\"在源码文件顶层声明的变量\",{\"1\":{\"174\":1}}],[\"在标准\",{\"1\":{\"167\":1}}],[\"在非标准的\",{\"1\":{\"167\":1}}],[\"在最新的\",{\"1\":{\"167\":1}}],[\"在最小堆中\",{\"1\":{\"38\":1}}],[\"在程序的开头\",{\"1\":{\"167\":1}}],[\"在语法上\",{\"1\":{\"162\":1}}],[\"在语法分析阶段\",{\"1\":{\"94\":1}}],[\"在当前数组或链表的索引循环中\",{\"1\":{\"149\":1}}],[\"在数组中删除首元素时需要对当前数组进行遍历以确定首元素所在位置\",{\"1\":{\"148\":1}}],[\"在计算机科学中\",{\"1\":{\"143\":1}}],[\"在环形链表中\",{\"1\":{\"140\":1}}],[\"在链表末尾添加节点函数\",{\"1\":{\"135\":1}}],[\"在链表的实现中\",{\"1\":{\"132\":1}}],[\"在解决各种问题时展现出强大的功能\",{\"1\":{\"117\":1}}],[\"在内存中所占的字节数都是相同的\",{\"1\":{\"114\":1}}],[\"在图\",{\"1\":{\"107\":1,\"204\":1}}],[\"在判断一个整数是否为素数时\",{\"1\":{\"107\":1}}],[\"在第\",{\"1\":{\"101\":2}}],[\"在遇到需要手写\",{\"1\":{\"91\":1}}],[\"在编程开发中几乎随时都会使用\",{\"1\":{\"89\":1}}],[\"在切片类型中我们只需提供\",{\"1\":{\"84\":1}}],[\"在刚刚所看的图\",{\"1\":{\"75\":1}}],[\"在本篇文章开始之前\",{\"1\":{\"74\":1}}],[\"在这个例子中\",{\"1\":{\"107\":1}}],[\"在这一篇中我们将继续深入了解一下\",{\"1\":{\"66\":1}}],[\"在这里我们以\",{\"1\":{\"104\":1}}],[\"在这里我们就不做过多描述了\",{\"1\":{\"29\":1}}],[\"在这里就不在从新介绍了\",{\"1\":{\"38\":1}}],[\"在上一篇中我们简单的了解了\",{\"1\":{\"66\":1}}],[\"在此期间我们先来关注一下\",{\"1\":{\"69\":1}}],[\"在此我们可以发现\",{\"1\":{\"68\":1}}],[\"在此就不做过多解释了\",{\"1\":{\"63\":1}}],[\"在此之前我们需要先知道\",{\"1\":{\"25\":1}}],[\"在结尾的最后\",{\"1\":{\"63\":1}}],[\"在进行\",{\"1\":{\"60\":1}}],[\"在增加\",{\"1\":{\"46\":1}}],[\"在使用我们定义\",{\"1\":{\"38\":1}}],[\"在调用\",{\"1\":{\"38\":1}}],[\"在来看具体逻辑\",{\"1\":{\"38\":1}}],[\"在加上\",{\"1\":{\"38\":1}}],[\"在读取和写入时都会对我们当前的线程进行堵塞直到其他线程对其进行处理\",{\"1\":{\"35\":1}}],[\"在某个函数或进程中的使用\",{\"1\":{\"33\":1,\"35\":1}}],[\"在\",{\"1\":{\"30\":1,\"38\":2,\"48\":1,\"69\":1,\"79\":1,\"84\":1,\"89\":1,\"92\":1,\"107\":1,\"110\":1,\"111\":1,\"117\":1,\"167\":1,\"171\":1,\"189\":1,\"191\":1,\"198\":1}}],[\"在发送接收完消息后是可以继续工作的\",{\"1\":{\"29\":1}}],[\"在发送消息后会堵塞当前线程直至该消息被接收后\",{\"1\":{\"29\":1}}],[\"在发送消息后\",{\"1\":{\"29\":1}}],[\"在接收消息前会堵塞当前线程直至收到该消息后\",{\"1\":{\"29\":1}}],[\"~\",{\"1\":{\"29\":1,\"107\":1}}],[\"中分别可以看到\",{\"1\":{\"204\":1}}],[\"中可用\",{\"1\":{\"202\":1}}],[\"中可以看到\",{\"1\":{\"204\":1}}],[\"中可以看到这三种基础类型也是去实现了我们\",{\"1\":{\"77\":1}}],[\"中可以看出分散存储是链表最显著的特征\",{\"1\":{\"132\":1}}],[\"中来对它的数据以不同形式的格式进行读取操作\",{\"1\":{\"197\":1}}],[\"中序\",{\"0\":{\"123\":1,\"127\":1}}],[\"中声明了名为\",{\"1\":{\"111\":1}}],[\"中最开始的操作\",{\"1\":{\"104\":1}}],[\"中最后一个元素\",{\"1\":{\"42\":1}}],[\"中畅通无阻\",{\"1\":{\"104\":1}}],[\"中定义了三个方法\",{\"1\":{\"76\":1}}],[\"中传入值的数量\",{\"1\":{\"70\":1}}],[\"中看看\",{\"1\":{\"69\":1}}],[\"中所说的吗\",{\"1\":{\"45\":1}}],[\"中所示共有三个方法分别为\",{\"1\":{\"38\":1}}],[\"中的元祖\",{\"1\":{\"205\":1}}],[\"中的元素类型\",{\"1\":{\"70\":1}}],[\"中的元素\",{\"1\":{\"68\":1}}],[\"中的内容\",{\"1\":{\"204\":4}}],[\"中的一个对象\",{\"1\":{\"197\":1}}],[\"中的设计模式种类丰富\",{\"1\":{\"183\":1}}],[\"中的最大的圆盘\",{\"1\":{\"104\":1}}],[\"中的字节全部复制到新的内存空间中\",{\"1\":{\"97\":1}}],[\"中的数据类型看起\",{\"1\":{\"75\":1}}],[\"中的移动和删除操作\",{\"1\":{\"49\":1}}],[\"中的第一个元素和最后一个元素\",{\"1\":{\"48\":1}}],[\"中的第一个和最后一个元素的\",{\"1\":{\"44\":1}}],[\"中的\",{\"1\":{\"45\":1,\"48\":1,\"77\":1,\"101\":1,\"205\":1}}],[\"中元素的\",{\"1\":{\"44\":1}}],[\"中有元素存在即返回\",{\"1\":{\"44\":1}}],[\"中第一个元素\",{\"1\":{\"42\":1}}],[\"中都有什么方法\",{\"1\":{\"38\":1}}],[\"中之前发送的数据会先被读取出来\",{\"1\":{\"34\":1}}],[\"中接收者会阻塞直至接收到消息\",{\"1\":{\"29\":1}}],[\"中我们就可以看出为何仅使用数字\",{\"1\":{\"107\":1}}],[\"中我们不难发现\",{\"1\":{\"92\":1}}],[\"中我们看到如果\",{\"1\":{\"69\":1}}],[\"中我们已经大致了解了各种情况中所要扩容的大小\",{\"1\":{\"70\":1}}],[\"中我们已经发现\",{\"1\":{\"43\":1}}],[\"中我们已经可以确定在\",{\"1\":{\"29\":1}}],[\"中我们获取的是数组的长度\",{\"1\":{\"38\":1}}],[\"中我们需要定义的五个方法外\",{\"1\":{\"38\":1}}],[\"中我们可以看到它主要是由两部分组成\",{\"1\":{\"118\":1}}],[\"中我们可以看到在\",{\"1\":{\"84\":1}}],[\"中我们可以看到在该\",{\"1\":{\"76\":1}}],[\"中我们可以看到\",{\"1\":{\"38\":1,\"42\":1,\"54\":1,\"67\":1,\"75\":1,\"84\":1,\"90\":1}}],[\"中我们可以看到该类型包含两个字段\",{\"1\":{\"19\":1}}],[\"中我们可以确认在\",{\"1\":{\"29\":3}}],[\"中我们可以确认\",{\"1\":{\"29\":3}}],[\"中我们可以发现该方法只是对\",{\"1\":{\"60\":1}}],[\"中我们可以发现\",{\"1\":{\"29\":1,\"68\":1}}],[\"中\",{\"1\":{\"27\":1,\"29\":3,\"33\":1,\"38\":1,\"43\":1,\"68\":1,\"104\":6,\"107\":1,\"189\":1,\"191\":1,\"192\":1,\"198\":1}}],[\"与单向链表相比\",{\"1\":{\"140\":1}}],[\"与用于存储数据的数据域\",{\"1\":{\"118\":1}}],[\"与字符串相关的表达式都会由\",{\"1\":{\"94\":1}}],[\"与之不同的是\",{\"1\":{\"90\":1}}],[\"与\",{\"1\":{\"25\":1,\"33\":1,\"38\":2,\"42\":1,\"43\":1,\"46\":1,\"56\":1,\"59\":2,\"60\":1,\"69\":4,\"82\":1,\"84\":1,\"92\":1,\"145\":1,\"201\":2}}],[\"管道\",{\"1\":{\"24\":1}}],[\"关联一个已经打开的文件指针\",{\"1\":{\"179\":1}}],[\"关闭文件\",{\"1\":{\"179\":1}}],[\"关于\",{\"1\":{\"38\":1}}],[\"关于我\",{\"0\":{\"0\":1}}],[\"关键字前面或后面加符号便可\",{\"1\":{\"33\":1}}],[\"关键字前面加上\",{\"1\":{\"32\":1}}],[\"关键字后面加上\",{\"1\":{\"31\":1}}],[\"关键字上来看大致意思为\",{\"1\":{\"24\":1}}],[\"的内容不能直接操作\",{\"1\":{\"205\":1}}],[\"的属性和方法都可以应用于\",{\"1\":{\"198\":1}}],[\"的对象\",{\"1\":{\"190\":1}}],[\"的基础上派生的\",{\"1\":{\"190\":1}}],[\"的层次结构\",{\"1\":{\"185\":1,\"216\":1}}],[\"的返回值\",{\"1\":{\"173\":1}}],[\"的返回值是一个整数\",{\"1\":{\"167\":1}}],[\"的类型是整数\",{\"1\":{\"173\":1}}],[\"的设计原则是把函数作为程序的构成模块\",{\"1\":{\"167\":1}}],[\"的实现版本还支持其他\",{\"1\":{\"167\":1}}],[\"的值就是赋值表达式\",{\"1\":{\"173\":1}}],[\"的值多\",{\"1\":{\"167\":1}}],[\"的值为\",{\"1\":{\"167\":1}}],[\"的引用\",{\"1\":{\"140\":1}}],[\"的引用并将数据读写限定在指定区域内\",{\"1\":{\"68\":1}}],[\"的节点\",{\"1\":{\"136\":1,\"139\":1}}],[\"的整数倍去除掉\",{\"1\":{\"107\":1}}],[\"的平方根\",{\"1\":{\"107\":6}}],[\"的平方是\",{\"1\":{\"107\":1}}],[\"的正整数\",{\"1\":{\"107\":1}}],[\"的正负值来选择查询的方向\",{\"1\":{\"58\":1}}],[\"的数组时\",{\"1\":{\"149\":1}}],[\"的数组\",{\"1\":{\"111\":1}}],[\"的数字\",{\"1\":{\"107\":1}}],[\"的数据结构与之前讲的\",{\"1\":{\"90\":1}}],[\"的数据结构分别由两个指针\",{\"1\":{\"54\":1}}],[\"的数据结构\",{\"1\":{\"19\":1,\"54\":1,\"55\":1,\"67\":1}}],[\"的乘积\",{\"1\":{\"107\":1}}],[\"的乘积不能越界\",{\"1\":{\"69\":2}}],[\"的函数\",{\"1\":{\"107\":1}}],[\"的自然数\",{\"1\":{\"107\":1}}],[\"的原因\",{\"1\":{\"104\":1}}],[\"的原始值\",{\"1\":{\"59\":1}}],[\"的圆盘全部移动到塔\",{\"1\":{\"104\":1}}],[\"的赋值是\",{\"1\":{\"101\":1}}],[\"的结构体指针\",{\"1\":{\"97\":1}}],[\"的时候\",{\"1\":{\"97\":1}}],[\"的知识\",{\"1\":{\"89\":1}}],[\"的开发者解决了这个问题\",{\"1\":{\"84\":1}}],[\"的定义是一个大于\",{\"1\":{\"107\":1}}],[\"的定义开始看起\",{\"1\":{\"76\":1}}],[\"的定义之后\",{\"1\":{\"38\":1}}],[\"的声明方式有很多\",{\"1\":{\"69\":1}}],[\"的一个引用\",{\"1\":{\"68\":1}}],[\"的又一层封装\",{\"1\":{\"68\":1}}],[\"的容量\",{\"1\":{\"67\":1}}],[\"的指针\",{\"1\":{\"67\":1}}],[\"的表头与表尾相连\",{\"1\":{\"53\":1}}],[\"的后面插入一个值为\",{\"1\":{\"48\":1}}],[\"的前面插入一个值为\",{\"1\":{\"48\":1}}],[\"的新元素\",{\"1\":{\"47\":2,\"48\":2}}],[\"的长度\",{\"1\":{\"67\":1,\"97\":1}}],[\"的长度的确是增加了\",{\"1\":{\"46\":1}}],[\"的长度加\",{\"1\":{\"46\":1}}],[\"的长度属性中不记录\",{\"1\":{\"42\":1}}],[\"的零值是一个可以使用的空列表\",{\"1\":{\"45\":1}}],[\"的具体长度进行判断如果等于\",{\"1\":{\"44\":1}}],[\"的元素位置\",{\"1\":{\"60\":1}}],[\"的元素并没有增加但\",{\"1\":{\"46\":1}}],[\"的元素更改其值后重新建立堆排序的问题\",{\"1\":{\"38\":1}}],[\"的元素\",{\"1\":{\"38\":1}}],[\"的判断条件并没有成立\",{\"1\":{\"38\":1}}],[\"的计算中是否存在溢出两者中有一方条件达成即退出循环\",{\"1\":{\"38\":1}}],[\"的方法\",{\"1\":{\"38\":1,\"167\":1}}],[\"的概念就先讲到这里\",{\"1\":{\"38\":1}}],[\"的\",{\"1\":{\"34\":1,\"70\":1,\"167\":1}}],[\"的作用更像是规范双向\",{\"1\":{\"33\":1}}],[\"的特性\",{\"1\":{\"28\":1}}],[\"的学习\",{\"1\":{\"23\":1,\"35\":1}}],[\"也不会影响到深拷贝后的副本\",{\"1\":{\"193\":1}}],[\"也要计算进去\",{\"1\":{\"167\":1}}],[\"也称为原始值\",{\"1\":{\"188\":1}}],[\"也称为事件驱动模式\",{\"1\":{\"186\":1,\"212\":1}}],[\"也称为复合语句\",{\"1\":{\"162\":1}}],[\"也称为质数\",{\"1\":{\"107\":1}}],[\"也可以写在一行\",{\"1\":{\"173\":1}}],[\"也可以根据需要另外命名\",{\"1\":{\"167\":1}}],[\"也可以放在一行语句的结尾\",{\"1\":{\"164\":1}}],[\"也可以成为语句\",{\"1\":{\"161\":1}}],[\"也可以由一个根节点及两棵分别作为其左右子树的二叉树构成\",{\"1\":{\"117\":1}}],[\"也可以获得整个数组在内存中所占的字节数\",{\"1\":{\"114\":1}}],[\"也可将从\",{\"1\":{\"104\":1}}],[\"也是不允许的\",{\"1\":{\"112\":1}}],[\"也是作为\",{\"1\":{\"23\":1}}],[\"也没有多余的空间用来存储当前节点信息\",{\"1\":{\"38\":1}}],[\"也就是之前所创建的\",{\"1\":{\"201\":1}}],[\"也就是链表中的\",{\"1\":{\"132\":1}}],[\"也就是\",{\"1\":{\"107\":1,\"111\":1}}],[\"也就是说所有的\",{\"1\":{\"167\":1}}],[\"也就是说\",{\"1\":{\"104\":1,\"164\":1}}],[\"也就是说想要解决\",{\"1\":{\"104\":1}}],[\"也就是递归执行次数消耗完毕时调用堆排序\",{\"1\":{\"79\":1}}],[\"也就是扩容后至少需要的最小容量\",{\"1\":{\"70\":1}}],[\"也就是我们刚刚提到的\",{\"1\":{\"43\":1}}],[\"也就是我们最开始测试时使用的类型\",{\"1\":{\"33\":1}}],[\"也就是我们使用的第二种声明方\",{\"1\":{\"20\":1}}],[\"也就是我们使用的第一种声明方式\",{\"1\":{\"20\":1}}],[\"也就是只能用于发送数据或者只能用于接收数据的\",{\"1\":{\"30\":1}}],[\"也就是既可以读也可以写\",{\"1\":{\"30\":1}}],[\"来完成\",{\"1\":{\"205\":1}}],[\"来阻止对这个事件的其他处理过程\",{\"1\":{\"201\":1}}],[\"来表示一个索引是否为素数\",{\"1\":{\"107\":1}}],[\"来计算\",{\"1\":{\"101\":1}}],[\"来逃逸双引号\",{\"1\":{\"93\":1}}],[\"来代表你要查询的几步\",{\"1\":{\"58\":1}}],[\"来创建包含数组大小的\",{\"1\":{\"20\":1}}],[\"来看看他的大体实现思路\",{\"1\":{\"20\":1}}],[\"hua\",{\"1\":{\"191\":3,\"192\":4}}],[\"h>\",{\"1\":{\"101\":1,\"104\":2,\"107\":3,\"114\":1,\"132\":2,\"139\":3,\"147\":1,\"148\":1,\"155\":2,\"156\":2,\"167\":1}}],[\"hi\",{\"1\":{\"81\":8}}],[\"hint\",{\"1\":{\"79\":4}}],[\"https\",{\"1\":{\"79\":3,\"202\":1}}],[\"h\",{\"0\":{\"177\":1},\"1\":{\"38\":39,\"82\":12,\"177\":1}}],[\"height\",{\"1\":{\"172\":4,\"201\":1}}],[\"head\",{\"1\":{\"132\":3,\"136\":5,\"138\":4,\"139\":11}}],[\"heapsort\",{\"0\":{\"81\":1},\"1\":{\"79\":3,\"81\":1}}],[\"heapify\",{\"1\":{\"38\":1}}],[\"heap\",{\"0\":{\"38\":1},\"1\":{\"9\":1,\"38\":26,\"81\":3}}],[\"here\",{\"1\":{\"82\":1}}],[\"hello\",{\"1\":{\"29\":9,\"32\":1,\"33\":3,\"63\":2,\"91\":2,\"164\":1,\"167\":1,\"205\":4}}],[\"have\",{\"1\":{\"38\":1,\"54\":1}}],[\"hanoi\",{\"1\":{\"104\":4}}],[\"hannel\",{\"1\":{\"35\":1}}],[\"handle\",{\"1\":{\"20\":1}}],[\"hasownproperty\",{\"1\":{\"193\":1}}],[\"has\",{\"1\":{\"38\":1,\"95\":1}}],[\"hasshape\",{\"1\":{\"20\":1}}],[\"hastparam\",{\"1\":{\"20\":1}}],[\"编译器会忽略注释\",{\"1\":{\"164\":1}}],[\"编译器会在的\",{\"1\":{\"20\":1}}],[\"编码的文本\",{\"1\":{\"89\":1}}],[\"编程学习过程中\",{\"1\":{\"6\":1}}],[\"72\",{\"1\":{\"205\":1}}],[\"74\",{\"1\":{\"84\":1}}],[\"7\",{\"1\":{\"20\":1,\"29\":1,\"38\":1,\"60\":1,\"68\":4,\"97\":1,\"101\":2,\"104\":1,\"107\":1,\"112\":1,\"139\":1,\"205\":1}}],[\"mynum\",{\"1\":{\"189\":4}}],[\"m\",{\"1\":{\"173\":3}}],[\"msanread\",{\"1\":{\"97\":1}}],[\"msanenabled\",{\"1\":{\"97\":1}}],[\"ming\",{\"1\":{\"191\":1,\"192\":4,\"193\":3}}],[\"minimum\",{\"1\":{\"38\":1}}],[\"miniexpr\",{\"1\":{\"20\":1}}],[\"minitype\",{\"1\":{\"20\":1}}],[\"mian\",{\"1\":{\"167\":1}}],[\"mid+1\",{\"1\":{\"79\":1}}],[\"mid\",{\"1\":{\"79\":8,\"101\":13}}],[\"muluintptr\",{\"1\":{\"69\":2,\"70\":1}}],[\"multiple=\",{\"1\":{\"200\":1}}],[\"multiple\",{\"1\":{\"59\":1,\"200\":2,\"202\":1}}],[\"must\",{\"1\":{\"20\":2,\"38\":4,\"47\":2,\"49\":2,\"57\":2,\"58\":1,\"59\":1,\"60\":1,\"76\":4}}],[\"moves\",{\"1\":{\"58\":1}}],[\"move\",{\"0\":{\"58\":1},\"1\":{\"56\":1,\"58\":3,\"60\":3}}],[\"modified\",{\"1\":{\"47\":2}}],[\"method\",{\"1\":{\"77\":3}}],[\"methods\",{\"1\":{\"38\":1,\"77\":2}}],[\"memory\",{\"1\":{\"134\":1,\"139\":1}}],[\"memmove\",{\"1\":{\"97\":2}}],[\"mem\",{\"1\":{\"69\":5}}],[\"message\",{\"1\":{\"29\":16,\"33\":2,\"104\":3}}],[\"malloc\",{\"1\":{\"119\":1,\"134\":6,\"137\":1,\"139\":2,\"147\":2,\"148\":2,\"155\":2,\"156\":2}}],[\"mallocgc\",{\"1\":{\"69\":1,\"97\":1}}],[\"made\",{\"1\":{\"79\":1}}],[\"many\",{\"1\":{\"79\":2}}],[\"maxinsertion\",{\"1\":{\"79\":2}}],[\"maxalloc\",{\"1\":{\"69\":4,\"70\":3}}],[\"mask\",{\"1\":{\"70\":1}}],[\"math\",{\"1\":{\"69\":2,\"70\":1,\"77\":4}}],[\"mark\",{\"1\":{\"47\":13}}],[\"may\",{\"1\":{\"38\":3,\"49\":2,\"76\":1,\"89\":1}}],[\"makeslice\",{\"1\":{\"69\":1}}],[\"make\",{\"0\":{\"69\":1},\"1\":{\"26\":2,\"27\":4,\"29\":8,\"31\":1,\"32\":1,\"33\":2,\"34\":7,\"69\":2}}],[\"main\",{\"0\":{\"167\":1},\"1\":{\"18\":2,\"26\":2,\"27\":4,\"29\":22,\"31\":3,\"32\":3,\"33\":6,\"34\":11,\"50\":4,\"63\":2,\"68\":2,\"101\":1,\"104\":2,\"107\":3,\"114\":1,\"132\":2,\"139\":1,\"148\":1,\"155\":1,\"156\":1,\"167\":19,\"174\":2}}],[\"<button\",{\"1\":{\"202\":1}}],[\"<div\",{\"1\":{\"201\":1}}],[\"<div>\",{\"1\":{\"201\":2}}],[\"<input\",{\"1\":{\"200\":1,\"204\":1}}],[\"<input>\",{\"1\":{\"200\":1}}],[\"<stdlib\",{\"1\":{\"139\":1,\"147\":1,\"148\":1,\"155\":1,\"156\":1}}],[\"<stddef\",{\"1\":{\"132\":2,\"139\":1}}],[\"<stdio\",{\"1\":{\"101\":1,\"104\":2,\"107\":3,\"114\":1,\"139\":1,\"155\":1,\"156\":1,\"167\":1}}],[\"<<\",{\"1\":{\"70\":3,\"107\":3}}],[\"<nil>\",{\"1\":{\"63\":1}}],[\"<=\",{\"1\":{\"29\":1,\"34\":1,\"55\":1,\"60\":1,\"69\":2,\"70\":1,\"79\":2,\"82\":4,\"97\":1,\"98\":1,\"101\":2,\"104\":1,\"107\":2,\"156\":1}}],[\"<\",{\"1\":{\"20\":2,\"29\":20,\"31\":2,\"32\":5,\"33\":7,\"34\":10,\"38\":4,\"55\":1,\"58\":3,\"63\":9,\"69\":4,\"70\":7,\"76\":1,\"77\":4,\"79\":1,\"80\":1,\"81\":1,\"82\":5,\"93\":1,\"94\":1,\"95\":1,\"101\":2,\"107\":8,\"139\":1,\"174\":1,\"205\":1}}],[\"<0\",{\"1\":{\"19\":1}}],[\"url\",{\"1\":{\"198\":1,\"204\":1}}],[\"utf\",{\"1\":{\"89\":2}}],[\"using\",{\"1\":{\"77\":1,\"80\":1}}],[\"used\",{\"1\":{\"42\":1}}],[\"use\",{\"1\":{\"20\":1,\"38\":1,\"42\":1,\"54\":1,\"59\":1,\"84\":1}}],[\"uint\",{\"1\":{\"79\":1,\"82\":2,\"84\":1}}],[\"uint32\",{\"1\":{\"70\":1}}],[\"uint64\",{\"1\":{\"70\":1}}],[\"uintptr\",{\"1\":{\"69\":2,\"70\":18,\"97\":5}}],[\"up\",{\"1\":{\"38\":7}}],[\"union\",{\"1\":{\"171\":1}}],[\"unsigned\",{\"1\":{\"107\":9,\"171\":1}}],[\"unsafe\",{\"1\":{\"67\":3,\"69\":1,\"90\":1,\"91\":1,\"97\":7}}],[\"unbalanced\",{\"1\":{\"79\":1}}],[\"unbuffered\",{\"0\":{\"26\":1},\"1\":{\"25\":1,\"27\":2,\"29\":1}}],[\"undefined\",{\"1\":{\"62\":1,\"193\":3}}],[\"underlying\",{\"1\":{\"38\":1}}],[\"unchanged\",{\"1\":{\"60\":1}}],[\"unlink\",{\"1\":{\"60\":2,\"62\":1}}],[\"unlike\",{\"0\":{\"60\":1},\"1\":{\"60\":1}}],[\"untouched\",{\"1\":{\"54\":1}}],[\"unreachable\",{\"1\":{\"20\":1}}],[\"unknown\",{\"1\":{\"19\":1}}],[\"err\",{\"1\":{\"203\":2}}],[\"erroratf\",{\"1\":{\"93\":1,\"94\":1}}],[\"error\",{\"1\":{\"20\":1,\"29\":3,\"69\":2,\"204\":1}}],[\"errorf\",{\"1\":{\"20\":6,\"93\":1}}],[\"either\",{\"1\":{\"95\":1}}],[\"event\",{\"1\":{\"200\":2,\"201\":5,\"204\":2}}],[\"even\",{\"1\":{\"94\":1}}],[\"evaluation\",{\"1\":{\"59\":1}}],[\"escape\",{\"1\":{\"93\":1,\"95\":2,\"97\":1}}],[\"establishes\",{\"1\":{\"38\":2}}],[\"et\",{\"1\":{\"69\":4,\"70\":12}}],[\"each\",{\"1\":{\"62\":1}}],[\"enum\",{\"1\":{\"171\":1}}],[\"environment\",{\"1\":{\"167\":1}}],[\"envp\",{\"1\":{\"167\":2}}],[\"enough\",{\"1\":{\"95\":1}}],[\"encoded\",{\"1\":{\"89\":1}}],[\"entire\",{\"1\":{\"54\":1}}],[\"end\",{\"1\":{\"54\":1,\"79\":1,\"81\":1}}],[\"empty\",{\"1\":{\"42\":1,\"44\":2,\"54\":1,\"57\":2,\"58\":1,\"59\":1,\"60\":1,\"63\":1,\"89\":1,\"148\":1,\"155\":1,\"156\":1,\"204\":1}}],[\"equivalent\",{\"1\":{\"38\":2}}],[\"equal\",{\"1\":{\"38\":3,\"76\":3,\"79\":1}}],[\"excludeacceptalloption\",{\"1\":{\"202\":1}}],[\"excluding\",{\"1\":{\"42\":1}}],[\"extern\",{\"1\":{\"171\":1}}],[\"extra\",{\"1\":{\"20\":1}}],[\"executes\",{\"1\":{\"61\":1}}],[\"expensive\",{\"1\":{\"38\":1}}],[\"expr\",{\"1\":{\"20\":3}}],[\"example\",{\"0\":{\"68\":1},\"1\":{\"29\":3}}],[\"e\",{\"1\":{\"20\":1,\"43\":8,\"46\":16,\"47\":7,\"48\":8,\"49\":8,\"204\":2}}],[\"else\",{\"1\":{\"70\":3,\"79\":1,\"82\":2,\"97\":1,\"98\":1,\"101\":3,\"107\":1,\"120\":1,\"126\":1,\"127\":1,\"128\":2,\"147\":1,\"171\":1}}],[\"elsewhere\",{\"1\":{\"20\":1}}],[\"elemtype\",{\"1\":{\"20\":4}}],[\"elements\",{\"1\":{\"19\":1,\"38\":6,\"42\":1,\"44\":1,\"55\":1,\"58\":1,\"59\":4,\"60\":1,\"61\":2,\"76\":5,\"79\":5,\"81\":1}}],[\"element\",{\"0\":{\"42\":1},\"1\":{\"19\":1,\"38\":9,\"42\":16,\"43\":7,\"44\":5,\"46\":6,\"47\":8,\"48\":4,\"50\":15,\"54\":3,\"57\":2,\"58\":1,\"59\":2,\"62\":1,\"76\":2,\"81\":1,\"97\":1}}],[\"elem\",{\"1\":{\"19\":2,\"20\":18,\"148\":2}}],[\"volatile\",{\"1\":{\"171\":1}}],[\"void\",{\"1\":{\"104\":2,\"107\":2,\"122\":1,\"123\":1,\"124\":1,\"126\":1,\"127\":1,\"128\":1,\"134\":1,\"135\":1,\"137\":1,\"138\":1,\"139\":3,\"147\":2,\"148\":2,\"155\":2,\"156\":2,\"167\":1,\"171\":1}}],[\"vector\",{\"1\":{\"167\":1}}],[\"very\",{\"1\":{\"79\":1}}],[\"valueof\",{\"1\":{\"84\":1}}],[\"value\",{\"1\":{\"38\":3,\"42\":5,\"45\":1,\"46\":2,\"47\":2,\"48\":2,\"49\":2,\"50\":5,\"54\":4,\"59\":2,\"62\":2,\"63\":7,\"94\":1,\"118\":1,\"132\":2,\"139\":1,\"147\":4,\"155\":1}}],[\"values\",{\"1\":{\"20\":1,\"38\":3,\"76\":3,\"77\":4,\"89\":1}}],[\"vals\",{\"1\":{\"20\":1}}],[\"val\",{\"1\":{\"20\":1,\"119\":2,\"120\":3,\"134\":2,\"136\":3,\"139\":5,\"148\":2,\"155\":2,\"156\":2}}],[\"variant\",{\"1\":{\"84\":1}}],[\"variable\",{\"1\":{\"31\":1,\"32\":1,\"33\":2,\"34\":3}}],[\"var\",{\"1\":{\"18\":2,\"20\":1,\"27\":1,\"31\":1,\"32\":1,\"33\":3,\"38\":1,\"70\":1,\"79\":1,\"84\":2,\"91\":2,\"97\":1,\"98\":1}}],[\"v\",{\"1\":{\"20\":9,\"29\":18,\"33\":2,\"34\":2,\"46\":3,\"47\":8,\"48\":8,\"50\":5,\"68\":2}}],[\"black\",{\"1\":{\"201\":1}}],[\"blob\",{\"0\":{\"196\":1,\"197\":1},\"1\":{\"197\":1,\"198\":6,\"203\":1,\"204\":8,\"205\":4}}],[\"blockquicksort\",{\"1\":{\"79\":1}}],[\"b\",{\"1\":{\"79\":15,\"80\":3,\"81\":2,\"94\":1,\"95\":4,\"98\":5,\"104\":12,\"107\":6,\"174\":4}}],[\"binary\",{\"1\":{\"197\":1}}],[\"binarysearch\",{\"1\":{\"101\":2}}],[\"bigendian\",{\"1\":{\"97\":1}}],[\"bignumber\",{\"1\":{\"69\":1}}],[\"bit\",{\"1\":{\"89\":1,\"107\":1}}],[\"bits\",{\"1\":{\"79\":2,\"84\":1}}],[\"buffer\",{\"1\":{\"97\":1,\"205\":3}}],[\"buffered\",{\"0\":{\"27\":1},\"1\":{\"25\":1,\"27\":2,\"29\":3}}],[\"buf\",{\"1\":{\"94\":1,\"95\":6,\"97\":6,\"98\":6}}],[\"builtin\",{\"1\":{\"89\":2}}],[\"build\",{\"1\":{\"81\":1}}],[\"button>\",{\"1\":{\"202\":1}}],[\"but\",{\"1\":{\"38\":1,\"69\":1,\"79\":1,\"89\":2}}],[\"breakpatterns\",{\"1\":{\"79\":1}}],[\"breaking\",{\"1\":{\"79\":1}}],[\"break\",{\"1\":{\"38\":3,\"81\":1,\"93\":3,\"94\":2,\"171\":1}}],[\"byte\",{\"1\":{\"94\":1,\"97\":4,\"98\":3,\"107\":1}}],[\"bytes\",{\"1\":{\"89\":1}}],[\"by\",{\"1\":{\"38\":4,\"54\":2,\"77\":3,\"97\":1}}],[\"border\",{\"1\":{\"201\":1}}],[\"bool\",{\"1\":{\"38\":4,\"76\":1,\"77\":4,\"82\":2,\"83\":1,\"84\":3,\"85\":2,\"94\":1}}],[\"both\",{\"0\":{\"33\":1},\"1\":{\"33\":2,\"34\":2,\"38\":3,\"42\":1,\"76\":3}}],[\"bound\",{\"1\":{\"19\":2,\"20\":12}}],[\"basic\",{\"0\":{\"221\":1}}],[\"base64\",{\"1\":{\"204\":1}}],[\"based\",{\"1\":{\"79\":1}}],[\"base\",{\"1\":{\"20\":8}}],[\"bar\",{\"1\":{\"97\":1}}],[\"balancethreshold\",{\"1\":{\"79\":3}}],[\"balanced\",{\"1\":{\"79\":1}}],[\"bad\",{\"1\":{\"79\":2,\"94\":1}}],[\"backward\",{\"1\":{\"58\":1}}],[\"backing\",{\"1\":{\"20\":1}}],[\"back\",{\"0\":{\"44\":1},\"1\":{\"20\":1,\"42\":2,\"43\":1,\"44\":6,\"48\":1,\"49\":2,\"79\":2}}],[\"behind\",{\"1\":{\"97\":1}}],[\"behavior\",{\"1\":{\"62\":1}}],[\"better\",{\"1\":{\"70\":1}}],[\"between\",{\"1\":{\"59\":1,\"70\":1,\"97\":1}}],[\"being\",{\"1\":{\"69\":1}}],[\"because\",{\"1\":{\"59\":1}}],[\"becomes\",{\"1\":{\"59\":1}}],[\"beginning\",{\"1\":{\"54\":1}}],[\"belongs\",{\"1\":{\"42\":1}}],[\"been\",{\"1\":{\"38\":1}}],[\"beffered\",{\"1\":{\"34\":1}}],[\"before\",{\"1\":{\"20\":1,\"38\":1,\"47\":1,\"76\":1,\"77\":3,\"79\":2}}],[\"be\",{\"1\":{\"20\":3,\"38\":4,\"47\":2,\"49\":4,\"57\":2,\"58\":1,\"59\":1,\"60\":1,\"76\":2,\"77\":1,\"89\":1,\"95\":1,\"97\":1}}],[\"80\",{\"1\":{\"192\":3,\"193\":3}}],[\"88\",{\"1\":{\"112\":2}}],[\"8\",{\"1\":{\"20\":1,\"29\":1,\"31\":1,\"34\":2,\"68\":5,\"70\":1,\"79\":1,\"84\":1,\"89\":4,\"101\":1,\"107\":3,\"139\":1,\"161\":1}}],[\"60\",{\"1\":{\"192\":7,\"193\":3}}],[\"64\",{\"1\":{\"126\":1,\"127\":1,\"128\":1}}],[\"61\",{\"1\":{\"79\":1}}],[\"63\",{\"1\":{\"70\":1,\"171\":1}}],[\"6\",{\"1\":{\"20\":1,\"29\":2,\"63\":1,\"68\":7,\"79\":1,\"101\":2,\"107\":3,\"112\":9,\"114\":1,\"139\":1}}],[\"obj\",{\"1\":{\"193\":8}}],[\"objb\",{\"1\":{\"191\":2,\"192\":4,\"193\":2}}],[\"obja\",{\"1\":{\"191\":4,\"192\":10,\"193\":3}}],[\"object\",{\"1\":{\"190\":2,\"193\":1,\"197\":1}}],[\"our\",{\"1\":{\"95\":1}}],[\"output\",{\"1\":{\"177\":1}}],[\"out\",{\"1\":{\"69\":3,\"97\":2}}],[\"outside\",{\"1\":{\"20\":1}}],[\"old\",{\"1\":{\"70\":10}}],[\"oliteral\",{\"1\":{\"20\":1}}],[\"o\",{\"0\":{\"178\":1},\"1\":{\"38\":5,\"44\":1}}],[\"others\",{\"1\":{\"77\":1}}],[\"other\",{\"1\":{\"38\":1,\"49\":8,\"77\":1}}],[\"otarray\",{\"1\":{\"20\":3}}],[\"overflowed\",{\"1\":{\"70\":1}}],[\"overflow\",{\"1\":{\"38\":1,\"69\":4,\"70\":5,\"82\":2}}],[\"overview\",{\"0\":{\"24\":1}}],[\"onprogress\",{\"1\":{\"204\":1}}],[\"onloadend\",{\"1\":{\"204\":1}}],[\"onloadstart\",{\"1\":{\"204\":1}}],[\"onload\",{\"1\":{\"204\":3}}],[\"only\",{\"0\":{\"31\":1,\"32\":1},\"1\":{\"20\":1,\"31\":2,\"32\":2,\"33\":2,\"34\":4,\"42\":1,\"69\":1}}],[\"onabort\",{\"1\":{\"204\":1}}],[\"onclick\",{\"1\":{\"202\":1}}],[\"onchange\",{\"1\":{\"200\":2,\"204\":1}}],[\"ondrop\",{\"1\":{\"201\":4}}],[\"ondragover\",{\"1\":{\"201\":4}}],[\"onerror\",{\"1\":{\"204\":1}}],[\"ones\",{\"1\":{\"82\":1}}],[\"one\",{\"1\":{\"54\":1,\"95\":1}}],[\"onto\",{\"1\":{\"38\":1}}],[\"on\",{\"1\":{\"38\":1,\"62\":1,\"76\":1,\"77\":1,\"79\":1,\"81\":1,\"95\":1}}],[\"orlp\",{\"1\":{\"79\":1}}],[\"org\",{\"1\":{\"69\":1,\"79\":1}}],[\"or\",{\"1\":{\"38\":1,\"43\":2,\"44\":2,\"45\":1,\"54\":2,\"58\":1,\"76\":1,\"95\":1}}],[\"original\",{\"1\":{\"38\":1,\"59\":2,\"76\":1}}],[\"orignode\",{\"1\":{\"20\":1}}],[\"ordered\",{\"1\":{\"77\":2}}],[\"ordering\",{\"1\":{\"38\":3,\"76\":2,\"77\":1}}],[\"order\",{\"1\":{\"38\":2,\"59\":1,\"62\":1,\"76\":2,\"77\":3,\"122\":3,\"123\":3,\"124\":3,\"126\":1,\"127\":1,\"128\":1}}],[\"oslicelit\",{\"1\":{\"20\":1}}],[\"oarraylit\",{\"1\":{\"20\":2}}],[\"operands\",{\"1\":{\"95\":1}}],[\"operator\",{\"1\":{\"38\":1,\"76\":1}}],[\"operation\",{\"1\":{\"31\":1,\"32\":1,\"34\":3}}],[\"operate\",{\"0\":{\"30\":1}}],[\"optimized\",{\"1\":{\"84\":1}}],[\"optimizations\",{\"1\":{\"79\":1}}],[\"op\",{\"1\":{\"20\":3}}],[\"ok\",{\"1\":{\"20\":4,\"93\":5,\"94\":5}}],[\"ocomplit\",{\"1\":{\"20\":2}}],[\"offset\",{\"1\":{\"81\":1,\"107\":6}}],[\"of\",{\"1\":{\"19\":1,\"20\":3,\"31\":1,\"32\":1,\"33\":2,\"34\":3,\"38\":6,\"42\":4,\"44\":4,\"47\":4,\"48\":2,\"49\":4,\"54\":1,\"55\":1,\"59\":3,\"61\":2,\"62\":2,\"69\":4,\"76\":2,\"77\":4,\"79\":3,\"81\":2,\"84\":2,\"89\":3,\"94\":2,\"97\":2}}],[\"所有的引用类型都是\",{\"1\":{\"190\":1}}],[\"所有依赖于它的对象都会得到通知并自动更新\",{\"1\":{\"186\":1,\"212\":1}}],[\"所有简单的程序都可以定义其他额外的函数\",{\"1\":{\"167\":1}}],[\"所带来的便利\",{\"1\":{\"76\":1}}],[\"所引用\",{\"1\":{\"68\":1}}],[\"所在\",{\"1\":{\"42\":1}}],[\"所存储的数值是否大于等于其父节点所存储的数值\",{\"1\":{\"38\":1}}],[\"所谓的\",{\"1\":{\"38\":1}}],[\"所以可以把\",{\"1\":{\"204\":1}}],[\"所以可以不按照顺序任意赋值\",{\"1\":{\"112\":1}}],[\"所以除了\",{\"1\":{\"190\":1}}],[\"所以对于大括号外面的代码\",{\"1\":{\"174\":1}}],[\"所以先为\",{\"1\":{\"173\":1}}],[\"所以编译器不必接受这种形式\",{\"1\":{\"167\":1}}],[\"所以\",{\"1\":{\"160\":1,\"173\":2}}],[\"所以总的字节数除以一个元素所占的字节数就是数组的长度\",{\"1\":{\"114\":1}}],[\"所以数组\",{\"1\":{\"111\":1}}],[\"所以数组不能被随意调整大小\",{\"1\":{\"18\":1}}],[\"所以我们通常需要使用拷贝的手段来创建一个新的副本\",{\"1\":{\"191\":1}}],[\"所以我们就有以下等式\",{\"1\":{\"104\":1}}],[\"所以我们不在需要考虑它了\",{\"1\":{\"104\":1}}],[\"所以我们可以使用它支持复杂的多行字符串\",{\"1\":{\"94\":1}}],[\"所以我们先通过\",{\"1\":{\"60\":1}}],[\"所以我们这里就不做区分\",{\"1\":{\"44\":1}}],[\"所以长度赋值为\",{\"1\":{\"45\":1}}],[\"所以这两个方法的逻辑是一致的\",{\"1\":{\"43\":1}}],[\"所以在代码中传递这些值时不需要担心它们被意外地修改\",{\"1\":{\"189\":1}}],[\"所以在何种情况下会触发该条件是值得我们深思的\",{\"1\":{\"57\":1}}],[\"所以在\",{\"1\":{\"38\":1}}],[\"所以堆的数据结构是非线性的\",{\"1\":{\"38\":1}}],[\"所以只读或者只写\",{\"1\":{\"33\":1}}],[\"所示画出一个大概的关系图\",{\"1\":{\"74\":1}}],[\"所示该方法接收一个\",{\"1\":{\"55\":1}}],[\"所示在堆中当前层级的所有节点都没有填满之前是不允许开始下一层的填充的\",{\"1\":{\"38\":1}}],[\"所示在最大堆中\",{\"1\":{\"38\":1}}],[\"所示我们可以使用两种字面量方式在\",{\"1\":{\"91\":1}}],[\"所示我们可以使用两种方式在\",{\"1\":{\"20\":1}}],[\"所示我们可以给当前节点与其父或子节点创建一个映射关系\",{\"1\":{\"38\":1}}],[\"所示只读只写的\",{\"1\":{\"34\":1}}],[\"所示使代码可读性更高\",{\"1\":{\"33\":1}}],[\"所示现在的\",{\"1\":{\"31\":1,\"32\":1}}],[\"所示作为\",{\"1\":{\"24\":1}}],[\"所示\",{\"1\":{\"20\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":3,\"44\":1,\"46\":1,\"62\":1,\"79\":1,\"80\":1,\"82\":1,\"84\":1,\"91\":1,\"101\":1}}],[\"如触点事件或指针事件更或者是放置文件时将文件显示在浏览器窗口中\",{\"1\":{\"201\":1}}],[\"如上所示\",{\"1\":{\"173\":1}}],[\"如整数\",{\"1\":{\"152\":1}}],[\"如完全二叉树\",{\"1\":{\"117\":1}}],[\"如图\",{\"1\":{\"24\":1,\"38\":2,\"54\":1,\"74\":1,\"91\":1}}],[\"如果此时打印\",{\"1\":{\"204\":1}}],[\"如果重写的话\",{\"1\":{\"192\":1}}],[\"如果修改了原对象中的嵌套对象或数组\",{\"1\":{\"192\":1}}],[\"如果你需要区分具体的引用类型\",{\"1\":{\"190\":1}}],[\"如果内层的变量与外层同名\",{\"1\":{\"174\":1}}],[\"如果几个变量具有相同类型\",{\"1\":{\"172\":1}}],[\"如果一个变量没有声明就直接使用会报错\",{\"1\":{\"172\":1}}],[\"如果一个整数\",{\"1\":{\"107\":1}}],[\"如果运行环境不支持程序名称\",{\"1\":{\"167\":1}}],[\"如果对其他非\",{\"1\":{\"167\":1}}],[\"如果语法单位不用空格就能区分\",{\"1\":{\"163\":1}}],[\"如果想取出底部的盘子\",{\"1\":{\"152\":1}}],[\"如果想要移动\",{\"1\":{\"104\":1}}],[\"如果要删除的节点是链表中第一个节点\",{\"1\":{\"137\":1,\"139\":1}}],[\"如果要将整个数组的每一个元素都设置为零\",{\"1\":{\"112\":1}}],[\"如果没有找到\",{\"1\":{\"136\":1,\"139\":1}}],[\"如果没有则返回\",{\"1\":{\"136\":1,\"139\":1}}],[\"如果没有元素被删除\",{\"1\":{\"59\":1}}],[\"如果失败\",{\"1\":{\"134\":1}}],[\"如果分配内存成功\",{\"1\":{\"134\":1}}],[\"如果链表为空\",{\"1\":{\"132\":1,\"135\":1,\"137\":1,\"139\":2}}],[\"如果同时采用指定位置的赋值\",{\"1\":{\"112\":1}}],[\"如果大括号里面的值\",{\"1\":{\"112\":1}}],[\"如果我们令单向链表的尾节点指向头节点\",{\"1\":{\"140\":1}}],[\"如果我们可以将每一个二进制位都利用起来\",{\"1\":{\"107\":1}}],[\"如果我们没有找到这样的因数\",{\"1\":{\"107\":1}}],[\"如果我们发现\",{\"1\":{\"107\":1}}],[\"如果该整数可以被任何一个小于它的正整数整除\",{\"1\":{\"107\":1}}],[\"如果输入的整数小于等于\",{\"1\":{\"107\":1}}],[\"如果将若干个圆盘从起始柱子\",{\"1\":{\"104\":1}}],[\"如果将数组传递给函数\",{\"1\":{\"18\":1}}],[\"如果查找范围为空\",{\"1\":{\"101\":1}}],[\"如果目标值等于中间值\",{\"1\":{\"101\":1}}],[\"如果目标值比中间值大\",{\"1\":{\"101\":2}}],[\"如果目标值比中间值小\",{\"1\":{\"101\":2}}],[\"如果目标值存在返回下标\",{\"1\":{\"101\":1}}],[\"如果相等\",{\"1\":{\"101\":1}}],[\"如果不够就会为新字符串分配一片内存空间\",{\"1\":{\"97\":1}}],[\"如果字符串内部出现双引号\",{\"1\":{\"91\":1}}],[\"如果\",{\"1\":{\"84\":1,\"85\":1,\"107\":2,\"167\":2}}],[\"如果后一位元素始终大于前一位元素\",{\"1\":{\"83\":1}}],[\"如果所传入的\",{\"1\":{\"47\":1}}],[\"如果当前节点是堆顶或者父节点的值小于等于子节点的值则直接退出循环\",{\"1\":{\"38\":1}}],[\"如果当前节点的操作类型是\",{\"1\":{\"20\":2}}],[\"如\",{\"1\":{\"20\":1,\"31\":2,\"32\":2,\"33\":2,\"34\":4,\"38\":2,\"79\":1,\"91\":1,\"101\":1,\"107\":1,\"117\":1}}],[\"类型以外\",{\"1\":{\"190\":1}}],[\"类型转换\",{\"0\":{\"96\":1}}],[\"类型有两种不同的声明方式即双引号和反引号\",{\"1\":{\"92\":1}}],[\"类型说明\",{\"0\":{\"89\":1}}],[\"类型分别为\",{\"1\":{\"67\":1}}],[\"类型至少要有一个元素\",{\"1\":{\"55\":1}}],[\"类型\",{\"0\":{\"196\":1},\"1\":{\"54\":1,\"67\":3,\"101\":1,\"111\":1}}],[\"类型的数据所占有的空间为\",{\"1\":{\"107\":1}}],[\"类型的数据结构\",{\"1\":{\"90\":1}}],[\"类型的取值范围\",{\"1\":{\"101\":1}}],[\"类型的指针\",{\"1\":{\"42\":1}}],[\"类型的\",{\"1\":{\"38\":4,\"55\":2,\"67\":1,\"198\":1}}],[\"类型的结构体\",{\"1\":{\"20\":2}}],[\"类型可以被定义为只读只写\",{\"1\":{\"35\":1}}],[\"类型不会对容量做出限制\",{\"1\":{\"35\":1}}],[\"类型一样其容量也算在类型之中\",{\"1\":{\"27\":1}}],[\"类型并不像\",{\"1\":{\"27\":1}}],[\"类型声明\",{\"0\":{\"20\":1,\"91\":1}}],[\"类型是不同的\",{\"1\":{\"18\":1}}],[\"这关乎着\",{\"1\":{\"204\":1}}],[\"这意味着即使原对象中的嵌套对象或数组发生了变化\",{\"1\":{\"193\":1}}],[\"这意味着变量可以在程序执行期间更改其数据类型\",{\"1\":{\"188\":1}}],[\"这主要是因为在引用类型中\",{\"1\":{\"191\":1}}],[\"这有助于编写无副作用的纯函数\",{\"1\":{\"189\":1}}],[\"这导致声明变量以后\",{\"1\":{\"173\":1}}],[\"这种方法有一些局限性\",{\"1\":{\"193\":1}}],[\"这种注释只能是单行\",{\"1\":{\"164\":1}}],[\"这种注释可以插在行内\",{\"1\":{\"164\":1}}],[\"这种节点插入方法被称为\",{\"1\":{\"155\":1}}],[\"这会导致出队操作效率较低\",{\"1\":{\"148\":1}}],[\"这样也可以实现深拷贝\",{\"1\":{\"193\":1}}],[\"这样\",{\"1\":{\"191\":1}}],[\"这样的好处在于\",{\"1\":{\"189\":1}}],[\"这样做的原因主要是为了更好地管理链表的状态和提供更清晰的数据封装\",{\"1\":{\"132\":1}}],[\"这样我们最终将一个大的问题分解成多个小的问题\",{\"1\":{\"104\":1}}],[\"这很容易引发错误\",{\"1\":{\"113\":1}}],[\"这个变量是不存在的\",{\"1\":{\"174\":1}}],[\"这个字符串的格式是\",{\"1\":{\"167\":1}}],[\"这个算术计算的结果的表达式\",{\"1\":{\"161\":1}}],[\"这个公式计算出的\",{\"1\":{\"148\":1}}],[\"这个位置是不存在的\",{\"1\":{\"113\":1}}],[\"这个方法与我们刚刚了解的\",{\"1\":{\"58\":1}}],[\"这与题目条件不符\",{\"1\":{\"107\":2}}],[\"这时就形成了多层的块作用域\",{\"1\":{\"174\":1}}],[\"这时就要依靠分号判断语句在哪一行结束\",{\"1\":{\"160\":1}}],[\"这时将根据大括号里面的值的数量\",{\"1\":{\"112\":1}}],[\"这时我们可以发现\",{\"1\":{\"104\":1}}],[\"这时执行\",{\"1\":{\"38\":1}}],[\"这也是我们最常用到的\",{\"1\":{\"203\":1}}],[\"这也是注释\",{\"1\":{\"164\":1}}],[\"这也是为什么在抽象过程中\",{\"1\":{\"104\":1}}],[\"这也符合完全二叉树的定义\",{\"1\":{\"38\":1}}],[\"这里就不做过多陈述\",{\"1\":{\"167\":1}}],[\"这里强调几个要点\",{\"1\":{\"101\":1}}],[\"这里我们在来提及一下\",{\"1\":{\"45\":1}}],[\"这三个方法在定义中都会有略微的不同\",{\"1\":{\"76\":1}}],[\"这些对象用于读取和写入缓冲区内容\",{\"1\":{\"205\":1}}],[\"这些保留字也不能用作变量名\",{\"1\":{\"171\":1}}],[\"这些都是排序过程中经常会用到的操作\",{\"1\":{\"76\":1}}],[\"这些品质将伴随他们一生\",{\"1\":{\"6\":1}}],[\"这对于我们接下来的学习有很大的帮助\",{\"1\":{\"74\":1}}],[\"这是创建了两个不同的\",{\"1\":{\"189\":1}}],[\"这是因为我们相当于重写了一个数组\",{\"1\":{\"192\":1}}],[\"这是因为当我们想从新给基础类型赋值来\",{\"1\":{\"189\":1}}],[\"这是因为如果一个整数不是素数\",{\"1\":{\"107\":2}}],[\"这是一行注释\",{\"1\":{\"164\":2}}],[\"这是\",{\"1\":{\"62\":1,\"164\":1}}],[\"这可以帮助我们更好的理解接下来的方法\",{\"1\":{\"43\":1}}],[\"这么看来计算所得为最后一个节点的父节点\",{\"1\":{\"38\":1}}],[\"这五个方法需要使用者根据不同的数据类型去实现\",{\"1\":{\"38\":1}}],[\"这两部分信息组成的存储结构称之为链表的\",{\"1\":{\"131\":1}}],[\"这两个子节点分别称为左子节点和右子节点\",{\"1\":{\"117\":1}}],[\"这两个方法逻辑是一致的都是返回下一个或者上一个环元素\",{\"1\":{\"57\":1}}],[\"这两个方法的逻辑与刚刚看到的\",{\"1\":{\"49\":1}}],[\"这两个方法的逻辑也是一致的\",{\"1\":{\"48\":1}}],[\"这两个方法的逻辑是一致的\",{\"1\":{\"47\":1}}],[\"这两个字段共同构成了数组类型\",{\"1\":{\"19\":1}}],[\"这两者之间最大的区别在于数据的排列方式不同\",{\"1\":{\"38\":1}}],[\"这两种形式是如何声明的\",{\"1\":{\"25\":1}}],[\"从文件读取二进制数据\",{\"1\":{\"179\":1}}],[\"从文件读取整行\",{\"1\":{\"179\":1}}],[\"从文件读取一个字符\",{\"1\":{\"179\":2}}],[\"从文件读取数据\",{\"1\":{\"179\":1}}],[\"从控制台读取整行输入\",{\"1\":{\"178\":1}}],[\"从控制台读取一个字符\",{\"1\":{\"178\":1}}],[\"从控制台读取输入\",{\"1\":{\"178\":1}}],[\"从声明位置开始的整个当前文件都是它的作用域\",{\"1\":{\"174\":1}}],[\"从声明的位置到文件结束都有效\",{\"1\":{\"174\":1}}],[\"从字符串读取数据\",{\"1\":{\"180\":1}}],[\"从字符串\",{\"1\":{\"167\":1}}],[\"从双斜杠到行尾都属于注释\",{\"1\":{\"164\":1}}],[\"从以上代码中可以看出\",{\"1\":{\"132\":1}}],[\"从图\",{\"1\":{\"132\":1,\"198\":1}}],[\"从塔\",{\"1\":{\"104\":1}}],[\"从这点中可以发现许多数据结构的存储方式都依赖于数组\",{\"1\":{\"90\":1}}],[\"从命名中我们可以得知它是一个指向\",{\"1\":{\"67\":1}}],[\"从而使用户能够参数化其他对象的方法调用\",{\"1\":{\"186\":1,\"212\":1}}],[\"从而避免请求的发送者和接收者之间的耦合关系\",{\"1\":{\"186\":1,\"212\":1}}],[\"从而形成一个闭环\",{\"1\":{\"59\":1}}],[\"从而构成了一个单元素循环的链表简称环\",{\"1\":{\"56\":1}}],[\"从而实现一个闭环\",{\"1\":{\"45\":1}}],[\"从函数名中我们可以看出这是将两个\",{\"1\":{\"59\":1}}],[\"从函数名中我们可以猜到它是用来初始化操作的\",{\"1\":{\"56\":1}}],[\"从函数名中我们也能猜到这是一个初始化的方法\",{\"1\":{\"38\":1}}],[\"从刚刚的数据结构\",{\"1\":{\"43\":1}}],[\"从注解中我们可以了解到\",{\"1\":{\"42\":1,\"55\":1}}],[\"从注解中我们也可以看到该方法将元素\",{\"1\":{\"38\":1}}],[\"从堆中删除并返回索引为\",{\"1\":{\"38\":1}}],[\"从堆中删除并返回最小元素\",{\"1\":{\"38\":1}}],[\"从新赋值成右子节点\",{\"1\":{\"38\":1}}],[\"从当前的测试代码\",{\"1\":{\"29\":1}}],[\"从\",{\"1\":{\"19\":1,\"24\":1,\"29\":6,\"33\":1,\"38\":1,\"42\":1,\"54\":1,\"55\":1,\"60\":1,\"67\":1,\"76\":1,\"84\":2,\"90\":1,\"93\":1,\"107\":1,\"118\":1}}],[\"数字和下划线\",{\"1\":{\"171\":1}}],[\"数据对象\",{\"1\":{\"204\":1}}],[\"数据的格式取决于使用哪个方法来启动读取操作\",{\"1\":{\"204\":1}}],[\"数据正在被加载\",{\"1\":{\"204\":1}}],[\"数据类型\",{\"0\":{\"188\":1}}],[\"数据域\",{\"1\":{\"131\":1}}],[\"数据结构是软件开发的基础\",{\"1\":{\"143\":1}}],[\"数据结构很相似\",{\"1\":{\"90\":1}}],[\"数据结构我们看完了\",{\"1\":{\"55\":1}}],[\"数据结构\",{\"0\":{\"19\":1,\"54\":1,\"67\":1,\"90\":1,\"118\":1},\"1\":{\"42\":2},\"2\":{\"116\":1,\"130\":1,\"142\":1,\"151\":1,\"158\":1}}],[\"数组或链表的部分无关操作\",{\"1\":{\"154\":1}}],[\"数组和链表都可以在任意位置添加和删除元素\",{\"1\":{\"154\":1}}],[\"数组中元素的个数\",{\"1\":{\"167\":1}}],[\"数组中包含元素的有效区间为\",{\"1\":{\"148\":1}}],[\"数组中的元素是从\",{\"1\":{\"111\":1}}],[\"数组长度为\",{\"1\":{\"112\":2}}],[\"数组赋值之后\",{\"1\":{\"112\":1}}],[\"数组变量一旦声明\",{\"1\":{\"112\":1}}],[\"数组变量表示整个数组\",{\"1\":{\"18\":1}}],[\"数组在声明时\",{\"1\":{\"112\":1}}],[\"数组在规划内存的详细布局时很有用\",{\"1\":{\"18\":1}}],[\"数组初始化时\",{\"1\":{\"112\":1}}],[\"数组初始化\",{\"0\":{\"112\":1}}],[\"数组通过变量名后加方括号表示\",{\"1\":{\"110\":1,\"111\":1}}],[\"数组是将其相同类型元素存储在连续的内存空间中\",{\"1\":{\"110\":1}}],[\"数组是值\",{\"1\":{\"18\":1}}],[\"数组\",{\"0\":{\"110\":1},\"1\":{\"113\":1}}],[\"数组内容表示该索引对应的数字是否为素数\",{\"1\":{\"107\":1}}],[\"数组的存储数量\",{\"1\":{\"18\":1}}],[\"数组的工作方式有很大的不同\",{\"1\":{\"18\":1}}],[\"数组这个概念在许多语言中皆有存在\",{\"1\":{\"18\":1}}],[\"和引用数据类型\",{\"1\":{\"188\":1}}],[\"和前驱节点\",{\"1\":{\"140\":1}}],[\"和它们自身整除\",{\"1\":{\"107\":1}}],[\"和它自己\",{\"1\":{\"107\":1}}],[\"和它本身以外\",{\"1\":{\"107\":1}}],[\"和一个目标值\",{\"1\":{\"101\":1}}],[\"和长度\",{\"1\":{\"97\":1}}],[\"和表示数组长度的字段\",{\"1\":{\"90\":1}}],[\"和用于存储数据的\",{\"1\":{\"54\":1}}],[\"和数组的大小\",{\"1\":{\"19\":1}}],[\"和\",{\"1\":{\"18\":1,\"38\":1,\"42\":3,\"44\":2,\"56\":1,\"59\":2,\"60\":1,\"67\":1,\"101\":2,\"107\":4,\"147\":2,\"167\":1,\"173\":1,\"198\":1}}],[\"它作为一个整体文件\",{\"1\":{\"205\":1}}],[\"它允许接受\",{\"1\":{\"204\":1}}],[\"它本身是不能直接读写所存储的数据\",{\"1\":{\"197\":1}}],[\"它解耦了事件的生产者和消费者\",{\"1\":{\"186\":1,\"212\":1}}],[\"它提供了丰富的函数和类型定义来处理与外部设备的文本和二进制数据交换\",{\"1\":{\"177\":1}}],[\"它形成一个单独的作用域\",{\"1\":{\"174\":1}}],[\"它们是两种不同的复制对象的方式\",{\"1\":{\"191\":1}}],[\"它们的值是可以改变的\",{\"1\":{\"190\":1}}],[\"它们的值是不可变的\",{\"1\":{\"189\":1}}],[\"它们的值时\",{\"1\":{\"189\":1}}],[\"它们根据功能和目的的不同\",{\"1\":{\"183\":1}}],[\"它们都称为关键字\",{\"1\":{\"171\":1}}],[\"它们负责组织和存储数据以优化算法性能\",{\"1\":{\"143\":1}}],[\"它为程序提供了一个起始点\",{\"1\":{\"167\":1}}],[\"它以独特的分层结构和高效的查找性能\",{\"1\":{\"117\":1}}],[\"它就是素数\",{\"1\":{\"107\":1}}],[\"它接受一个整数作为参数\",{\"1\":{\"107\":1}}],[\"它包含两个移动\",{\"1\":{\"104\":1}}],[\"它的规则是\",{\"1\":{\"174\":1}}],[\"它的位置已经固定不再会移动了\",{\"1\":{\"104\":1}}],[\"它的基本思想是将一个有序的数组按照中间值分成两个部分\",{\"1\":{\"101\":1}}],[\"它会在内存中为每个被复制的对象分配新的空间\",{\"1\":{\"193\":1}}],[\"它会使用传入的缓冲区存储\",{\"1\":{\"98\":1}}],[\"它会判断自己有没有对节点进行操作\",{\"1\":{\"38\":1}}],[\"它由编译器插入到生成的代码中\",{\"1\":{\"97\":1}}],[\"它只能用于单行字符串的初始化\",{\"1\":{\"91\":1}}],[\"它更像是对\",{\"1\":{\"68\":1}}],[\"它将收到数组的副本\",{\"1\":{\"18\":1}}],[\"它不仅是切片的构建块\",{\"1\":{\"18\":1}}],[\"l+n\",{\"1\":{\"95\":1}}],[\"loading\",{\"1\":{\"204\":1}}],[\"long\",{\"1\":{\"95\":1,\"128\":3,\"171\":1}}],[\"lo\",{\"1\":{\"81\":5}}],[\"loop\",{\"1\":{\"70\":1}}],[\"log\",{\"1\":{\"38\":4,\"190\":2,\"191\":2,\"192\":4,\"193\":2,\"200\":1,\"201\":1,\"202\":1,\"203\":2,\"204\":2,\"205\":1}}],[\"l3\",{\"1\":{\"69\":1}}],[\"lhs\",{\"1\":{\"59\":1}}],[\"language\",{\"0\":{\"219\":1}}],[\"latest\",{\"1\":{\"79\":1}}],[\"lazily\",{\"1\":{\"45\":1}}],[\"lazyinit\",{\"1\":{\"45\":3,\"48\":3,\"49\":2}}],[\"last\",{\"1\":{\"42\":1,\"44\":1,\"59\":1,\"79\":2,\"135\":5,\"137\":6,\"139\":11}}],[\"largest\",{\"1\":{\"81\":1}}],[\"large\",{\"1\":{\"20\":1,\"70\":1,\"197\":1}}],[\"l\",{\"1\":{\"42\":4,\"44\":11,\"45\":11,\"46\":6,\"47\":10,\"48\":12,\"49\":12,\"95\":4}}],[\"l14\",{\"1\":{\"38\":1}}],[\"l11\",{\"1\":{\"38\":1}}],[\"l10\",{\"1\":{\"38\":3}}],[\"l7\",{\"1\":{\"38\":2}}],[\"l9\",{\"1\":{\"38\":2}}],[\"l6\",{\"1\":{\"38\":3}}],[\"l5\",{\"1\":{\"38\":2}}],[\"l4\",{\"1\":{\"38\":1}}],[\"let\",{\"1\":{\"189\":1,\"190\":1,\"191\":2,\"192\":4,\"193\":4,\"205\":1}}],[\"leave\",{\"1\":{\"94\":1}}],[\"lessswap\",{\"1\":{\"84\":5}}],[\"less\",{\"1\":{\"38\":18,\"76\":13,\"77\":5,\"79\":1,\"80\":2,\"81\":2,\"83\":1,\"84\":10,\"85\":4}}],[\"leftlen\",{\"1\":{\"79\":3}}],[\"left\",{\"1\":{\"20\":2,\"38\":3,\"101\":15,\"118\":1}}],[\"lenmem\",{\"1\":{\"70\":4}}],[\"len++\",{\"1\":{\"46\":1}}],[\"length\",{\"1\":{\"20\":4,\"42\":1,\"79\":3,\"84\":3,\"97\":1,\"101\":2,\"205\":2}}],[\"len\",{\"0\":{\"61\":1},\"1\":{\"20\":9,\"26\":1,\"27\":3,\"38\":15,\"42\":3,\"44\":6,\"45\":1,\"46\":1,\"49\":2,\"50\":2,\"58\":1,\"60\":2,\"61\":3,\"62\":2,\"63\":2,\"67\":3,\"68\":15,\"69\":13,\"70\":5,\"76\":4,\"77\":6,\"79\":4,\"83\":2,\"84\":5,\"85\":1,\"90\":2,\"91\":1,\"95\":2,\"97\":4,\"98\":4,\"101\":4,\"107\":3,\"114\":3}}],[\"li\",{\"1\":{\"191\":1,\"192\":4,\"193\":3}}],[\"lit\",{\"1\":{\"94\":1}}],[\"litkind\",{\"1\":{\"94\":1}}],[\"literal\",{\"1\":{\"20\":6,\"94\":4}}],[\"lies\",{\"1\":{\"81\":1}}],[\"likely\",{\"1\":{\"79\":1}}],[\"limit\",{\"1\":{\"79\":10,\"84\":2}}],[\"library\",{\"0\":{\"220\":1},\"1\":{\"54\":1}}],[\"linux\",{\"1\":{\"167\":1}}],[\"linking\",{\"1\":{\"59\":2}}],[\"link\",{\"0\":{\"59\":1},\"1\":{\"59\":3,\"60\":6,\"62\":1}}],[\"linked\",{\"1\":{\"42\":3}}],[\"line\",{\"1\":{\"31\":1,\"32\":1,\"33\":1,\"34\":2,\"76\":1,\"77\":3,\"79\":2,\"80\":1,\"81\":2,\"82\":2,\"83\":1,\"84\":4,\"85\":1,\"107\":4}}],[\"lists\",{\"1\":{\"49\":2}}],[\"list\",{\"0\":{\"41\":1,\"42\":1},\"1\":{\"9\":1,\"20\":3,\"41\":1,\"42\":28,\"43\":9,\"44\":18,\"45\":16,\"46\":10,\"47\":12,\"48\":11,\"49\":12,\"50\":63,\"54\":1,\"132\":4,\"135\":5,\"136\":7,\"137\":6,\"138\":7,\"139\":55}}],[\"l26\",{\"1\":{\"18\":1}}],[\"l25\",{\"1\":{\"18\":1}}],[\"l24\",{\"1\":{\"18\":1}}],[\"l23\",{\"1\":{\"18\":1}}],[\"l22\",{\"1\":{\"18\":1}}],[\"32\",{\"1\":{\"84\":1,\"97\":1,\"107\":1,\"205\":1}}],[\"38\",{\"1\":{\"81\":1}}],[\"31\",{\"1\":{\"70\":1}}],[\"3\",{\"1\":{\"18\":5,\"20\":3,\"29\":1,\"34\":1,\"38\":3,\"46\":1,\"50\":3,\"56\":1,\"63\":3,\"67\":1,\"68\":5,\"69\":1,\"70\":1,\"101\":1,\"104\":7,\"107\":8,\"112\":10,\"114\":1,\"139\":1,\"161\":1,\"167\":1,\"173\":1}}],[\"25\",{\"1\":{\"70\":1}}],[\"25x\",{\"1\":{\"70\":1}}],[\"256\",{\"1\":{\"70\":3}}],[\"2x\",{\"1\":{\"70\":1}}],[\"24\",{\"1\":{\"34\":1}}],[\"23\",{\"1\":{\"34\":1,\"63\":2,\"107\":1}}],[\"22\",{\"1\":{\"34\":1,\"112\":5}}],[\"2106\",{\"1\":{\"79\":1}}],[\"21\",{\"1\":{\"34\":1}}],[\"200px\",{\"1\":{\"201\":2}}],[\"20\",{\"1\":{\"18\":1,\"33\":1,\"81\":1,\"174\":2}}],[\"2024\",{\"1\":{\"2\":1}}],[\"2\",{\"1\":{\"18\":5,\"20\":2,\"27\":3,\"29\":4,\"32\":1,\"34\":1,\"38\":13,\"43\":1,\"50\":2,\"55\":1,\"63\":4,\"68\":6,\"70\":5,\"76\":1,\"77\":4,\"79\":2,\"80\":2,\"81\":4,\"82\":2,\"83\":1,\"84\":4,\"85\":1,\"91\":1,\"101\":4,\"104\":5,\"107\":23,\"112\":14,\"114\":1,\"132\":1,\"139\":1,\"155\":1,\"161\":2,\"173\":5,\"198\":1,\"204\":1}}],[\"1px\",{\"1\":{\"201\":1}}],[\"15\",{\"1\":{\"84\":1}}],[\"17\",{\"1\":{\"34\":1,\"107\":1}}],[\"19\",{\"1\":{\"33\":2,\"76\":1,\"77\":3,\"79\":2,\"80\":1,\"81\":2,\"82\":2,\"83\":1,\"84\":4,\"85\":1,\"107\":1}}],[\"18\",{\"1\":{\"33\":1,\"84\":1,\"191\":3}}],[\"16\",{\"1\":{\"32\":1,\"84\":1}}],[\"145\",{\"1\":{\"77\":1}}],[\"14\",{\"1\":{\"31\":1,\"34\":1,\"76\":1,\"84\":1}}],[\"13\",{\"1\":{\"29\":1,\"33\":1,\"107\":1}}],[\"114\",{\"1\":{\"205\":1}}],[\"119\",{\"1\":{\"205\":1}}],[\"111\",{\"1\":{\"205\":2}}],[\"112\",{\"1\":{\"77\":1}}],[\"11\",{\"1\":{\"29\":1,\"33\":1,\"107\":1,\"112\":3}}],[\"122\",{\"1\":{\"112\":6}}],[\"123\",{\"1\":{\"77\":1}}],[\"12\",{\"1\":{\"29\":4,\"33\":1,\"34\":1,\"79\":2,\"112\":6,\"174\":4}}],[\"108\",{\"1\":{\"205\":3}}],[\"101\",{\"1\":{\"205\":1}}],[\"100\",{\"1\":{\"111\":3,\"112\":1,\"113\":2,\"192\":5,\"201\":1,\"205\":1}}],[\"1000\",{\"1\":{\"107\":1}}],[\"10\",{\"1\":{\"18\":1,\"29\":1,\"32\":1,\"34\":1,\"49\":1,\"68\":3,\"80\":1,\"107\":9,\"112\":1,\"139\":1,\"156\":2,\"174\":3}}],[\"1\",{\"1\":{\"18\":5,\"19\":1,\"20\":3,\"24\":1,\"29\":6,\"34\":3,\"38\":16,\"42\":1,\"43\":1,\"44\":2,\"45\":1,\"46\":1,\"49\":2,\"50\":2,\"54\":2,\"55\":1,\"60\":1,\"61\":1,\"63\":5,\"67\":1,\"68\":3,\"70\":3,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"79\":5,\"80\":4,\"81\":3,\"82\":12,\"83\":2,\"85\":2,\"90\":1,\"91\":1,\"95\":1,\"97\":3,\"101\":12,\"104\":21,\"107\":23,\"111\":2,\"112\":11,\"114\":1,\"118\":1,\"126\":1,\"127\":1,\"128\":3,\"139\":1,\"148\":8,\"149\":1,\"155\":1,\"156\":3,\"160\":5,\"161\":3,\"162\":1,\"163\":2,\"164\":2,\"167\":4,\"173\":2,\"174\":1,\"189\":1,\"197\":1,\"204\":1}}],[\"0x1\",{\"1\":{\"128\":2}}],[\"0xffffffff\",{\"1\":{\"107\":1}}],[\"0x3fffffff\",{\"1\":{\"107\":1}}],[\"0xc000010060\",{\"1\":{\"68\":2}}],[\"0xc000010030\",{\"1\":{\"68\":2}}],[\"0xc000072000\",{\"1\":{\"68\":1}}],[\"0xc000050100\",{\"1\":{\"63\":2}}],[\"0xc0000500a0\",{\"1\":{\"63\":3}}],[\"0xc000050080\",{\"1\":{\"63\":3}}],[\"0xc000050060\",{\"1\":{\"63\":3}}],[\"0xc000050040\",{\"1\":{\"63\":3}}],[\"0xc0000500c0\",{\"1\":{\"63\":3}}],[\"0xc000050020\",{\"1\":{\"63\":3}}],[\"0xc00008c1b0\",{\"1\":{\"50\":3}}],[\"0xc00008c1e0\",{\"1\":{\"50\":3}}],[\"0xc00008c180\",{\"1\":{\"50\":3}}],[\"0xc00008c150\",{\"1\":{\"50\":6}}],[\"0xc000066150\",{\"1\":{\"50\":3}}],[\"0xc0000a00c0\",{\"1\":{\"18\":1}}],[\"0xc0000a0020\",{\"1\":{\"18\":1}}],[\"0xc0000a0000\",{\"1\":{\"18\":1}}],[\"05123\",{\"1\":{\"79\":1}}],[\"0\",{\"1\":{\"18\":5,\"20\":4,\"26\":2,\"27\":4,\"29\":1,\"34\":2,\"38\":7,\"44\":4,\"45\":2,\"49\":2,\"50\":1,\"55\":2,\"58\":6,\"60\":2,\"61\":1,\"63\":7,\"68\":5,\"69\":4,\"70\":3,\"79\":4,\"81\":3,\"82\":12,\"83\":1,\"84\":1,\"85\":1,\"89\":1,\"92\":1,\"93\":2,\"94\":2,\"95\":5,\"97\":2,\"101\":3,\"104\":2,\"107\":19,\"111\":2,\"112\":34,\"114\":2,\"126\":1,\"127\":1,\"128\":1,\"132\":2,\"139\":3,\"147\":2,\"148\":3,\"149\":1,\"155\":3,\"156\":2,\"167\":9,\"174\":2,\"192\":1,\"204\":2,\"205\":1}}],[\"target\",{\"1\":{\"101\":6,\"200\":1,\"204\":2}}],[\"tarray\",{\"1\":{\"20\":2}}],[\"turns\",{\"1\":{\"97\":1}}],[\"tmpstringbufsize\",{\"1\":{\"97\":2}}],[\"tmpbuf\",{\"1\":{\"95\":1,\"97\":2,\"98\":2}}],[\"temp\",{\"1\":{\"147\":4}}],[\"terminated\",{\"1\":{\"93\":1,\"94\":1}}],[\"text\",{\"1\":{\"89\":1}}],[\"testing\",{\"0\":{\"28\":1,\"50\":1,\"63\":1}}],[\"two\",{\"1\":{\"70\":1}}],[\"training\",{\"0\":{\"217\":1}}],[\"transition\",{\"1\":{\"70\":2}}],[\"transitive\",{\"1\":{\"38\":2,\"76\":2,\"77\":1}}],[\"true\",{\"1\":{\"20\":3,\"38\":3,\"69\":2,\"76\":3,\"79\":2,\"82\":4,\"83\":1,\"85\":1,\"93\":1,\"94\":2,\"190\":1,\"202\":1}}],[\"throw\",{\"1\":{\"95\":1}}],[\"threshold\",{\"1\":{\"70\":3}}],[\"though\",{\"1\":{\"94\":1}}],[\"than\",{\"1\":{\"38\":1,\"79\":1}}],[\"that\",{\"1\":{\"38\":2,\"42\":1,\"58\":1,\"59\":2,\"76\":1,\"77\":1,\"95\":2,\"97\":1}}],[\"things\",{\"1\":{\"38\":1}}],[\"this\",{\"0\":{\"208\":1},\"1\":{\"38\":3,\"42\":3,\"54\":1,\"70\":1,\"77\":1,\"97\":1,\"193\":1}}],[\"theory\",{\"1\":{\"97\":1}}],[\"there\",{\"1\":{\"95\":1,\"97\":1}}],[\"them\",{\"1\":{\"59\":2}}],[\"they\",{\"1\":{\"49\":2,\"94\":2}}],[\"then\",{\"1\":{\"38\":4,\"76\":3,\"95\":1,\"203\":1}}],[\"the\",{\"1\":{\"20\":3,\"38\":33,\"42\":9,\"43\":2,\"44\":6,\"47\":4,\"48\":2,\"49\":6,\"54\":2,\"57\":2,\"58\":1,\"59\":12,\"60\":3,\"61\":2,\"62\":2,\"69\":1,\"70\":3,\"76\":9,\"77\":4,\"79\":16,\"81\":4,\"82\":2,\"84\":1,\"85\":2,\"89\":1,\"94\":4,\"95\":8,\"97\":11}}],[\"time\",{\"1\":{\"29\":8,\"61\":1}}],[\"tint\",{\"1\":{\"20\":1}}],[\"tccomplit\",{\"1\":{\"20\":7}}],[\"tcarraytype\",{\"1\":{\"20\":5}}],[\"tok\",{\"1\":{\"94\":1}}],[\"token\",{\"1\":{\"94\":1}}],[\"too\",{\"1\":{\"20\":1,\"69\":1,\"79\":1,\"95\":1}}],[\"top++\",{\"1\":{\"126\":1,\"127\":1,\"128\":2}}],[\"top\",{\"1\":{\"20\":1,\"81\":1,\"126\":5,\"127\":5,\"128\":6,\"155\":1,\"156\":1}}],[\"to\",{\"1\":{\"19\":1,\"20\":2,\"32\":1,\"33\":2,\"38\":7,\"42\":3,\"54\":2,\"59\":4,\"61\":1,\"70\":3,\"77\":3,\"79\":4,\"82\":1,\"85\":1,\"97\":6,\"104\":2,\"147\":1}}],[\"typedarrray\",{\"1\":{\"205\":3}}],[\"typedef\",{\"1\":{\"118\":1,\"132\":3,\"139\":2,\"140\":1,\"147\":2,\"148\":1,\"155\":2,\"156\":1,\"171\":1}}],[\"type=\",{\"1\":{\"200\":1,\"204\":1}}],[\"typecheckarraylit\",{\"1\":{\"20\":3}}],[\"typecheckntype\",{\"1\":{\"20\":2}}],[\"typechecks\",{\"1\":{\"20\":1}}],[\"typecheckdef\",{\"1\":{\"20\":1}}],[\"typecheck1\",{\"1\":{\"20\":2}}],[\"typecheck\",{\"1\":{\"20\":7}}],[\"type\",{\"0\":{\"75\":1},\"1\":{\"19\":5,\"20\":19,\"31\":1,\"32\":1,\"33\":4,\"34\":3,\"38\":2,\"42\":2,\"54\":1,\"67\":1,\"69\":3,\"70\":2,\"76\":1,\"77\":3,\"84\":1,\"89\":2,\"90\":1,\"97\":1,\"200\":1}}],[\"typescript\",{\"1\":{\"205\":1}}],[\"types\",{\"1\":{\"19\":2,\"20\":8,\"202\":1}}],[\"typeof\",{\"1\":{\"18\":2,\"26\":1,\"27\":3,\"63\":3,\"190\":1,\"193\":1}}],[\"t\",{\"1\":{\"18\":1,\"20\":15,\"63\":1,\"69\":1,\"107\":2,\"118\":1,\"119\":1}}],[\"58\",{\"1\":{\"82\":1}}],[\"5\",{\"1\":{\"18\":2,\"20\":1,\"27\":1,\"31\":2,\"32\":1,\"38\":2,\"63\":1,\"68\":4,\"82\":1,\"101\":1,\"107\":3,\"112\":9,\"114\":1,\"139\":1,\"192\":1,\"204\":1}}],[\"you\",{\"1\":{\"97\":2}}],[\"yet\",{\"1\":{\"19\":1}}],[\"y\",{\"1\":{\"18\":2,\"173\":8}}],[\"null\",{\"1\":{\"119\":3,\"120\":1,\"122\":3,\"123\":3,\"124\":3,\"126\":3,\"127\":3,\"128\":4,\"132\":3,\"134\":4,\"135\":2,\"136\":4,\"137\":4,\"138\":2,\"139\":16,\"140\":1,\"147\":9,\"148\":3,\"155\":3,\"156\":3,\"190\":1,\"193\":1}}],[\"num\",{\"1\":{\"104\":3,\"173\":5}}],[\"nums\",{\"1\":{\"101\":6,\"148\":1}}],[\"numelem\",{\"1\":{\"20\":1}}],[\"numbers\",{\"1\":{\"107\":14}}],[\"number\",{\"1\":{\"19\":1,\"38\":2,\"44\":1,\"61\":2,\"76\":2,\"77\":2,\"79\":1,\"97\":1,\"107\":8,\"189\":1}}],[\"nlsemi\",{\"1\":{\"94\":1}}],[\"nterface\",{\"1\":{\"84\":1}}],[\"ntype\",{\"1\":{\"20\":7}}],[\"n++\",{\"1\":{\"58\":1,\"61\":1}}],[\"nan\",{\"1\":{\"38\":1,\"76\":1,\"77\":3}}],[\"name\",{\"1\":{\"20\":2,\"190\":1,\"191\":4,\"192\":8,\"193\":4}}],[\"necessarily\",{\"1\":{\"89\":1}}],[\"nextch\",{\"1\":{\"93\":5,\"94\":3}}],[\"next\",{\"0\":{\"43\":1,\"57\":1},\"1\":{\"42\":6,\"43\":6,\"44\":6,\"45\":3,\"46\":4,\"49\":1,\"50\":17,\"54\":2,\"55\":3,\"56\":3,\"57\":7,\"58\":3,\"59\":9,\"60\":1,\"61\":3,\"62\":4,\"63\":18,\"92\":1,\"132\":2,\"137\":1,\"139\":2,\"140\":1,\"147\":1,\"155\":1}}],[\"newline\",{\"1\":{\"93\":1}}],[\"newlenmem\",{\"1\":{\"70\":4}}],[\"newcap\",{\"1\":{\"70\":25}}],[\"newtype\",{\"1\":{\"20\":1}}],[\"new\",{\"0\":{\"45\":1,\"55\":1},\"1\":{\"20\":1,\"38\":1,\"45\":4,\"47\":2,\"48\":2,\"50\":2,\"55\":6,\"57\":1,\"63\":2,\"134\":5,\"139\":5,\"204\":2,\"205\":4}}],[\"newarray\",{\"1\":{\"20\":7}}],[\"need\",{\"1\":{\"20\":1,\"79\":1}}],[\"negative\",{\"1\":{\"20\":1}}],[\"no\",{\"1\":{\"59\":1,\"97\":1}}],[\"not\",{\"1\":{\"38\":2,\"47\":6,\"49\":2,\"54\":1,\"57\":2,\"58\":1,\"59\":3,\"60\":1,\"76\":2,\"77\":4,\"85\":1,\"89\":2,\"93\":1,\"94\":2,\"95\":3,\"97\":2,\"101\":1,\"107\":1}}],[\"note\",{\"1\":{\"38\":2,\"59\":1,\"69\":1,\"76\":1,\"77\":1}}],[\"notinheap\",{\"1\":{\"20\":1}}],[\"non\",{\"1\":{\"20\":2}}],[\"nodes\",{\"1\":{\"20\":1}}],[\"node\",{\"1\":{\"20\":6,\"118\":5,\"119\":10,\"120\":3,\"122\":1,\"123\":1,\"124\":1,\"126\":2,\"127\":2,\"128\":4,\"132\":11,\"134\":10,\"135\":6,\"136\":2,\"137\":12,\"139\":57,\"140\":4,\"147\":25,\"155\":17,\"198\":1}}],[\"nil\",{\"1\":{\"20\":11,\"43\":6,\"44\":5,\"45\":1,\"47\":4,\"49\":2,\"50\":4,\"54\":2,\"55\":1,\"57\":2,\"58\":1,\"59\":2,\"60\":1,\"61\":1,\"62\":1,\"63\":1,\"89\":2,\"95\":3,\"97\":3,\"98\":1}}],[\"n\",{\"1\":{\"18\":5,\"20\":45,\"38\":25,\"50\":5,\"55\":7,\"58\":11,\"59\":4,\"60\":5,\"61\":5,\"63\":4,\"68\":19,\"79\":4,\"82\":7,\"83\":2,\"85\":2,\"93\":2,\"95\":3,\"97\":12,\"101\":3,\"104\":27,\"107\":35,\"114\":1,\"134\":1,\"138\":1,\"139\":2,\"147\":3,\"148\":3,\"149\":3,\"155\":2,\"156\":3,\"167\":1,\"173\":3,\"174\":8}}],[\"duplicate\",{\"1\":{\"79\":1}}],[\"dump\",{\"1\":{\"20\":1,\"63\":2}}],[\"dataview\",{\"1\":{\"205\":3}}],[\"datatransfer\",{\"1\":{\"201\":1}}],[\"data\",{\"0\":{\"75\":1,\"218\":1},\"1\":{\"79\":16,\"80\":4,\"81\":10,\"83\":4,\"95\":1,\"97\":1,\"140\":1,\"147\":1,\"156\":2,\"204\":1}}],[\"div>\",{\"1\":{\"201\":1}}],[\"directly\",{\"1\":{\"95\":1}}],[\"different\",{\"1\":{\"59\":1}}],[\"diag\",{\"1\":{\"20\":1}}],[\"done\",{\"1\":{\"204\":1}}],[\"document\",{\"1\":{\"200\":1,\"201\":1,\"202\":1,\"204\":1}}],[\"docs\",{\"1\":{\"79\":1}}],[\"double\",{\"1\":{\"171\":1}}],[\"doublecap\",{\"1\":{\"70\":3}}],[\"doubly\",{\"1\":{\"42\":2}}],[\"does\",{\"1\":{\"69\":1,\"77\":1,\"95\":2,\"97\":1}}],[\"do\",{\"0\":{\"62\":1},\"1\":{\"54\":1,\"62\":5,\"171\":1}}],[\"down\",{\"1\":{\"38\":11}}],[\"d2\",{\"1\":{\"33\":1}}],[\"d1\",{\"1\":{\"33\":1}}],[\"description\",{\"1\":{\"202\":1}}],[\"describe\",{\"1\":{\"38\":1,\"76\":1}}],[\"deepcopy\",{\"1\":{\"193\":2}}],[\"delete\",{\"1\":{\"137\":1,\"139\":11}}],[\"determined\",{\"1\":{\"95\":1}}],[\"detect\",{\"1\":{\"70\":1}}],[\"decreasinghint\",{\"1\":{\"79\":1}}],[\"define\",{\"1\":{\"82\":2,\"126\":1,\"127\":1,\"128\":1}}],[\"defeating\",{\"1\":{\"79\":1}}],[\"default\",{\"1\":{\"20\":3,\"70\":1,\"171\":1}}],[\"dependency\",{\"1\":{\"77\":1}}],[\"deadlock\",{\"1\":{\"29\":3}}],[\"d\",{\"1\":{\"18\":4,\"68\":15,\"101\":3,\"104\":3,\"107\":4,\"114\":1,\"122\":1,\"123\":1,\"124\":1,\"126\":1,\"127\":1,\"128\":1,\"138\":1,\"139\":1,\"147\":1,\"148\":1,\"155\":1,\"156\":1,\"174\":8}}],[\">点击上传文件<\",{\"1\":{\"202\":1}}],[\"><\",{\"1\":{\"201\":1}}],[\">array\",{\"1\":{\"156\":4}}],[\">top++\",{\"1\":{\"156\":1}}],[\">top\",{\"1\":{\"155\":6,\"156\":6}}],[\">nums\",{\"1\":{\"148\":4}}],[\">next\",{\"1\":{\"134\":1,\"135\":3,\"136\":1,\"137\":8,\"138\":1,\"139\":14,\"147\":3,\"155\":2}}],[\">capacity\",{\"1\":{\"156\":3}}],[\">cap\",{\"1\":{\"148\":5}}],[\">data\",{\"1\":{\"147\":2}}],[\">size++\",{\"1\":{\"147\":1,\"148\":1,\"155\":1}}],[\">size\",{\"1\":{\"147\":3,\"148\":5,\"155\":3}}],[\">rear\",{\"1\":{\"147\":4}}],[\">right\",{\"1\":{\"119\":1,\"120\":1,\"122\":2,\"123\":2,\"124\":2,\"126\":1,\"127\":1,\"128\":1}}],[\">front\",{\"1\":{\"147\":6,\"148\":5}}],[\">head\",{\"1\":{\"135\":3,\"137\":4,\"139\":7}}],[\">val\",{\"1\":{\"126\":1,\"127\":1,\"128\":1}}],[\">value\",{\"1\":{\"119\":1,\"120\":2,\"122\":1,\"123\":1,\"124\":1,\"134\":1,\"136\":1,\"138\":1,\"139\":3,\"155\":2}}],[\">left\",{\"1\":{\"119\":1,\"120\":1,\"122\":2,\"123\":2,\"124\":2,\"126\":1,\"127\":1,\"128\":1}}],[\">>\",{\"1\":{\"70\":2,\"82\":2}}],[\">=\",{\"1\":{\"38\":2,\"58\":1,\"79\":2,\"81\":3,\"126\":1,\"127\":1,\"128\":1}}],[\">\",{\"1\":{\"18\":8,\"38\":1,\"49\":2,\"58\":2,\"63\":7,\"68\":10,\"69\":4,\"70\":6,\"79\":1,\"80\":1,\"82\":5,\"83\":1,\"85\":1,\"101\":3,\"104\":1,\"120\":1,\"138\":1,\"139\":1,\"200\":1,\"204\":1}}],[\"=>\",{\"1\":{\"82\":1,\"200\":1,\"201\":2,\"202\":1,\"203\":2,\"204\":2}}],[\"===\",{\"1\":{\"193\":1}}],[\"==\",{\"1\":{\"18\":3,\"20\":5,\"38\":1,\"44\":2,\"45\":1,\"57\":2,\"58\":1,\"60\":1,\"63\":1,\"70\":3,\"79\":3,\"82\":11,\"93\":3,\"94\":1,\"95\":3,\"97\":2,\"101\":1,\"104\":2,\"107\":7,\"120\":1,\"122\":1,\"123\":1,\"124\":1,\"128\":1,\"134\":1,\"135\":1,\"136\":1,\"137\":3,\"139\":6,\"147\":4,\"148\":3,\"155\":1,\"156\":3,\"174\":1,\"193\":1}}],[\"=\",{\"1\":{\"18\":8,\"20\":22,\"26\":2,\"27\":6,\"29\":27,\"31\":1,\"32\":1,\"33\":8,\"34\":10,\"38\":23,\"43\":6,\"45\":3,\"46\":5,\"47\":2,\"49\":4,\"50\":2,\"55\":7,\"56\":2,\"58\":2,\"59\":7,\"61\":6,\"62\":4,\"63\":21,\"68\":34,\"69\":2,\"70\":30,\"77\":4,\"79\":19,\"80\":2,\"81\":8,\"82\":9,\"83\":2,\"84\":8,\"85\":3,\"91\":4,\"93\":4,\"94\":7,\"95\":12,\"97\":10,\"98\":4,\"101\":13,\"104\":4,\"107\":36,\"112\":28,\"114\":3,\"119\":5,\"120\":4,\"122\":2,\"123\":2,\"124\":2,\"126\":8,\"127\":8,\"128\":11,\"132\":3,\"134\":3,\"135\":5,\"136\":2,\"137\":7,\"138\":2,\"139\":23,\"147\":16,\"148\":11,\"155\":12,\"156\":9,\"160\":3,\"161\":1,\"162\":1,\"163\":3,\"164\":2,\"167\":1,\"173\":14,\"174\":6,\"189\":2,\"190\":1,\"191\":3,\"192\":8,\"193\":4,\"200\":2,\"201\":3,\"202\":4,\"204\":5,\"205\":7}}],[\"axios\",{\"1\":{\"203\":1}}],[\"await\",{\"1\":{\"202\":1,\"203\":1}}],[\"accept\",{\"1\":{\"202\":1}}],[\"according\",{\"1\":{\"38\":1,\"85\":1}}],[\"api\",{\"0\":{\"202\":1},\"1\":{\"202\":1,\"204\":1}}],[\"append\",{\"0\":{\"70\":1},\"1\":{\"70\":2,\"135\":1,\"139\":2}}],[\"app\",{\"1\":{\"29\":3}}],[\"age\",{\"1\":{\"191\":3,\"193\":2}}],[\"avl\",{\"1\":{\"117\":1}}],[\"avoid\",{\"1\":{\"77\":1,\"82\":2}}],[\"abi\",{\"1\":{\"97\":1}}],[\"about\",{\"1\":{\"47\":2}}],[\"auto\",{\"1\":{\"84\":1,\"171\":1}}],[\"after\",{\"1\":{\"38\":2,\"46\":1,\"47\":1,\"59\":2,\"79\":2}}],[\"attaches\",{\"1\":{\"77\":2}}],[\"at\",{\"1\":{\"38\":4,\"46\":10,\"48\":2,\"49\":2,\"60\":1,\"76\":1,\"81\":1}}],[\"add\",{\"1\":{\"38\":2,\"97\":1}}],[\"address\",{\"1\":{\"18\":6,\"68\":10}}],[\"assets\",{\"1\":{\"203\":1}}],[\"assignment\",{\"1\":{\"59\":1}}],[\"assigned\",{\"1\":{\"20\":1}}],[\"async\",{\"1\":{\"202\":1,\"203\":1}}],[\"asanread\",{\"1\":{\"97\":1}}],[\"asanenabled\",{\"1\":{\"97\":1}}],[\"as\",{\"1\":{\"38\":3,\"42\":1,\"54\":2,\"76\":3,\"77\":4,\"79\":2,\"80\":1,\"81\":2,\"82\":2,\"83\":1,\"84\":4,\"85\":1}}],[\"asleep\",{\"1\":{\"29\":3}}],[\"argument\",{\"1\":{\"167\":1}}],[\"arguments\",{\"1\":{\"31\":1,\"32\":1,\"33\":1,\"34\":2,\"167\":1}}],[\"argv\",{\"1\":{\"167\":9}}],[\"argc\",{\"1\":{\"167\":11}}],[\"arxiv\",{\"1\":{\"79\":1}}],[\"are\",{\"1\":{\"29\":3,\"38\":6,\"42\":1,\"54\":1,\"76\":5,\"82\":1,\"89\":1,\"94\":2,\"95\":1}}],[\"arr\",{\"1\":{\"20\":3,\"190\":3}}],[\"arraybuffer\",{\"0\":{\"205\":1},\"1\":{\"204\":1,\"205\":5}}],[\"arraya\",{\"1\":{\"68\":15}}],[\"arrays\",{\"1\":{\"20\":1}}],[\"arraytype\",{\"1\":{\"20\":6}}],[\"array\",{\"0\":{\"18\":1},\"1\":{\"9\":1,\"18\":9,\"19\":4,\"20\":19,\"27\":1,\"67\":5,\"68\":6,\"79\":2,\"81\":1,\"111\":3,\"112\":16,\"113\":3,\"114\":3,\"156\":1,\"190\":2,\"193\":1}}],[\"algorithm\",{\"0\":{\"217\":1},\"1\":{\"79\":1}}],[\"allocate\",{\"1\":{\"147\":1}}],[\"allocation\",{\"1\":{\"134\":1,\"139\":1}}],[\"allowed\",{\"1\":{\"79\":1}}],[\"all\",{\"1\":{\"29\":3,\"89\":1}}],[\"alreadypartitioned\",{\"1\":{\"79\":2}}],[\"already\",{\"1\":{\"20\":1,\"79\":2}}],[\"a\",{\"1\":{\"20\":5,\"38\":5,\"42\":4,\"45\":1,\"46\":1,\"47\":2,\"48\":2,\"49\":2,\"54\":7,\"55\":1,\"59\":3,\"69\":2,\"70\":1,\"76\":4,\"77\":10,\"79\":20,\"80\":4,\"81\":3,\"84\":1,\"85\":1,\"89\":1,\"94\":1,\"95\":7,\"97\":5,\"104\":21,\"107\":11,\"112\":2,\"174\":4}}],[\"answer\",{\"1\":{\"82\":1}}],[\"another\",{\"1\":{\"49\":2}}],[\"any\",{\"1\":{\"38\":6,\"42\":1,\"46\":1,\"47\":2,\"48\":2,\"54\":2,\"62\":1,\"76\":1,\"77\":1,\"84\":2,\"85\":1}}],[\"and\",{\"1\":{\"38\":13,\"42\":3,\"46\":1,\"47\":2,\"48\":2,\"49\":2,\"58\":1,\"59\":6,\"70\":1,\"76\":5,\"79\":1,\"82\":4,\"84\":1,\"95\":1,\"97\":1}}],[\"an\",{\"1\":{\"20\":3,\"38\":1,\"42\":2,\"45\":1,\"47\":2,\"54\":1,\"70\":1,\"81\":1}}],[\"png\",{\"1\":{\"202\":1,\"203\":1}}],[\"pickeropts\",{\"1\":{\"202\":2}}],[\"pivot\",{\"1\":{\"79\":10}}],[\"pivots\",{\"1\":{\"79\":1}}],[\"putc\",{\"1\":{\"179\":1}}],[\"putchar\",{\"1\":{\"178\":1}}],[\"puts\",{\"1\":{\"178\":1}}],[\"pushbacklist\",{\"0\":{\"49\":1},\"1\":{\"49\":3}}],[\"pushback\",{\"0\":{\"48\":1},\"1\":{\"48\":4,\"49\":2,\"50\":3}}],[\"pushfrontlist\",{\"0\":{\"49\":1},\"1\":{\"49\":3}}],[\"pushfront\",{\"0\":{\"48\":1},\"1\":{\"48\":4,\"49\":2}}],[\"pushes\",{\"1\":{\"38\":1}}],[\"push\",{\"1\":{\"38\":10,\"147\":1,\"148\":1,\"155\":3,\"156\":2}}],[\"per\",{\"1\":{\"107\":4}}],[\"ptr\",{\"1\":{\"97\":8,\"118\":1,\"119\":3,\"120\":3,\"122\":1,\"123\":1,\"124\":1,\"126\":2,\"127\":2,\"128\":4}}],[\"ptrsize\",{\"1\":{\"70\":7}}],[\"pdf\",{\"1\":{\"79\":2}}],[\"pdqsort\",{\"1\":{\"79\":14,\"84\":1}}],[\"post\",{\"1\":{\"124\":3,\"128\":1}}],[\"points\",{\"1\":{\"59\":1}}],[\"pointer\",{\"1\":{\"54\":1,\"55\":1,\"67\":3,\"69\":1,\"90\":1,\"91\":1,\"97\":8,\"167\":1}}],[\"pointers\",{\"1\":{\"42\":1,\"54\":1}}],[\"point\",{\"1\":{\"38\":2,\"59\":2,\"76\":2,\"77\":1}}],[\"pop\",{\"1\":{\"38\":12,\"81\":1,\"147\":1,\"148\":1,\"155\":4,\"156\":4}}],[\"places\",{\"1\":{\"77\":1}}],[\"place\",{\"1\":{\"38\":1,\"76\":1}}],[\"prime\",{\"1\":{\"107\":11}}],[\"print\",{\"1\":{\"138\":1,\"139\":3}}],[\"println\",{\"1\":{\"26\":2,\"27\":6,\"29\":13,\"33\":1,\"34\":4,\"63\":3}}],[\"printf\",{\"1\":{\"18\":5,\"50\":5,\"63\":2,\"68\":19,\"101\":2,\"104\":2,\"107\":6,\"114\":1,\"122\":1,\"123\":1,\"124\":1,\"126\":1,\"127\":1,\"128\":1,\"134\":1,\"138\":2,\"139\":3,\"147\":3,\"148\":3,\"155\":2,\"156\":3,\"164\":1,\"167\":1,\"174\":8,\"178\":1}}],[\"provided\",{\"1\":{\"85\":1}}],[\"property\",{\"1\":{\"81\":1}}],[\"proportional\",{\"1\":{\"61\":1}}],[\"probably\",{\"1\":{\"79\":1}}],[\"produce\",{\"1\":{\"69\":1}}],[\"pre\",{\"1\":{\"122\":3,\"126\":1}}],[\"preventdefault\",{\"1\":{\"201\":3}}],[\"prevent\",{\"1\":{\"70\":1}}],[\"previous\",{\"1\":{\"42\":2,\"43\":1,\"57\":1}}],[\"prev\",{\"0\":{\"43\":1,\"57\":1},\"1\":{\"42\":4,\"43\":5,\"44\":6,\"45\":2,\"46\":3,\"47\":1,\"48\":1,\"49\":2,\"50\":5,\"54\":2,\"55\":2,\"56\":3,\"57\":4,\"58\":2,\"59\":4,\"62\":1,\"63\":1,\"140\":1}}],[\"preserves\",{\"1\":{\"38\":1,\"76\":1,\"82\":4}}],[\"prealloc\",{\"1\":{\"20\":1}}],[\"passed\",{\"1\":{\"95\":1}}],[\"pair\",{\"1\":{\"84\":1}}],[\"parens\",{\"1\":{\"97\":1}}],[\"parent\",{\"1\":{\"38\":3}}],[\"parse\",{\"1\":{\"97\":1,\"193\":2}}],[\"part\",{\"1\":{\"94\":2}}],[\"partialinsertionsort\",{\"1\":{\"79\":1}}],[\"partitionequal\",{\"1\":{\"79\":1}}],[\"partitioned\",{\"1\":{\"79\":1}}],[\"partition\",{\"1\":{\"79\":2}}],[\"partitioning\",{\"1\":{\"79\":2}}],[\"paper\",{\"1\":{\"79\":1}}],[\"patterns\",{\"1\":{\"79\":1}}],[\"pattern\",{\"1\":{\"79\":1}}],[\"panics\",{\"1\":{\"85\":1}}],[\"panicmakeslicecap\",{\"1\":{\"69\":1}}],[\"panicmakeslicelen\",{\"1\":{\"69\":1}}],[\"panic\",{\"1\":{\"20\":1,\"69\":1,\"84\":1,\"85\":1}}],[\"package\",{\"1\":{\"18\":1,\"26\":1,\"27\":2,\"29\":8,\"31\":1,\"32\":1,\"33\":2,\"34\":4,\"38\":3,\"50\":2,\"63\":1,\"68\":1,\"77\":1,\"84\":1}}],[\"p\",{\"1\":{\"18\":3,\"43\":6,\"50\":5,\"55\":7,\"59\":3,\"61\":4,\"62\":5,\"63\":9,\"68\":5,\"97\":9,\"119\":6,\"132\":4,\"134\":3,\"135\":2,\"136\":1,\"137\":2,\"139\":10,\"147\":14,\"148\":6,\"155\":12,\"156\":7}}],[\"id=\",{\"1\":{\"200\":1,\"201\":1,\"202\":1,\"204\":1}}],[\"idx\",{\"1\":{\"95\":4}}],[\"idea\",{\"1\":{\"79\":1}}],[\"idempotent\",{\"1\":{\"38\":1}}],[\"i+j\",{\"1\":{\"82\":2}}],[\"i++\",{\"1\":{\"29\":3,\"34\":2,\"55\":1,\"63\":2,\"80\":1,\"104\":1,\"107\":7,\"139\":1,\"156\":1,\"174\":1,\"205\":1}}],[\"it\",{\"1\":{\"61\":1,\"77\":1,\"79\":1,\"85\":1,\"95\":1,\"97\":2}}],[\"itself\",{\"1\":{\"77\":1}}],[\"its\",{\"1\":{\"38\":1}}],[\"image\",{\"1\":{\"202\":1,\"203\":1}}],[\"images\",{\"1\":{\"202\":1}}],[\"immutable\",{\"1\":{\"89\":1}}],[\"immediately\",{\"1\":{\"47\":2}}],[\"imbalanced\",{\"1\":{\"79\":1}}],[\"implicitly\",{\"1\":{\"69\":1}}],[\"implements\",{\"1\":{\"77\":1,\"81\":1,\"95\":1}}],[\"implemented\",{\"1\":{\"42\":1}}],[\"implementation\",{\"1\":{\"38\":3,\"42\":1,\"76\":1,\"77\":1,\"79\":3}}],[\"import\",{\"1\":{\"18\":1,\"26\":1,\"27\":2,\"29\":8,\"33\":1,\"34\":3,\"50\":2,\"63\":1,\"68\":1,\"84\":1}}],[\"i0\",{\"1\":{\"38\":5}}],[\"i\",{\"0\":{\"178\":1},\"1\":{\"29\":8,\"34\":5,\"38\":42,\"49\":8,\"55\":2,\"63\":5,\"68\":2,\"76\":13,\"77\":19,\"80\":3,\"81\":8,\"82\":23,\"83\":5,\"84\":4,\"85\":6,\"95\":2,\"104\":4,\"107\":30,\"139\":3,\"149\":1,\"156\":3,\"174\":11,\"205\":4}}],[\"isarray\",{\"1\":{\"193\":1}}],[\"issorted\",{\"0\":{\"83\":1},\"1\":{\"83\":3,\"85\":1}}],[\"issue\",{\"1\":{\"69\":1}}],[\"isnan\",{\"1\":{\"77\":7}}],[\"ispoweroftwo\",{\"1\":{\"70\":1}}],[\"ish\",{\"1\":{\"70\":1}}],[\"is\",{\"1\":{\"20\":5,\"38\":10,\"42\":4,\"44\":3,\"46\":1,\"47\":4,\"54\":2,\"59\":3,\"60\":1,\"62\":1,\"69\":3,\"76\":2,\"77\":5,\"79\":3,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"85\":2,\"89\":1,\"95\":2,\"97\":7,\"107\":7,\"147\":1,\"148\":2,\"155\":1,\"156\":2}}],[\"isinteger\",{\"1\":{\"20\":1}}],[\"inline\",{\"1\":{\"171\":1}}],[\"include\",{\"1\":{\"101\":1,\"104\":2,\"107\":3,\"114\":1,\"132\":2,\"139\":3,\"147\":1,\"148\":1,\"155\":2,\"156\":2,\"167\":1}}],[\"increasinghint\",{\"1\":{\"79\":2}}],[\"increasing\",{\"1\":{\"77\":3}}],[\"increments\",{\"1\":{\"46\":1}}],[\"indices\",{\"1\":{\"97\":1}}],[\"indexes\",{\"1\":{\"38\":1,\"76\":1}}],[\"index\",{\"1\":{\"38\":15,\"76\":3,\"107\":6}}],[\"indexlit\",{\"1\":{\"20\":1}}],[\"infinite\",{\"1\":{\"70\":1}}],[\"instanceof\",{\"1\":{\"190\":2}}],[\"instead\",{\"1\":{\"69\":1}}],[\"insertionsort\",{\"0\":{\"80\":1},\"1\":{\"79\":1,\"80\":2}}],[\"insertion\",{\"1\":{\"59\":1,\"80\":1}}],[\"inserted\",{\"1\":{\"59\":1,\"97\":1}}],[\"insertafter\",{\"0\":{\"47\":1},\"1\":{\"47\":3}}],[\"insertbefore\",{\"0\":{\"47\":1},\"1\":{\"47\":3}}],[\"inserts\",{\"1\":{\"46\":1,\"47\":2,\"48\":2,\"49\":2}}],[\"insertvalue\",{\"0\":{\"46\":1},\"1\":{\"46\":3,\"47\":2,\"48\":2,\"49\":2}}],[\"insert\",{\"0\":{\"46\":1},\"1\":{\"46\":6}}],[\"initialization\",{\"1\":{\"47\":2}}],[\"initializes\",{\"1\":{\"45\":2}}],[\"initialized\",{\"1\":{\"20\":1,\"45\":1}}],[\"init\",{\"0\":{\"45\":1,\"56\":1},\"1\":{\"38\":4,\"45\":10,\"56\":4,\"57\":3,\"58\":1}}],[\"invariant\",{\"1\":{\"82\":2}}],[\"invariants\",{\"1\":{\"38\":3,\"82\":1}}],[\"invalidated\",{\"1\":{\"38\":1}}],[\"invalid\",{\"1\":{\"20\":3,\"31\":1,\"32\":1,\"34\":3}}],[\"involved\",{\"1\":{\"38\":1,\"76\":1}}],[\"input\",{\"0\":{\"200\":1},\"1\":{\"38\":1,\"76\":1,\"177\":1,\"200\":1}}],[\"in\",{\"1\":{\"20\":1,\"38\":6,\"42\":1,\"47\":2,\"58\":1,\"61\":2,\"62\":1,\"76\":4,\"77\":6,\"79\":2,\"80\":1,\"81\":2,\"82\":3,\"83\":1,\"84\":5,\"85\":1,\"93\":1,\"94\":1,\"95\":2,\"97\":1,\"123\":3,\"127\":1,\"193\":1}}],[\"int8array\",{\"1\":{\"205\":1}}],[\"into\",{\"1\":{\"79\":1,\"81\":2,\"97\":1}}],[\"intslice\",{\"1\":{\"77\":6}}],[\"introduce\",{\"0\":{\"74\":1}}],[\"integer\",{\"1\":{\"38\":1}}],[\"interface\",{\"0\":{\"76\":1},\"1\":{\"29\":1,\"38\":23,\"50\":2,\"76\":6,\"77\":5,\"79\":3,\"80\":1,\"81\":2,\"83\":1}}],[\"internally\",{\"1\":{\"42\":1}}],[\"internal\",{\"1\":{\"19\":1,\"20\":6,\"92\":1,\"93\":1,\"94\":3}}],[\"int64val\",{\"1\":{\"20\":1}}],[\"int64\",{\"1\":{\"19\":1,\"20\":2}}],[\"int\",{\"0\":{\"77\":1},\"1\":{\"18\":8,\"20\":5,\"26\":3,\"27\":8,\"29\":2,\"33\":4,\"34\":6,\"38\":11,\"42\":1,\"44\":1,\"55\":2,\"58\":1,\"60\":1,\"61\":1,\"63\":1,\"67\":5,\"68\":4,\"69\":1,\"70\":6,\"76\":3,\"77\":11,\"79\":1,\"80\":1,\"81\":2,\"82\":9,\"84\":4,\"85\":1,\"90\":1,\"97\":1,\"101\":13,\"104\":7,\"107\":30,\"111\":2,\"112\":16,\"114\":3,\"118\":1,\"119\":1,\"120\":1,\"126\":1,\"127\":1,\"128\":1,\"132\":5,\"134\":1,\"136\":1,\"139\":6,\"140\":1,\"147\":4,\"148\":11,\"155\":4,\"156\":10,\"160\":3,\"161\":1,\"162\":1,\"163\":3,\"164\":2,\"167\":6,\"171\":2,\"172\":5,\"173\":5,\"174\":7}}],[\"ir\",{\"1\":{\"20\":20}}],[\"if\",{\"1\":{\"19\":1,\"20\":13,\"38\":10,\"43\":3,\"44\":4,\"45\":2,\"47\":5,\"55\":1,\"57\":2,\"58\":1,\"59\":4,\"60\":2,\"61\":1,\"62\":2,\"63\":1,\"69\":2,\"70\":4,\"76\":3,\"79\":11,\"81\":3,\"82\":2,\"83\":1,\"85\":2,\"93\":5,\"94\":2,\"95\":7,\"97\":8,\"98\":1,\"101\":4,\"104\":2,\"107\":9,\"119\":1,\"120\":2,\"122\":3,\"123\":3,\"124\":3,\"126\":1,\"127\":1,\"128\":2,\"134\":1,\"135\":1,\"136\":1,\"137\":3,\"139\":6,\"147\":5,\"148\":4,\"155\":3,\"156\":4,\"171\":1,\"174\":2,\"193\":2}}],[\"43\",{\"1\":{\"189\":2}}],[\"44\",{\"1\":{\"112\":2}}],[\"40\",{\"1\":{\"85\":1}}],[\"4085\",{\"1\":{\"69\":1}}],[\"42\",{\"1\":{\"79\":1,\"173\":2,\"189\":2}}],[\"4d\",{\"1\":{\"63\":1}}],[\"4\",{\"1\":{\"18\":4,\"20\":3,\"27\":2,\"29\":2,\"34\":1,\"38\":2,\"63\":2,\"68\":11,\"70\":2,\"77\":1,\"101\":1,\"107\":6,\"112\":5,\"114\":1,\"139\":1,\"161\":1,\"204\":1}}],[\"xmlhttprequest\",{\"1\":{\"198\":1}}],[\"xiao\",{\"1\":{\"191\":3,\"192\":4}}],[\"x=1\",{\"1\":{\"163\":1}}],[\"x+y+z+\",{\"1\":{\"95\":1}}],[\"x\",{\"1\":{\"18\":5,\"38\":6,\"77\":50,\"84\":9,\"85\":6,\"95\":5,\"160\":8,\"161\":1,\"162\":2,\"163\":2,\"164\":3,\"173\":10,\"174\":3}}],[\"fetch\",{\"1\":{\"203\":2}}],[\"ferror\",{\"1\":{\"179\":1}}],[\"feof\",{\"1\":{\"179\":1}}],[\"ftell\",{\"1\":{\"179\":1}}],[\"fsetpos\",{\"1\":{\"179\":1}}],[\"fseek\",{\"1\":{\"179\":1}}],[\"fscanf\",{\"1\":{\"179\":1}}],[\"fwrite\",{\"1\":{\"179\":1}}],[\"fgetpos\",{\"1\":{\"179\":1}}],[\"fgets\",{\"1\":{\"179\":1}}],[\"fgetc\",{\"1\":{\"179\":1}}],[\"fputs\",{\"1\":{\"179\":1}}],[\"fputc\",{\"1\":{\"179\":1}}],[\"fprintf\",{\"1\":{\"179\":1}}],[\"fclose\",{\"1\":{\"179\":1}}],[\"full\",{\"1\":{\"148\":1,\"156\":1}}],[\"fundamental\",{\"1\":{\"97\":1}}],[\"funcpcabiinternal\",{\"1\":{\"97\":1}}],[\"functions\",{\"0\":{\"78\":1}}],[\"function\",{\"1\":{\"62\":1,\"84\":1,\"85\":1,\"95\":1,\"193\":2}}],[\"func\",{\"1\":{\"18\":3,\"20\":4,\"26\":1,\"27\":2,\"29\":12,\"31\":1,\"32\":1,\"33\":5,\"34\":4,\"38\":7,\"43\":2,\"44\":3,\"45\":3,\"46\":2,\"47\":2,\"48\":2,\"49\":2,\"50\":2,\"55\":1,\"56\":1,\"57\":2,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"62\":2,\"63\":2,\"68\":2,\"69\":1,\"70\":2,\"77\":13,\"79\":2,\"80\":1,\"81\":2,\"82\":4,\"83\":1,\"84\":9,\"85\":2,\"92\":1,\"93\":1,\"94\":3,\"95\":1,\"97\":1,\"98\":1}}],[\"fr\",{\"1\":{\"204\":5}}],[\"fread\",{\"1\":{\"179\":1}}],[\"freopen\",{\"1\":{\"179\":1}}],[\"free\",{\"1\":{\"137\":2,\"139\":2,\"147\":1,\"155\":1}}],[\"frame\",{\"1\":{\"95\":1}}],[\"front\",{\"0\":{\"44\":1},\"1\":{\"42\":2,\"43\":1,\"44\":6,\"48\":1,\"49\":2,\"50\":12,\"147\":1,\"148\":6}}],[\"from\",{\"1\":{\"20\":1,\"31\":1,\"34\":1,\"38\":3,\"59\":1,\"60\":1,\"70\":1,\"79\":2,\"104\":2}}],[\"f\",{\"1\":{\"62\":5,\"77\":3,\"82\":11,\"104\":4}}],[\"fopen\",{\"1\":{\"179\":1}}],[\"foo\",{\"1\":{\"97\":1}}],[\"foundation\",{\"0\":{\"219\":1}}],[\"found\",{\"1\":{\"82\":1,\"101\":1}}],[\"following\",{\"1\":{\"59\":1}}],[\"followed\",{\"1\":{\"38\":1}}],[\"formula\",{\"1\":{\"70\":1}}],[\"form\",{\"1\":{\"59\":1}}],[\"forward\",{\"1\":{\"58\":1,\"62\":1}}],[\"for\",{\"1\":{\"20\":1,\"29\":3,\"34\":2,\"38\":8,\"42\":1,\"46\":1,\"49\":2,\"54\":2,\"55\":2,\"58\":2,\"59\":2,\"61\":1,\"62\":1,\"63\":2,\"70\":4,\"76\":2,\"77\":2,\"79\":1,\"80\":2,\"81\":3,\"82\":2,\"83\":1,\"84\":1,\"85\":1,\"93\":1,\"94\":2,\"95\":2,\"97\":1,\"104\":1,\"107\":9,\"139\":1,\"156\":1,\"171\":1,\"174\":2,\"193\":1,\"205\":1}}],[\"float\",{\"1\":{\"171\":1}}],[\"float64slice\",{\"1\":{\"38\":1,\"76\":1,\"77\":6}}],[\"float64\",{\"0\":{\"77\":1},\"1\":{\"38\":1,\"76\":1,\"77\":3}}],[\"float32\",{\"1\":{\"38\":1,\"76\":1}}],[\"floating\",{\"1\":{\"38\":2,\"76\":2,\"77\":1}}],[\"filehandle\",{\"1\":{\"202\":2}}],[\"files\",{\"1\":{\"200\":1,\"201\":1,\"204\":1}}],[\"filelist\",{\"1\":{\"200\":1}}],[\"filereader\",{\"0\":{\"204\":1},\"1\":{\"198\":1,\"204\":15,\"205\":1}}],[\"file\",{\"0\":{\"198\":1},\"1\":{\"198\":7,\"200\":1,\"204\":5}}],[\"finish\",{\"1\":{\"120\":2}}],[\"findnull\",{\"1\":{\"91\":1}}],[\"find\",{\"0\":{\"82\":1},\"1\":{\"82\":2,\"97\":1,\"120\":1}}],[\"final\",{\"1\":{\"38\":1,\"76\":1}}],[\"fix\",{\"1\":{\"38\":4}}],[\"fixed\",{\"1\":{\"20\":1,\"97\":1}}],[\"first+root\",{\"1\":{\"81\":2}}],[\"first+child+1\",{\"1\":{\"81\":1}}],[\"first+child\",{\"1\":{\"81\":3}}],[\"first+i\",{\"1\":{\"81\":1}}],[\"first\",{\"1\":{\"29\":1,\"42\":1,\"44\":1,\"81\":7,\"97\":1}}],[\"fields\",{\"1\":{\"19\":1}}],[\"failed\",{\"1\":{\"101\":1,\"134\":1,\"139\":1,\"147\":1}}],[\"fall\",{\"1\":{\"79\":1}}],[\"falling\",{\"1\":{\"79\":1}}],[\"false\",{\"1\":{\"18\":1,\"38\":4,\"63\":2,\"76\":4,\"80\":1,\"82\":4,\"83\":1,\"85\":1,\"93\":3,\"94\":1,\"97\":1,\"202\":1}}],[\"fatal\",{\"1\":{\"29\":3}}],[\"fatalf\",{\"1\":{\"20\":2}}],[\"fmt\",{\"1\":{\"18\":6,\"26\":3,\"27\":8,\"29\":21,\"33\":2,\"34\":7,\"50\":7,\"63\":6,\"68\":20}}],[\"rawbyteslice\",{\"1\":{\"98\":2}}],[\"rawstringtmp\",{\"1\":{\"95\":1}}],[\"rawstring\",{\"0\":{\"94\":1},\"1\":{\"92\":2,\"94\":3}}],[\"racereadrangepc\",{\"1\":{\"97\":1}}],[\"raceenabled\",{\"1\":{\"97\":1}}],[\"range\",{\"1\":{\"69\":3,\"95\":2}}],[\"rv\",{\"1\":{\"84\":4,\"85\":2}}],[\"rs\",{\"1\":{\"79\":1}}],[\"rust\",{\"1\":{\"79\":2}}],[\"runtime\",{\"1\":{\"70\":2,\"90\":1,\"95\":1}}],[\"rtype\",{\"1\":{\"63\":1}}],[\"r\",{\"1\":{\"55\":5,\"56\":6,\"57\":11,\"58\":10,\"59\":19,\"60\":10,\"61\":5,\"62\":6,\"63\":19,\"94\":1}}],[\"roundupsize\",{\"1\":{\"70\":4}}],[\"routines\",{\"1\":{\"38\":2}}],[\"root\",{\"1\":{\"42\":8,\"43\":3,\"44\":8,\"45\":7,\"48\":4,\"49\":2,\"50\":2,\"81\":4,\"120\":2,\"122\":7,\"123\":7,\"124\":7,\"126\":10,\"127\":10,\"128\":15}}],[\"rightlen\",{\"1\":{\"79\":3}}],[\"right\",{\"1\":{\"38\":3,\"101\":14,\"118\":1}}],[\"rings\",{\"1\":{\"54\":2,\"59\":1}}],[\"ring\",{\"0\":{\"53\":1,\"54\":1},\"1\":{\"9\":1,\"42\":1,\"53\":4,\"54\":14,\"55\":11,\"56\":5,\"57\":9,\"58\":6,\"59\":14,\"60\":6,\"61\":5,\"62\":6,\"63\":5}}],[\"rename\",{\"1\":{\"179\":1}}],[\"rewind\",{\"1\":{\"179\":1}}],[\"register\",{\"1\":{\"171\":1}}],[\"relatively\",{\"1\":{\"97\":1}}],[\"relation\",{\"1\":{\"77\":1}}],[\"reversing\",{\"1\":{\"79\":1}}],[\"reverserange\",{\"1\":{\"79\":1}}],[\"revise\",{\"1\":{\"68\":2}}],[\"reader\",{\"1\":{\"205\":3}}],[\"readastext\",{\"1\":{\"204\":1,\"205\":1}}],[\"readasdataurl\",{\"1\":{\"204\":4}}],[\"readasbinarystring\",{\"1\":{\"204\":1}}],[\"readasarraybuffer\",{\"1\":{\"204\":1}}],[\"readystate\",{\"1\":{\"204\":2}}],[\"ready\",{\"1\":{\"42\":1}}],[\"rear\",{\"1\":{\"147\":1,\"148\":7}}],[\"reasonably\",{\"1\":{\"79\":1}}],[\"requested\",{\"1\":{\"70\":1}}],[\"required\",{\"1\":{\"38\":1,\"77\":1}}],[\"remains\",{\"1\":{\"60\":1}}],[\"removed\",{\"1\":{\"59\":2,\"60\":1}}],[\"removes\",{\"1\":{\"38\":2,\"59\":1,\"60\":1}}],[\"remove\",{\"1\":{\"38\":8,\"47\":2,\"179\":1}}],[\"re\",{\"1\":{\"38\":1}}],[\"reference\",{\"1\":{\"54\":1,\"59\":1}}],[\"refer\",{\"1\":{\"38\":1}}],[\"reflectswapper\",{\"1\":{\"84\":3}}],[\"reflectvalueof\",{\"1\":{\"84\":3,\"85\":1}}],[\"reflect\",{\"1\":{\"18\":3,\"26\":2,\"27\":5,\"63\":3,\"84\":4}}],[\"recognized\",{\"1\":{\"94\":1}}],[\"recv\",{\"1\":{\"33\":4}}],[\"receive\",{\"0\":{\"32\":1},\"1\":{\"31\":1,\"32\":2,\"33\":3,\"34\":11}}],[\"responce\",{\"1\":{\"203\":2}}],[\"respect\",{\"1\":{\"38\":1}}],[\"restrict\",{\"1\":{\"171\":1}}],[\"res\",{\"1\":{\"20\":1}}],[\"result\",{\"1\":{\"20\":1,\"38\":1,\"59\":3,\"60\":1,\"76\":1,\"95\":2,\"97\":2,\"101\":3,\"204\":8}}],[\"representing\",{\"1\":{\"89\":1}}],[\"represented\",{\"1\":{\"54\":1}}],[\"represents\",{\"1\":{\"20\":1,\"42\":1}}],[\"report\",{\"1\":{\"77\":1}}],[\"reports\",{\"1\":{\"38\":1,\"76\":1,\"77\":1,\"83\":1,\"85\":1}}],[\"reported\",{\"1\":{\"20\":1}}],[\"returns\",{\"1\":{\"20\":1,\"38\":2,\"43\":2,\"44\":3,\"45\":1,\"46\":1,\"47\":2,\"48\":2,\"57\":2,\"58\":1,\"59\":1}}],[\"return\",{\"1\":{\"20\":11,\"38\":4,\"43\":4,\"44\":5,\"45\":2,\"46\":2,\"47\":4,\"48\":2,\"55\":2,\"56\":1,\"57\":4,\"58\":2,\"59\":1,\"60\":2,\"61\":1,\"63\":1,\"69\":1,\"77\":7,\"79\":4,\"81\":1,\"82\":2,\"83\":2,\"85\":2,\"94\":1,\"95\":4,\"97\":3,\"98\":1,\"101\":3,\"104\":5,\"107\":6,\"114\":1,\"119\":1,\"120\":1,\"122\":1,\"123\":1,\"124\":1,\"132\":2,\"134\":2,\"135\":1,\"136\":2,\"137\":3,\"139\":9,\"147\":4,\"148\":5,\"155\":3,\"156\":5,\"167\":5,\"171\":1,\"174\":1,\"193\":3}}],[\"而是创建一个新的数值并重新分配给\",{\"1\":{\"189\":1}}],[\"而又不暴露其底层表示\",{\"1\":{\"186\":1,\"212\":1}}],[\"而将一些步骤延迟到子类中实现\",{\"1\":{\"186\":1,\"212\":1}}],[\"而无需指定具体的产品类\",{\"1\":{\"184\":1,\"214\":1}}],[\"而无需指定具体的类\",{\"1\":{\"184\":1,\"214\":1}}],[\"而对于出栈操作\",{\"1\":{\"155\":1}}],[\"而当数组非常大时\",{\"1\":{\"131\":1}}],[\"而那实际上是其他变量的区域\",{\"1\":{\"113\":1}}],[\"而在我们当前的\",{\"1\":{\"107\":1}}],[\"而在堆中则不需要这样\",{\"1\":{\"38\":1}}],[\"而保存这两个数字使用\",{\"1\":{\"107\":1}}],[\"而表达式\",{\"1\":{\"107\":1}}],[\"而反引号声明的字符串可以摆脱单行的限制\",{\"1\":{\"91\":1}}],[\"而反之则不可以\",{\"1\":{\"33\":1}}],[\"而除去这三种基础类型后\",{\"1\":{\"75\":1}}],[\"而现在这两个方式是通过对其传入的\",{\"1\":{\"49\":1}}],[\"而且难以发现\",{\"1\":{\"113\":1}}],[\"而且在这两个方法中的\",{\"1\":{\"47\":1}}],[\"而且我们也一直在强调是完全二叉树并非普通的二叉树\",{\"1\":{\"38\":1}}],[\"而之前的\",{\"1\":{\"46\":1}}],[\"而不复制其内部的引用\",{\"1\":{\"192\":1}}],[\"而不是实际的对象或数组本身\",{\"1\":{\"192\":1}}],[\"而不是直接改变了原始数值的值\",{\"1\":{\"189\":1}}],[\"而不是每次都新建一个全新的实例\",{\"1\":{\"184\":1,\"214\":1}}],[\"而不是\",{\"1\":{\"101\":2}}],[\"而不是nil\",{\"1\":{\"59\":1}}],[\"而不是指向它的指针\",{\"1\":{\"18\":1}}],[\"而不能用于写数据\",{\"1\":{\"32\":1}}],[\"而不能用于接收数据\",{\"1\":{\"31\":1}}],[\"而\",{\"1\":{\"18\":1,\"42\":1,\"84\":1,\"107\":2,\"167\":2}}],[\"长度不能超过\",{\"1\":{\"171\":1}}],[\"长度为\",{\"1\":{\"89\":1,\"111\":1}}],[\"长度\",{\"1\":{\"18\":2}}],[\"score\",{\"1\":{\"192\":8,\"193\":3}}],[\"scanf\",{\"1\":{\"178\":1}}],[\"scanner\",{\"1\":{\"92\":2,\"93\":2,\"94\":5}}],[\"scale\",{\"1\":{\"107\":12}}],[\"snprintf\",{\"1\":{\"180\":1}}],[\"sprintf\",{\"1\":{\"180\":1}}],[\"specified\",{\"1\":{\"59\":1}}],[\"specific\",{\"1\":{\"19\":1}}],[\"specially\",{\"1\":{\"20\":1}}],[\"sscanf\",{\"1\":{\"180\":1}}],[\"sys\",{\"1\":{\"70\":2}}],[\"syntax\",{\"1\":{\"20\":1,\"92\":1,\"93\":1,\"94\":3}}],[\"shift\",{\"1\":{\"70\":9}}],[\"short\",{\"1\":{\"171\":1}}],[\"should\",{\"1\":{\"20\":1,\"77\":1}}],[\"showopenfilepicker\",{\"0\":{\"202\":1},\"1\":{\"202\":3}}],[\"show\",{\"1\":{\"18\":2}}],[\"smooth\",{\"1\":{\"70\":1}}],[\"small\",{\"1\":{\"70\":1,\"95\":1}}],[\"saying\",{\"1\":{\"69\":1}}],[\"same\",{\"1\":{\"49\":2,\"59\":1}}],[\"solid\",{\"1\":{\"201\":1}}],[\"so\",{\"1\":{\"95\":1}}],[\"source\",{\"1\":{\"94\":2}}],[\"someone\",{\"1\":{\"69\":1}}],[\"sorts\",{\"1\":{\"79\":1,\"80\":1}}],[\"sorting\",{\"1\":{\"77\":3}}],[\"sorted\",{\"1\":{\"38\":1,\"79\":1,\"83\":1,\"85\":1,\"101\":5}}],[\"sort\",{\"0\":{\"73\":1,\"79\":1},\"1\":{\"9\":1,\"38\":17,\"73\":1,\"74\":2,\"75\":2,\"76\":5,\"77\":22,\"78\":1,\"79\":6,\"80\":2,\"81\":2,\"82\":2,\"83\":2,\"84\":9,\"85\":1}}],[\"succeed\",{\"1\":{\"101\":1}}],[\"such\",{\"1\":{\"42\":1,\"59\":1}}],[\"subslice\",{\"1\":{\"97\":1}}],[\"subring\",{\"1\":{\"59\":2,\"60\":1}}],[\"supplied\",{\"1\":{\"69\":1}}],[\"summarize\",{\"0\":{\"35\":1}}],[\"s\",{\"1\":{\"38\":1,\"59\":16,\"60\":1,\"68\":2,\"79\":1,\"92\":4,\"93\":13,\"94\":21,\"95\":2,\"98\":6}}],[\"swapper\",{\"1\":{\"84\":1}}],[\"swap方法一般是不需要改动的\",{\"1\":{\"84\":1}}],[\"swaps\",{\"1\":{\"38\":1,\"76\":1}}],[\"swap\",{\"1\":{\"38\":8,\"76\":3,\"77\":3,\"80\":1,\"81\":2,\"84\":7}}],[\"switch\",{\"1\":{\"20\":3,\"58\":1,\"70\":1,\"92\":1,\"171\":1}}],[\"sleep\",{\"1\":{\"29\":3}}],[\"sliceissorted\",{\"0\":{\"85\":1},\"1\":{\"85\":3}}],[\"slicestable\",{\"0\":{\"84\":1},\"1\":{\"84\":5}}],[\"slices\",{\"1\":{\"70\":2}}],[\"slicebytetostring\",{\"1\":{\"97\":4}}],[\"sliceb\",{\"1\":{\"68\":26}}],[\"slicea\",{\"1\":{\"68\":25}}],[\"slice\",{\"0\":{\"66\":1,\"67\":1,\"84\":1},\"1\":{\"9\":1,\"66\":1,\"67\":7,\"68\":7,\"69\":1,\"70\":17,\"79\":4,\"84\":10,\"85\":3,\"90\":2,\"95\":1,\"97\":4}}],[\"selectelement\",{\"1\":{\"200\":2,\"201\":3,\"202\":2,\"204\":2}}],[\"select\",{\"1\":{\"193\":2}}],[\"segment\",{\"1\":{\"94\":3}}],[\"search\",{\"0\":{\"82\":1},\"1\":{\"82\":5,\"101\":2,\"136\":1,\"139\":11}}],[\"serves\",{\"1\":{\"54\":1}}],[\"sentinel\",{\"1\":{\"42\":2}}],[\"send\",{\"0\":{\"31\":1},\"1\":{\"29\":5,\"31\":2,\"32\":1,\"33\":7,\"34\":7,\"198\":1}}],[\"see\",{\"1\":{\"38\":1,\"47\":2,\"69\":1,\"76\":1}}],[\"second\",{\"1\":{\"29\":4}}],[\"sets\",{\"1\":{\"94\":1}}],[\"setllit\",{\"1\":{\"94\":1}}],[\"setlit\",{\"1\":{\"93\":1,\"94\":4}}],[\"set\",{\"1\":{\"70\":1,\"89\":1}}],[\"sethasshape\",{\"1\":{\"20\":1}}],[\"sethastparam\",{\"1\":{\"20\":1}}],[\"setnotinheap\",{\"1\":{\"20\":1}}],[\"setop\",{\"1\":{\"20\":2}}],[\"setotype\",{\"1\":{\"20\":1}}],[\"settype\",{\"1\":{\"20\":3}}],[\"setdiag\",{\"1\":{\"20\":1}}],[\"stopimmediatepropagation\",{\"1\":{\"201\":1}}],[\"stoppropagation\",{\"1\":{\"201\":1}}],[\"stored\",{\"1\":{\"42\":1,\"95\":1}}],[\"stdio\",{\"0\":{\"177\":1},\"1\":{\"177\":1}}],[\"stdstring\",{\"0\":{\"93\":1},\"1\":{\"92\":2,\"93\":3}}],[\"still\",{\"1\":{\"59\":1}}],[\"standard\",{\"0\":{\"220\":1},\"1\":{\"177\":1}}],[\"star\",{\"1\":{\"171\":3}}],[\"start\",{\"1\":{\"79\":1}}],[\"starting\",{\"1\":{\"60\":1,\"76\":1,\"77\":3,\"79\":2,\"80\":1,\"81\":2,\"82\":2,\"83\":1,\"84\":4,\"85\":1}}],[\"static\",{\"1\":{\"171\":1}}],[\"staticuint64s\",{\"1\":{\"97\":1}}],[\"state\",{\"1\":{\"94\":1}}],[\"statement\",{\"0\":{\"25\":1}}],[\"stack\",{\"1\":{\"95\":1,\"126\":4,\"127\":4,\"128\":5,\"155\":34,\"156\":38}}],[\"stable\",{\"1\":{\"38\":1,\"76\":1,\"84\":1}}],[\"str\",{\"1\":{\"90\":1,\"91\":9,\"97\":8}}],[\"structure\",{\"0\":{\"218\":1}}],[\"struct\",{\"0\":{\"42\":2},\"1\":{\"19\":1,\"20\":2,\"42\":2,\"54\":1,\"67\":1,\"84\":1,\"90\":1,\"118\":3,\"132\":5,\"139\":3,\"140\":3,\"147\":3,\"148\":1,\"155\":3,\"156\":1,\"171\":1}}],[\"stringify\",{\"1\":{\"193\":2}}],[\"stringtoslicebyte\",{\"1\":{\"98\":2}}],[\"stringdataonstack\",{\"1\":{\"95\":1}}],[\"stringlit\",{\"1\":{\"93\":1,\"94\":3}}],[\"stringstructof\",{\"1\":{\"97\":5}}],[\"stringstruct\",{\"1\":{\"90\":1,\"97\":1}}],[\"strings\",{\"1\":{\"89\":1}}],[\"stringslice\",{\"1\":{\"77\":6}}],[\"string\",{\"0\":{\"77\":1,\"88\":1},\"1\":{\"9\":1,\"29\":5,\"31\":2,\"32\":2,\"33\":8,\"34\":4,\"77\":2,\"89\":8,\"90\":3,\"91\":2,\"92\":1,\"93\":2,\"94\":4,\"95\":8,\"97\":3,\"98\":1}}],[\"similar\",{\"1\":{\"82\":1}}],[\"simplify\",{\"1\":{\"42\":1}}],[\"siftdown\",{\"1\":{\"81\":4}}],[\"since\",{\"1\":{\"69\":1,\"94\":1}}],[\"single\",{\"1\":{\"59\":1}}],[\"signed\",{\"1\":{\"171\":1}}],[\"sign\",{\"1\":{\"20\":1}}],[\"sizeof\",{\"1\":{\"101\":2,\"107\":1,\"114\":5,\"119\":1,\"134\":1,\"139\":1,\"147\":2,\"148\":2,\"155\":2,\"156\":2,\"171\":1}}],[\"size\",{\"1\":{\"20\":8,\"69\":4,\"70\":9,\"97\":1,\"126\":2,\"127\":2,\"128\":2,\"132\":1,\"139\":3,\"147\":1,\"148\":7,\"155\":1}}],[\"src\",{\"1\":{\"19\":1,\"20\":6,\"38\":9,\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"46\":1,\"47\":1,\"48\":1,\"49\":1,\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"62\":1,\"76\":1,\"77\":3,\"79\":2,\"80\":1,\"81\":2,\"82\":2,\"83\":1,\"84\":4,\"85\":1,\"89\":1,\"90\":1,\"92\":1,\"93\":1,\"94\":3,\"95\":1,\"203\":1}}],[\"c99\",{\"1\":{\"164\":1,\"167\":1}}],[\"createimagebitmap\",{\"1\":{\"198\":1}}],[\"createobjecturl\",{\"1\":{\"198\":1}}],[\"create\",{\"1\":{\"119\":1,\"134\":1,\"139\":2,\"147\":3,\"148\":1,\"155\":2,\"156\":2}}],[\"creates\",{\"1\":{\"55\":1,\"59\":1}}],[\"crs\",{\"1\":{\"94\":1}}],[\"cmp\",{\"1\":{\"82\":11}}],[\"cmd\",{\"1\":{\"19\":1,\"20\":6,\"92\":1,\"93\":1,\"94\":3}}],[\"c++\",{\"1\":{\"79\":1}}],[\"ctz32\",{\"1\":{\"70\":1}}],[\"ctz64\",{\"1\":{\"70\":1}}],[\"circular\",{\"1\":{\"54\":1}}],[\"clearerr\",{\"1\":{\"179\":1}}],[\"clearer\",{\"1\":{\"69\":1}}],[\"clears\",{\"1\":{\"45\":1}}],[\"client\",{\"1\":{\"54\":1}}],[\"close\",{\"0\":{\"34\":1},\"1\":{\"34\":13,\"35\":1}}],[\"current\",{\"1\":{\"42\":1,\"120\":9}}],[\"char\",{\"1\":{\"104\":5,\"167\":4,\"171\":1}}],[\"changes\",{\"1\":{\"62\":1}}],[\"changed\",{\"1\":{\"38\":1}}],[\"changing\",{\"1\":{\"38\":1}}],[\"chantype\",{\"1\":{\"31\":1,\"32\":1,\"33\":1}}],[\"chan<\",{\"1\":{\"31\":3,\"33\":3,\"34\":3}}],[\"channe\",{\"1\":{\"34\":4}}],[\"channels\",{\"0\":{\"26\":1,\"27\":1},\"1\":{\"25\":2}}],[\"channel\",{\"0\":{\"23\":1,\"30\":1},\"1\":{\"9\":1,\"23\":2,\"24\":1,\"25\":1,\"27\":1,\"28\":1,\"29\":10,\"30\":4,\"31\":3,\"32\":3,\"33\":6,\"34\":4,\"35\":7}}],[\"channame\",{\"1\":{\"31\":1,\"32\":1,\"33\":1}}],[\"chan\",{\"1\":{\"26\":3,\"27\":8,\"29\":11,\"31\":1,\"32\":4,\"33\":11,\"34\":7}}],[\"chw\",{\"1\":{\"94\":1}}],[\"chosen\",{\"1\":{\"79\":1}}],[\"choosepivot\",{\"1\":{\"79\":1}}],[\"choices\",{\"1\":{\"79\":1}}],[\"child++\",{\"1\":{\"81\":1}}],[\"child+1\",{\"1\":{\"81\":1}}],[\"child\",{\"1\":{\"38\":2,\"81\":3}}],[\"ch\",{\"1\":{\"26\":5,\"27\":13,\"29\":29,\"31\":3,\"32\":3,\"33\":10,\"34\":9,\"92\":1,\"93\":4,\"94\":2}}],[\"check\",{\"1\":{\"70\":1}}],[\"checking\",{\"1\":{\"20\":1}}],[\"checksize\",{\"1\":{\"20\":1}}],[\"catch\",{\"1\":{\"203\":1}}],[\"cake\",{\"1\":{\"200\":2,\"201\":3,\"202\":2,\"203\":1,\"204\":2}}],[\"came\",{\"1\":{\"79\":1}}],[\"calculate\",{\"1\":{\"104\":3}}],[\"calculation\",{\"1\":{\"70\":1}}],[\"calls\",{\"1\":{\"62\":1,\"77\":3}}],[\"calling\",{\"1\":{\"38\":2,\"95\":2}}],[\"call\",{\"1\":{\"38\":1}}],[\"called\",{\"1\":{\"20\":1,\"38\":1}}],[\"can\",{\"1\":{\"38\":1,\"95\":2}}],[\"cannot\",{\"1\":{\"31\":1,\"32\":1,\"33\":2,\"34\":3,\"59\":1}}],[\"capacity\",{\"1\":{\"156\":1}}],[\"capmem\",{\"1\":{\"70\":10}}],[\"cap\",{\"1\":{\"26\":1,\"27\":3,\"29\":3,\"34\":2,\"67\":3,\"68\":15,\"69\":12,\"70\":16,\"90\":1,\"148\":3,\"156\":2}}],[\"case\",{\"1\":{\"20\":5,\"58\":2,\"70\":3,\"92\":2,\"97\":1,\"171\":1}}],[\"count++\",{\"1\":{\"95\":1,\"107\":2}}],[\"count\",{\"1\":{\"95\":3,\"107\":6,\"167\":1}}],[\"copy\",{\"1\":{\"49\":2,\"77\":1,\"95\":1,\"98\":1,\"193\":3}}],[\"copyarray\",{\"1\":{\"18\":12}}],[\"correct\",{\"1\":{\"38\":1,\"76\":1}}],[\"collection\",{\"1\":{\"38\":2,\"76\":1}}],[\"com\",{\"1\":{\"79\":1}}],[\"common\",{\"1\":{\"97\":1}}],[\"comment\",{\"1\":{\"47\":2}}],[\"command\",{\"1\":{\"31\":1,\"32\":1,\"33\":1,\"34\":2}}],[\"communication\",{\"0\":{\"29\":1}}],[\"computing\",{\"1\":{\"82\":2}}],[\"computes\",{\"1\":{\"61\":1}}],[\"complexity\",{\"1\":{\"38\":5,\"44\":1}}],[\"complitexpr\",{\"1\":{\"20\":5}}],[\"comparison\",{\"1\":{\"38\":1,\"76\":1,\"77\":1}}],[\"comparearray\",{\"1\":{\"18\":4}}],[\"compare\",{\"1\":{\"18\":2}}],[\"composite\",{\"1\":{\"20\":2}}],[\"compiler\",{\"1\":{\"95\":1,\"97\":2}}],[\"compile\",{\"1\":{\"19\":1,\"20\":6,\"92\":1,\"93\":1,\"94\":3}}],[\"concatenation\",{\"1\":{\"95\":2}}],[\"concatstrings\",{\"1\":{\"95\":2}}],[\"context\",{\"1\":{\"198\":1}}],[\"continue\",{\"1\":{\"79\":1,\"93\":1,\"95\":1,\"107\":4,\"171\":2}}],[\"container\",{\"1\":{\"38\":3,\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"46\":1,\"47\":1,\"48\":1,\"49\":1,\"50\":2,\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"62\":1,\"63\":1}}],[\"contains\",{\"1\":{\"19\":1,\"79\":1}}],[\"connects\",{\"1\":{\"59\":1}}],[\"conventionally\",{\"1\":{\"89\":1}}],[\"convenience\",{\"1\":{\"46\":1,\"77\":3}}],[\"converts\",{\"1\":{\"97\":1}}],[\"convert\",{\"1\":{\"33\":2,\"97\":1}}],[\"console\",{\"1\":{\"190\":2,\"191\":2,\"192\":4,\"193\":2,\"200\":1,\"201\":1,\"202\":1,\"203\":2,\"204\":2,\"205\":1}}],[\"consider\",{\"1\":{\"97\":1}}],[\"considered\",{\"1\":{\"38\":1,\"76\":1}}],[\"consistent\",{\"1\":{\"77\":1}}],[\"constructor\",{\"1\":{\"190\":1}}],[\"const\",{\"1\":{\"70\":1,\"79\":1,\"97\":1,\"101\":3,\"171\":1,\"200\":1,\"201\":1,\"202\":3,\"204\":3,\"205\":5}}],[\"constoverflow\",{\"1\":{\"20\":1}}],[\"constant\",{\"1\":{\"20\":4,\"97\":1}}],[\"consttype\",{\"1\":{\"20\":1}}],[\"code\",{\"1\":{\"19\":1,\"20\":8,\"27\":1,\"29\":8,\"31\":2,\"32\":2,\"33\":3,\"34\":4,\"38\":5,\"42\":1,\"43\":2,\"45\":1,\"49\":2,\"54\":1,\"55\":1,\"56\":1,\"60\":1,\"67\":1,\"68\":2,\"69\":1,\"70\":2,\"76\":1,\"77\":2,\"79\":1,\"84\":3,\"90\":1,\"91\":1,\"92\":1,\"97\":1,\"101\":1,\"107\":1,\"111\":1,\"118\":1,\"189\":1,\"192\":1}}],[\"c\",{\"1\":{\"18\":2,\"104\":20,\"107\":1,\"110\":1,\"112\":2,\"117\":2,\"143\":1,\"160\":2,\"161\":1,\"162\":1,\"163\":1,\"164\":1,\"167\":9,\"171\":4,\"172\":1,\"173\":3,\"174\":1},\"2\":{\"7\":1,\"8\":1,\"102\":1,\"103\":1,\"105\":1,\"106\":1,\"108\":1,\"109\":1,\"115\":1,\"116\":1,\"129\":1,\"130\":1,\"141\":1,\"142\":1,\"150\":1,\"151\":1,\"157\":1,\"158\":1,\"165\":1,\"166\":1,\"168\":1,\"169\":1,\"175\":1,\"176\":1,\"181\":1,\"182\":1}}],[\"成为他们人生路上坚实的基石\",{\"1\":{\"6\":1}}],[\"孩子们不仅学会了如何操控计算机执行任务\",{\"1\":{\"6\":1}}],[\"期待收获科技树上的累累硕果\",{\"1\":{\"6\":1}}],[\"getelementbyid\",{\"1\":{\"200\":1,\"201\":1,\"202\":1,\"204\":1}}],[\"getenv\",{\"1\":{\"167\":1}}],[\"gets\",{\"1\":{\"178\":1}}],[\"getc\",{\"1\":{\"179\":1}}],[\"getchar\",{\"1\":{\"178\":1}}],[\"getcallerpc\",{\"1\":{\"97\":1}}],[\"generated\",{\"1\":{\"84\":1,\"97\":1}}],[\"generation\",{\"1\":{\"70\":1}}],[\"greatest\",{\"1\":{\"81\":1}}],[\"greater\",{\"1\":{\"79\":1}}],[\"growing\",{\"1\":{\"70\":2}}],[\"growslice\",{\"1\":{\"70\":4}}],[\"gif\",{\"1\":{\"202\":1}}],[\"gives\",{\"1\":{\"70\":1}}],[\"github\",{\"0\":{\"5\":1},\"1\":{\"79\":1}}],[\"g\",{\"1\":{\"20\":1}}],[\"goto\",{\"1\":{\"120\":1,\"171\":1}}],[\"go18\",{\"1\":{\"84\":1}}],[\"go1\",{\"1\":{\"76\":1,\"77\":3,\"79\":2,\"80\":1,\"81\":2,\"82\":2,\"83\":1,\"84\":4,\"85\":1}}],[\"goarch\",{\"1\":{\"70\":7,\"97\":1}}],[\"golang\",{\"1\":{\"69\":1}}],[\"goroutines\",{\"1\":{\"29\":3}}],[\"goroutine\",{\"1\":{\"23\":1,\"24\":1,\"29\":3}}],[\"go\",{\"0\":{\"9\":1},\"1\":{\"2\":1,\"18\":4,\"19\":1,\"20\":9,\"23\":2,\"24\":1,\"27\":1,\"28\":1,\"29\":7,\"30\":1,\"31\":1,\"32\":1,\"33\":3,\"34\":3,\"38\":12,\"41\":1,\"42\":2,\"43\":1,\"44\":2,\"45\":1,\"46\":1,\"47\":1,\"48\":1,\"49\":2,\"53\":1,\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"62\":1,\"73\":1,\"75\":1,\"76\":1,\"77\":3,\"79\":2,\"80\":1,\"81\":2,\"82\":2,\"83\":1,\"84\":7,\"85\":1,\"89\":2,\"90\":1,\"91\":1,\"92\":4,\"93\":2,\"94\":3,\"95\":2},\"2\":{\"10\":1,\"11\":1,\"21\":1,\"22\":1,\"36\":1,\"37\":1,\"39\":1,\"40\":1,\"51\":1,\"52\":1,\"64\":1,\"65\":1,\"71\":1,\"72\":1,\"86\":1,\"87\":1,\"99\":1,\"100\":1}}],[\"框架和工具\",{\"0\":{\"4\":1}}],[\"年目标\",{\"1\":{\"2\":1}}],[\"🥅\",{\"1\":{\"2\":1}}],[\"📚\",{\"1\":{\"2\":1}}],[\"🔭\",{\"1\":{\"2\":1}}],[\"我们修改了原对象中嵌套的数组\",{\"1\":{\"192\":1}}],[\"我们也向\",{\"1\":{\"167\":1}}],[\"我们也可以手动去实现一个深拷贝\",{\"1\":{\"193\":1}}],[\"我们也可以将它理解成一个由字符组成的数组\",{\"1\":{\"91\":1}}],[\"我们也可以在\",{\"1\":{\"84\":1}}],[\"我们只需将元素插入链表头部\",{\"1\":{\"155\":1}}],[\"我们只需要检查到它的平方根就可以确定它是否为素数\",{\"1\":{\"107\":1}}],[\"我们只需要检查到\",{\"1\":{\"107\":1}}],[\"我们只需要在我们定义的数据类型中实现了接口中的三个方法就可以完成排序操作\",{\"1\":{\"75\":1}}],[\"我们只需要通过对数组中的索引\",{\"1\":{\"38\":1}}],[\"我们来尝试自己实现一个栈\",{\"1\":{\"154\":1}}],[\"我们把堆叠元素的顶部称为\",{\"1\":{\"153\":1}}],[\"我们知道\",{\"1\":{\"131\":1}}],[\"我们仅使用了数字\",{\"1\":{\"107\":1}}],[\"我们将盘子替换为各种类型的元素\",{\"1\":{\"152\":1}}],[\"我们将队列头部称为\",{\"1\":{\"145\":1}}],[\"我们将首个节点称为头节点\",{\"1\":{\"140\":1}}],[\"我们将数组下标做为要表示的数字\",{\"1\":{\"107\":1}}],[\"我们将采取测试代码的形式一步一步的分析\",{\"1\":{\"28\":1}}],[\"我们不需要继续检查大于\",{\"1\":{\"107\":1}}],[\"我们不需要在\",{\"1\":{\"33\":1}}],[\"我们定义了一个名为\",{\"1\":{\"107\":1}}],[\"我们简单计算一下\",{\"1\":{\"104\":1}}],[\"我们是否可以继续简化这两层的汉诺塔问题\",{\"1\":{\"104\":1}}],[\"我们现在将拥有三个圆盘的汉诺塔问题简化成拥有两个圆盘的汉诺塔问题\",{\"1\":{\"104\":1}}],[\"我们通常从\",{\"1\":{\"107\":1}}],[\"我们通常采用公式\",{\"1\":{\"101\":1}}],[\"我们通过接口方法\",{\"1\":{\"83\":1}}],[\"我们从\",{\"1\":{\"77\":1,\"107\":2}}],[\"我们需要一种数据结构\",{\"1\":{\"146\":1}}],[\"我们需要先对\",{\"1\":{\"74\":1}}],[\"我们需要留意一下该方法在\",{\"1\":{\"56\":1}}],[\"我们放上一些测试代码\",{\"1\":{\"63\":1}}],[\"我们可以让程序完成各种复杂的任务\",{\"1\":{\"167\":1}}],[\"我们可以定义各种变量\",{\"1\":{\"167\":1}}],[\"我们可以\",{\"1\":{\"154\":1}}],[\"我们可以将数组的尾部作为栈顶\",{\"1\":{\"156\":1}}],[\"我们可以将栈类比为桌面上的一摞盘子\",{\"1\":{\"152\":1}}],[\"我们可以将链表的头节点视为栈顶\",{\"1\":{\"155\":1}}],[\"我们可以将链表的\",{\"1\":{\"147\":1}}],[\"我们可以使用一个变量\",{\"1\":{\"148\":1}}],[\"我们可以使用递归的方法来解决这个问题\",{\"1\":{\"104\":1}}],[\"我们可以采用以下巧妙方法来避免这个问题\",{\"1\":{\"148\":1}}],[\"我们可以通过以下步骤来证明其中一个因数必然小于或等于\",{\"1\":{\"107\":1}}],[\"我们可以从\",{\"1\":{\"107\":1}}],[\"我们可以在字符串内部直接使用双引号\",{\"1\":{\"91\":1}}],[\"我们可以带着这个疑问继续往下看\",{\"1\":{\"46\":1}}],[\"我们可以知道\",{\"1\":{\"44\":2}}],[\"我们可以知道这是一个双向链表\",{\"1\":{\"44\":1}}],[\"我们可以确认\",{\"1\":{\"33\":1}}],[\"我们已经可以拼凑出\",{\"1\":{\"44\":1}}],[\"我们先来了解一下\",{\"1\":{\"43\":1}}],[\"我们该如何对当前节点元素完成父子节点的定位操作\",{\"1\":{\"38\":1}}],[\"我们还可以创建单向的\",{\"1\":{\"30\":1}}],[\"我们发现\",{\"1\":{\"27\":1}}],[\"我们在来看看\",{\"1\":{\"20\":1}}],[\"我内心无比欣慰\",{\"1\":{\"6\":1}}],[\"我希望在开源和小组项目上进行合作\",{\"1\":{\"2\":1}}],[\"我现在正在学习\",{\"1\":{\"2\":1}}],[\"我目前从事前端开发\",{\"1\":{\"2\":1}}],[\"我的现状\",{\"0\":{\"2\":1}}],[\"我正在努力学习更多的知识\",{\"1\":{\"1\":1}}],[\"我是\",{\"0\":{\"1\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
