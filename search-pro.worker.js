const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,u=Array.from(n.keys());this.set=t,this._type=s,this._path=u.length>0?[{node:n,keys:u}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ut=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const u=t.length+1,o=u+s,i=new Uint8Array(o*u).fill(s+1);for(let r=0;r<u;++r)i[r]=r;for(let r=1;r<o;++r)i[r*u]=r;return R(e,t,s,n,i,1,u,""),n},R=(e,t,s,n,u,o,i,r)=>{const d=o*i;t:for(const l of e.keys())if(l===F){const a=u[d-1];a<=s&&n.set(r,[e.get(l),a])}else{let a=o;for(let h=0;h<l.length;++h,++a){const m=l[h],p=i*a,f=p-i;let c=u[p];const g=Math.max(0,a-s-1),_=Math.min(i-1,a+s);for(let y=g;y<_;++y){const b=m!==t[y],z=u[f+y]+ +b,A=u[f+y+1]+1,w=u[p+y]+1,L=u[p+y+1]=Math.min(z,A,w);L<c&&(c=L)}if(c>s)continue t}R(e.get(l),t,s,n,u,a,i,r+l)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[u,o]=M(n);for(const i of u.keys())if(i!==F&&i.startsWith(o)){const r=new Map;return r.set(i.slice(o.length),u.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ut(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,O(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);let u=n.get(F);return u===void 0&&n.set(F,u=s()),u}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,u]of t)s.set(n,u);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},O=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const o of e.keys())if(o!==F&&t[n]===o[0]){const i=Math.min(s-n,o.length);let r=1;for(;r<i&&t[n+r]===o[r];)++r;const d=e.get(o);if(r===o.length)e=d;else{const l=new Map;l.set(o.slice(r),d),e.set(t.slice(n,n+r),l),e.delete(o),e=l}n+=r;continue t}const u=new Map;return e.set(t.slice(n),u),u}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)W(n);else if(s.size===1){const[u,o]=s.entries().next().value;q(n,u,o)}}},W=e=>{if(e.length===0)return;const[t,s]=M(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,u]=t.entries().next().value;n!==F&&q(e.slice(0,-1),n,u)}},q=(e,t,s)=>{if(e.length===0)return;const[n,u]=M(e);n.set(u+t,s),n.delete(u)},M=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",$="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},N=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:u,terms:o,match:i}=t.get(s);n.score=n.score+u,n.match=Object.assign(n.match,i),P(n.terms,o)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const u=e.get(n);if(u==null)continue;const{score:o,terms:i,match:r}=t.get(n);P(u.terms,i),s.set(n,{score:u.score+o,terms:u.terms,match:Object.assign(u.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,u,o)=>{const{k:i,b:r,d}=o;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/u)))},ft=e=>(t,s,n)=>{const u=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,o=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:u,prefix:o}},H=(e,t,s,n)=>{for(const u of Object.keys(e._fieldIds))if(e._fieldIds[u]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${u}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const u=e._index.fetch(n,ht),o=u.get(t);o==null||o.get(s)==null?H(e,s,t,n):o.get(s)<=1?o.size<=1?u.delete(t):o.delete(s):o.set(s,o.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:$,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,u,o,i,r,d=new Map)=>{if(u==null)return d;for(const l of Object.keys(o)){const a=o[l],h=e._fieldIds[l],m=u.get(h);if(m==null)continue;let p=m.size;const f=e._avgFieldLength[h];for(const c of m.keys()){if(!e._documentIds.has(c)){gt(e,h,c,s),p-=1;continue}const g=i?i(e._documentIds.get(c),s,e._storedFields.get(c)):1;if(!g)continue;const _=m.get(c),y=e._fieldLength.get(c)[h],b=at(_,p,e._documentCount,y,f,r),z=n*a*g*b,A=d.get(c);if(A){A.score+=z,lt(A.terms,t);const w=G(A.match,s);w?w.push(l):A.match[s]=[l]}else d.set(c,{score:z,terms:[t],match:{[s]:[l]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},u=(n.fields||e._options.fields).reduce((c,g)=>({...c,[g]:G(n.boost,g)||1}),{}),{boostDocument:o,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:l,prefix:a}={...J.weights,...i},h=e._index.get(t.term),m=B(e,t.term,t.term,1,h,u,o,d);let p,f;if(t.prefix&&(p=e._index.atPrefix(t.term)),t.fuzzy){const c=t.fuzzy===!0?.2:t.fuzzy,g=c<1?Math.min(r,Math.round(t.term.length*c)):c;g&&(f=e._index.fuzzyGet(t.term,g))}if(p)for(const[c,g]of p){const _=c.length-t.term.length;if(!_)continue;f?.delete(c);const y=a*c.length/(c.length+.3*_);B(e,t.term,c,y,g,u,o,d,m)}if(f)for(const c of f.keys()){const[g,_]=f.get(c);if(!_)continue;const y=l*c.length/(c.length+_);B(e,t.term,c,y,g,u,o,d,m)}return m},X=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(m=>X(e,m,a));return Y(h,a.combineWith)}const{tokenize:n,processTerm:u,searchOptions:o}=e._options,i={tokenize:n,processTerm:u,...o,...s},{tokenize:r,processTerm:d}=i,l=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(ft(i)).map(a=>At(e,a,i));return Y(l,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),u=[];for(const[o,{score:i,terms:r,match:d}]of n){const l=r.length,a={id:e._documentIds.get(o),score:i*l,terms:Object.keys(d),match:d};Object.assign(a,e._storedFields.get(o)),(s.filter==null||s.filter(a))&&u.push(a)}return u.sort(N),u},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:o,terms:i}of K(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=o,d.count+=1):n.set(r,{score:o,terms:i,count:1})}const u=[];for(const[o,{score:i,terms:r,count:d}]of n)u.push({suggestion:o,terms:r,score:i/d});return u.sort(N),u};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const u={};for(const[o,i]of n)u[o]=Object.fromEntries(i);t.push([s,u])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:u,fieldLength:o,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:l},a)=>{if(l!==1&&l!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=k(n),h._idToShortId=new Map,h._fieldIds=u,h._fieldLength=k(o),h._avgFieldLength=i,h._storedFields=k(r),h._dirtCount=d||0,h._index=new C;for(const[m,p]of h._documentIds)h._idToShortId.set(p,m);for(const[m,p]of e){const f=new Map;for(const c of Object.keys(p)){let g=p[c];l===1&&(g=g.ds),f.set(parseInt(c,10),k(g))}h._index.set(m,f)}return h},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),u=[];let o=0,i=0;const r=(l,a=!1)=>{let h="";i===0?h=l.length>20?`… ${l.slice(-20)}`:l:a?h=l.length+i>100?`${l.slice(0,100-i)}… `:l:h=l.length>20?`${l.slice(0,20)} … ${l.slice(-20)}`:l,h&&u.push(h),i+=h.length,a||(u.push(["mark",t]),i+=t.length,i>=100&&u.push(" …"))};let d=s.indexOf(n,o);if(d===-1)return null;for(;d>=0;){const l=d+n.length;if(r(e.slice(o,d)),o=l,i>100)break;d=s.indexOf(n,o)}return i<100&&r(e.slice(o),!0),u},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(u=>{const{id:o,terms:i,score:r}=u,d=o.includes("@"),l=o.includes("#"),[a,h]=o.split(/[#@]/),m=i.sort((f,c)=>f.length-c.length).filter((f,c)=>i.slice(c+1).every(g=>!g.includes(f))),{contents:p}=n[a]??={title:"",contents:[]};if(d)p.push([{type:"customField",key:a,index:h,display:m.map(f=>u.c.map(c=>j(c,f))).flat().filter(f=>f!==null)},r]);else{const f=m.map(c=>j(u.h,c)).filter(c=>c!==null);if(f.length&&p.push([{type:l?"heading":"title",key:a,...l&&{anchor:h},display:f},r]),"t"in u)for(const c of u.t){const g=m.map(_=>j(c,_)).filter(_=>_!==null);g.length&&p.push([{type:"text",key:a,...l&&{anchor:h},display:g},r])}}}),Q(n).sort(([,u],[,o])=>"max"==="total"?xt(u,o):kt(u,o)).map(([u,{title:o,contents:i}])=>{if(!o){const r=it(t,u);r&&(o=r.h)}return{title:o,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":117,\"nextId\":117,\"documentIds\":{\"0\":\"v-3e214e9b\",\"1\":\"v-3e214e9b#hi-there-i-m-zequanr\",\"2\":\"v-3e214e9b#my-current-status\",\"3\":\"v-3e214e9b#languages\",\"4\":\"v-3e214e9b#frameworks-and-tools\",\"5\":\"v-3e214e9b#github-overview\",\"6\":\"v-1a3a2105\",\"7\":\"v-1a3a2105@0\",\"8\":\"v-1a3a2105@1\",\"9\":\"v-328fed8a\",\"10\":\"v-328fed8a@0\",\"11\":\"v-328fed8a@1\",\"12\":\"v-1a0d0f8b\",\"13\":\"v-1a0d0f8b@0\",\"14\":\"v-1a0d0f8b@1\",\"15\":\"v-c882fa1c\",\"16\":\"v-c882fa1c@0\",\"17\":\"v-c882fa1c@1\",\"18\":\"v-7c1d41a1\",\"19\":\"v-7c1d41a1#声明数组\",\"20\":\"v-7c1d41a1#数组初始化\",\"21\":\"v-7c1d41a1#访问数组元素\",\"22\":\"v-7c1d41a1#计算数组长度\",\"23\":\"v-7c1d41a1@0\",\"24\":\"v-7c1d41a1@1\",\"25\":\"v-49cda705\",\"26\":\"v-49cda705#数据结构\",\"27\":\"v-49cda705#创建节点\",\"28\":\"v-49cda705#查询节点\",\"29\":\"v-49cda705#遍历节点-递归方法\",\"30\":\"v-49cda705#前序\",\"31\":\"v-49cda705#中序\",\"32\":\"v-49cda705#后序\",\"33\":\"v-49cda705#遍历节点-非递归方法\",\"34\":\"v-49cda705#前序-1\",\"35\":\"v-49cda705#中序-1\",\"36\":\"v-49cda705#后序-1\",\"37\":\"v-49cda705@0\",\"38\":\"v-49cda705@1\",\"39\":\"v-558cfeed\",\"40\":\"v-558cfeed#链表的结构定义\",\"41\":\"v-558cfeed#链表的常用操作\",\"42\":\"v-558cfeed#创建节点\",\"43\":\"v-558cfeed#插入节点\",\"44\":\"v-558cfeed#查找节点\",\"45\":\"v-558cfeed#删除节点\",\"46\":\"v-558cfeed#打印节点\",\"47\":\"v-558cfeed#完整代码\",\"48\":\"v-558cfeed#常见链表类型\",\"49\":\"v-558cfeed@0\",\"50\":\"v-558cfeed@1\",\"51\":\"v-d0e11c2e\",\"52\":\"v-d0e11c2e#队列的概念\",\"53\":\"v-d0e11c2e#队列的常用操作\",\"54\":\"v-d0e11c2e#队列的实现\",\"55\":\"v-d0e11c2e#基于链表实现\",\"56\":\"v-d0e11c2e#基于数组实现\",\"57\":\"v-d0e11c2e#为什么要用模运算\",\"58\":\"v-d0e11c2e@0\",\"59\":\"v-d0e11c2e@1\",\"60\":\"v-ca2e115c\",\"61\":\"v-ca2e115c#栈的常用操作\",\"62\":\"v-ca2e115c#栈的实现\",\"63\":\"v-ca2e115c#基于链表实现\",\"64\":\"v-ca2e115c#基于数组实现\",\"65\":\"v-ca2e115c@0\",\"66\":\"v-ca2e115c@1\",\"67\":\"v-4f34985d\",\"68\":\"v-4f34985d#语句\",\"69\":\"v-4f34985d#表达式\",\"70\":\"v-4f34985d#语句块\",\"71\":\"v-4f34985d#空格\",\"72\":\"v-4f34985d#注释\",\"73\":\"v-4f34985d@0\",\"74\":\"v-4f34985d@1\",\"75\":\"v-730105bf\",\"76\":\"v-730105bf@0\",\"77\":\"v-730105bf@1\",\"78\":\"v-fe1d8c58\",\"79\":\"v-fe1d8c58#变量名\",\"80\":\"v-fe1d8c58#变量的声明\",\"81\":\"v-fe1d8c58#变量的赋值\",\"82\":\"v-fe1d8c58#变量的作用域\",\"83\":\"v-fe1d8c58@0\",\"84\":\"v-fe1d8c58@1\",\"85\":\"v-3ea4e022\",\"86\":\"v-3ea4e022#标准-i-o-函数\",\"87\":\"v-3ea4e022#文件操作函数\",\"88\":\"v-3ea4e022#字符串操作函数\",\"89\":\"v-3ea4e022@0\",\"90\":\"v-3ea4e022@1\",\"91\":\"v-7f500abe\",\"92\":\"v-7f500abe#js-数据类型\",\"93\":\"v-7f500abe#基本数据类型\",\"94\":\"v-7f500abe#引用数据类型\",\"95\":\"v-7f500abe#浅拷贝与深拷贝\",\"96\":\"v-7f500abe#浅拷贝\",\"97\":\"v-7f500abe#深拷贝\",\"98\":\"v-7f500abe@0\",\"99\":\"v-7f500abe@1\",\"100\":\"v-1350cfe0\",\"101\":\"v-1350cfe0#blob\",\"102\":\"v-1350cfe0#file\",\"103\":\"v-1350cfe0#前端获取文件的几种情况\",\"104\":\"v-1350cfe0#input-上传\",\"105\":\"v-1350cfe0#文件拖放\",\"106\":\"v-1350cfe0#showopenfilepicker-api\",\"107\":\"v-1350cfe0#请求远端\",\"108\":\"v-1350cfe0#filereader\",\"109\":\"v-1350cfe0#arraybuffer\",\"110\":\"v-1350cfe0@0\",\"111\":\"v-1350cfe0@1\",\"112\":\"v-75c090cb\",\"113\":\"v-7e4580cb\",\"114\":\"v-d92853c2\",\"115\":\"v-20a9a3d6\",\"116\":\"v-22142b7f\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[5,10],\"2\":[4,27],\"3\":[2],\"4\":[4],\"5\":[3],\"6\":[1,12],\"7\":[null,null,1],\"8\":[null,null,1],\"9\":[1,104],\"10\":[null,null,1],\"11\":[null,null,2],\"12\":[1,136],\"13\":[null,null,1],\"14\":[null,null,2],\"15\":[1,208],\"16\":[null,null,1],\"17\":[null,null,2],\"18\":[1,7],\"19\":[1,27],\"20\":[1,63],\"21\":[1,18],\"22\":[1,30],\"23\":[null,null,1],\"24\":[null,null,2],\"25\":[1,24],\"26\":[1,19],\"27\":[1,17],\"28\":[1,21],\"29\":[2],\"30\":[1,17],\"31\":[1,17],\"32\":[1,17],\"33\":[2],\"34\":[1,29],\"35\":[1,29],\"36\":[1,33],\"37\":[null,null,1],\"38\":[null,null,2],\"39\":[1,21],\"40\":[1,61],\"41\":[1],\"42\":[1,47],\"43\":[1,21],\"44\":[1,24],\"45\":[1,28],\"46\":[1,15],\"47\":[1,90],\"48\":[1,39],\"49\":[null,null,1],\"50\":[null,null,2],\"51\":[1,12],\"52\":[1,6],\"53\":[1,11],\"54\":[1,6],\"55\":[1,67],\"56\":[1,66],\"57\":[1,15],\"58\":[null,null,1],\"59\":[null,null,2],\"60\":[1,10],\"61\":[1,9],\"62\":[1,13],\"63\":[1,56],\"64\":[1,55],\"65\":[null,null,1],\"66\":[null,null,2],\"67\":[1],\"68\":[1,30],\"69\":[1,28],\"70\":[1,13],\"71\":[1,28],\"72\":[1,40],\"73\":[null,null,1],\"74\":[null,null,1],\"75\":[2,134],\"76\":[null,null,1],\"77\":[null,null,1],\"78\":[1],\"79\":[1,72],\"80\":[1,20],\"81\":[1,48],\"82\":[1,63],\"83\":[null,null,1],\"84\":[null,null,1],\"85\":[2,9],\"86\":[4,15],\"87\":[1,47],\"88\":[1,9],\"89\":[null,null,1],\"90\":[null,null,1],\"91\":[2],\"92\":[2,9],\"93\":[1,32],\"94\":[1,28],\"95\":[1,30],\"96\":[1,38],\"97\":[1,66],\"98\":[null,null,1],\"99\":[null,null,1],\"100\":[2],\"101\":[1,16],\"102\":[1,35],\"103\":[1],\"104\":[2,35],\"105\":[1,52],\"106\":[2,46],\"107\":[1,23],\"108\":[1,128],\"109\":[1,62],\"110\":[null,null,1],\"111\":[null,null,1],\"112\":[2],\"113\":[2],\"114\":[2],\"115\":[2],\"116\":[1]},\"averageFieldLength\":[1.4714406257483579,35.540521197261654,0.8734933832589787],\"storedFields\":{\"0\":{\"h\":\"关于我\"},\"1\":{\"h\":\"Hi there, I'm ZEQUANR\",\"t\":[\"I'm trying to learn more and become better \"]},\"2\":{\"h\":\"My current status:\",\"t\":[\"🔭 I’m currently working on Full-Stack Web Development\",\"📚 I’m currently learning Go\",\"🥅 2024 Goals: I’m looking to collaborate on opensource and group projects and Learn a lot.\"]},\"3\":{\"h\":\"Languages:\"},\"4\":{\"h\":\"Frameworks and Tools:\"},\"5\":{\"h\":\"Github Overview:\"},\"6\":{\"h\":\"语言课堂笔记\",\"t\":[\"每当看到孩子们面对一串串代码时眼睛闪烁出好奇的光芒，我内心无比欣慰。他们用稚嫩的小手敲击键盘，就像农夫播撒种子，期待收获科技树上的累累硕果。编程学习过程中，孩子们不仅学会了如何操控计算机执行任务，更是在培养逻辑思维、问题解决能力和创新意识，这些品质将伴随他们一生，成为他们人生路上坚实的基石。\"]},\"7\":{\"c\":[\"C\"]},\"8\":{\"c\":[\"C\"]},\"9\":{\"h\":\"二分查找\",\"t\":[\"给定一个拥有 n 个不同元素的有序（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。\",\"当遇到这样的题目时我们就可以采用二分查找来完成，二分查找又称折半查找，是一种常见的查找算法，它的基本思想是将一个有序的数组按照中间值分成两个部分，然后判断目标值与中间值的大小关系，如果相等，则查找成功，如果目标值比中间值小，则在左半部分继续查找，如果目标值比中间值大，则在右半部分继续查找，直到找到目标值或者查找范围为空为止。\",\"二分查找的具体实现过程如下：\",\"设置查找范围的左右边界 left 和 right，分别指向数组的第一个元素和最后一个元素。\",\"计算中间位置 mid，mid = (left + right) / 2。\",\"判断目标值与中间值的大小关系： \",\"如果目标值等于中间值，则查找成功，返回 mid。\",\"如果目标值比中间值小，则在左半部分继续查找，即 right = mid - 1。\",\"如果目标值比中间值大，则在右半部分继续查找，即 left = mid + 1。\",\"如果查找范围为空，即 left > right，则说明目标值不存在于数组中，查找失败。\",\"二分查找动态演示\",\"如 code - 1 所示，一个完整且正常的二分查找并不是很容易可以完成的，这里强调几个要点：\",\"在第 7 行由于 left 和 right 都是 int 类型，因此 left + right 可能会超出 int 类型的取值范围，为了避免大数越界，我们通常采用公式 left + (right - left) / 2 来计算 mid 值。\",\"在第 6 行 while 循环的条件中是 <=，而不是 <，因为初始化 right 的赋值是 len - 1，即最后一个元素的索引，而不是 len，前者相当于两端都闭区间 [ left, right ]，后者相当于左闭右开区间 [ left, right )。\",\"#include <stdio.h> int binarySearch(int* nums, int target, int len) { int left = 0, right = len - 1; while(left <= right) { int mid = left + (right - left) / 2; if(nums[mid] == target) { return mid; } else if (nums[mid] < target) { left = mid + 1; } else if (nums[mid] > target) { right = mid - 1; } } return -1; } int main() { int sorted[] = { 1, 2, 3, 4, 5, 6, 7, 8 }; int const length = sizeof(sorted) / sizeof(sorted[0]); int const key = 1; int const result = binarySearch(sorted, key, length); if (result > -1) { printf(\\\"sorted[%d] = %d, search succeed.\\\\n\\\", result, key); } else { printf(\\\"%d not found, search failed.\\\\n\\\", key); } return 0; } \"]},\"10\":{\"c\":[\"C\"]},\"11\":{\"c\":[\"C\",\"算法训练\"]},\"12\":{\"h\":\"汉诺塔\",\"t\":[\"汉诺塔是一个经典的益智游戏，源自于印度数学家毕达哥拉斯所提出的问题。该游戏通常由三个柱子和若干个圆盘组成，目标是将若干个圆盘从起始柱子移动到目标柱子（且保持圆盘的排列顺序不变），同时遵守以下规则：\",\"每次只能移动一个圆盘。\",\"大圆盘不能放在小圆盘上面。\",\"问题：如果将若干个圆盘从起始柱子 a 移动到目标柱子 c 上？（最少要移动多少次？） 提示：可将圆盘临时置于 b 塔，也可将从 a 塔移出的圆盘重新移回 a 塔，但都必须遵循上述两条规则。\",\"解题思路\",\"汉诺塔游戏看起来很简单，但是其中蕴含了很多算法思想，比如说，我们可以使用递归的方法来解决这个问题，具体过程我们可以将其抽象成 3 个步骤。\",\"将 n - 1 个圆盘从塔 a 移动到塔 b。\",\"将第 n 个圆盘从塔 a 移动到塔 c。\",\"将 n - 1 个圆盘从塔 b 移动到塔 c。\",\"也就是说想要解决 n 层的汉诺塔问题，就需要先解决 n - 1 层的汉诺塔问题......这样我们最终将一个大的问题分解成多个小的问题，具体过程如下：\",\"要想将塔 a 的圆盘全部移动到塔 c 中，那么必然要将塔 a 中的最大的圆盘，率先落入到塔 c 中。\",\"那么遵循上述的游戏规则，要想实施刚刚的操作那么就必将会出现下面这一情况。（使得我们将最大的圆盘从塔 a 移动到塔 c 中畅通无阻）这也是为什么在抽象过程中，第一步就是要将 n - 1 个圆盘从塔 a 移动到塔 b 的原因。\",\"现在最大的圆盘已经抵达了它应在的位置，它的位置已经固定不再会移动了，所以我们不在需要考虑它了，甚至我们可以将它忽略掉！\",\"接下来要考虑的问题就是如何将‘塔 a 上的两个圆盘全部移动到塔 b 中’或是‘塔 b 上的两个圆盘全部移动到塔 c 中’，等等这个问题与我们最开始讨论的问题是不是有些相似“要想将塔 a 上的三个圆盘全部移动到塔 c 中”。\",\"也就是说，我们现在将拥有三个圆盘的汉诺塔问题简化成拥有两个圆盘的汉诺塔问题，换而言之要想解决拥有三个圆盘的汉诺塔问题，就需先解决将拥有二个圆盘的汉诺塔问题。（因为我们只要完成二个圆盘的汉诺塔问题，就可执行图 2 中最开始的操作“将最大的 3 号圆盘从塔 a 移动到塔 c 中”完成解题） 此刻要解决的就是拥有二个圆盘的汉诺塔问题，那么以当前思路来说，我们是否可以继续简化这两层的汉诺塔问题，结果肯定是可以的。 这时我们可以发现，当要解决 n 层汉诺塔问题时，就需要先解决 n - 1 层的汉诺塔问题。\",\"那么如何计算需要多少步，首先移动 1 层的我们从上图中可以看出，如果想要移动 n 层圆盘，它包含两个移动 n - 1 层圆盘，还有一个移动第 n 层圆盘，移动第 n 层圆盘就是一步，所以我们就有以下等式。\",\"在这里我们以 F(n) 代表移动 n 层圆盘的步数，我们简单计算一下：移动 1 层圆盘需要 F(1) = 1 步、移动 2 层圆盘需要 F(2) = 3 步、移动 3 层圆盘需要 F(3) = 7 步，总结一下分别为： 1 层为二的一次方减一、2 层为二的二次方减一、3 层为二的三次方减一。\",\"程序求解\",\"#include <stdio.h> void message(int n, char from, char to) { printf(\\\"将 %d 号圆盘, 从塔 %c 移动到塔 %c\\\\n\\\", n, from, to); } void hanoi(int n, char a, char b, char c) { if (n == 1) { // 汉诺塔中只有一个圆盘直接将圆盘从塔 a 移动到塔 c。 message(n, a, c); return; } // 将 n - 1 个圆盘从塔 a 移动到塔 b。 hanoi(n - 1, a, c, b); // 将第 n 个圆盘从塔 a 移动到塔 c。 message(n, a, c); // 将 n - 1 个圆盘从塔 b 移动到塔 c。 hanoi(n - 1, b, a, c); } int main() { hanoi(3, 'a', 'b', 'c'); return 0; } \",\"#include <stdio.h> int main() { int calculate(int num) { if (num == 1) { return 1; } return 2 * calculate(num - 1) + 1; } for (int i = 1; i <= 9; i++) { printf(\\\"%d --> %d\\\\n\\\", i, calculate(i)); } return 0; } \"]},\"13\":{\"c\":[\"C\"]},\"14\":{\"c\":[\"C\",\"算法训练\"]},\"15\":{\"h\":\"素数\",\"t\":[\"素数（也称为质数）的定义是一个大于 1 的自然数，除了 1 和它本身以外，不能被其他正整数整除。换句话说，一个素数只有两个正因数：1 和它自己。 例如，2、3、5、7、11、13、17、19、23 等都是素数，因为它们只能被 1 和它们自身整除。而 4、6、8、9、10 等不是素数，因为它们可以被其他的正整数整除，比如 4 可以被 2 整除，6 可以被 2 和 3 整除，以此类推。 素数在数学中有着重要的地位，特别是在数论领域。许多数学定理和算法都与素数有关，包括著名的费马小定理和欧拉定理。\",\"判断一个数是否为素数： 在 code - 1 中，我们定义了一个名为 is_prime 的函数，它接受一个整数作为参数，并返回一个布尔值，表示该整数是否为素数。如果输入的整数小于等于 1，则不是素数；否则，我们从 2 开始遍历到该整数的平方根，如果该整数可以被任何一个小于它的正整数整除，则不是素数。\",\"#include <stdio.h> int is_prime(int n) { if (n <= 1) { return 0; } for (int i = 2; i * i <= n; i++) { if (n % i == 0) { return 0; } } return 1; } int main() { int n = 6; if (is_prime(n)) { printf(\\\"%d is a prime number.\\\\n\\\", n); } else { printf(\\\"%d is not a prime number.\\\\n\\\", n); } return 0; } \",\"在判断一个整数是否为素数时，我们通常从 2 开始遍历到该整数的平方根。这是因为如果一个整数不是素数，那么它可以表示为两个因数的乘积，其中一个因数必然小于或等于它的平方根。 例如，假设我们要判断 10 是否为素数。我们可以从 2 开始遍历到 3（因为 3 的平方是 9，小于 10），并检查 10 是否可以被这些数字整除。如果我们发现 10 可以被某个数字整除，那么它就不是素数；否则，它就是素数。 在这个例子中，我们只需要检查到 3 就可以确定 10 不是素数，因为 10 可以表示为 2 和 5 的乘积，其中 5 大于 3，而 2 小于 3。因此，我们不需要继续检查大于 3 的数字。 同样地，对于更大的整数，我们只需要检查到它的平方根就可以确定它是否为素数。这是因为如果一个整数不是素数，那么它可以表示为两个因数的乘积，其中一个因数必然小于或等于它的平方根。如果我们没有找到这样的因数，那么这个整数就是素数。 因此，从 2 开始遍历到该整数的平方根是一种有效的算法，可以快速判断一个整数是否为素数。\",\"证明过程： 假设一个整数 n 不是素数，那么它可以表示为两个因数的乘积：n = a * b。其中，a 和 b 都是大于 1 的正整数。 我们可以通过以下步骤来证明其中一个因数必然小于或等于 n 的平方根：\",\"如果 a 或 b 等于 n，那么另一个因数就是 1，这与题目条件不符，因此我们可以排除这种情况。\",\"如果 a 和 b 都大于 n 的平方根，那么它们的乘积就会大于 n，这与题目条件不符，因此我们可以排除这种情况。\",\"因此，至少有一个因数（不妨设为 a）小于或等于 n 的平方根。\",\"假设 a 大于 n 的平方根，那么 b 就会小于 n 的平方根，因为 a * b = n。但是这与我们的假设矛盾，因此 a 必须小于或等于 n 的平方根。 因此，如果一个整数 n 不是素数，那么它可以表示为两个因数的乘积，其中一个因数必然小于或等于它的平方根。\",\"查找素数： 注意到一个正整数是不可能写成比自身还大的两个正整数的乘积的，并且如果一个正整数能被大于 2 且小于自身的数字整除的话，那么该数字必然不是素数。因此，我们从 2 开始遍历，将 2 的整数倍去除掉，那么剩下的下一个数字必然为素数。为了表达一个数字是否为素数，我们将数组下标做为要表示的数字，数组内容表示该索引对应的数字是否为素数，如 numbers[2] = 1 表示的含义是数字 2 为 素数，而表达式 a[4] = 0 则表示数字 4 不是素数。\",\"#include <stdio.h> void prime_number(int n) { int numbers[n]; for (int i = 2; i < n; i++) { numbers[i] = 1; } for (int i = 2; i < n; i++) { int is_prime = numbers[i]; if (is_prime == 0) { continue; } for(int k = 2 * i; k < n; k += i) { numbers[k] = 0; } } int count = 0, number_per_line = 10; for (int i = 2; i < n; i++) { if (numbers[i] == 0) { continue; } printf(\\\"%d\\\\t\\\", i); count++; if (count == number_per_line) { printf(\\\"\\\\n\\\"); count = 0; } } } int main() { prime_number(1000); return 0; } \",\"查找更多素数： 为了求解更多的素数，可以通过位的形式对程序进行改写。事实上，我们仅使用了数字 0、1 来表示一个索引是否为素数，而保存这两个数字使用 4 个字节是存在显著浪费的。 要知道在计算机中所有数据都是以二进制的形式进行存储的，而在我们当前的 C 语言程序中一个 int 类型的数据所占有的空间为 4 字节（1 Byte = 8 bit）也就是 32 个二进制位。 在图 2 中我们就可以看出为何仅使用数字 0、1 会存在大量存储空间上的浪费，如果我们可以将每一个二进制位都利用起来，那么这可以大大的减少我们对存储空间上的消耗。\",\"#include <stdio.h> void prime_number(unsigned int n) { unsigned int scale = (sizeof(unsigned int) * 8); // 对数组长度进行取整，有小数需进一 unsigned int len = (n + (scale - 1)) / scale; unsigned int numbers[len]; numbers[0] = 0x3FFFFFFF; for (int i = 1; i < len; i++) { numbers[i] = 0xFFFFFFFF; } for (int i = 2; i < n; i++) { unsigned int index = i / scale; unsigned int offset = (scale - (i % scale)) - 1; if ((numbers[index] & (1 << offset)) == 0) { continue; } for (int k = i * 2; k < n; k = k + i) { index = k / scale; offset = (scale - (k % scale)) - 1; numbers[index] &= ~(1 << offset); } } int count = 0, numbers_per_line = 10; for (int i = 2; i < n; i++) { unsigned int index = i / scale; unsigned int offset = (scale - (i % scale)) - 1; if ((numbers[index] & (1 << offset)) == 0) { continue; } printf(\\\"%d\\\\t\\\", i); count++; if (count == numbers_per_line) { printf(\\\"\\\\n\\\"); count = 0; } } } int main() { prime_number(9999); return 0; } \"]},\"16\":{\"c\":[\"C\"]},\"17\":{\"c\":[\"C\",\"算法训练\"]},\"18\":{\"h\":\"数组\",\"t\":[\"在 C 语言中，数组是将其相同类型元素存储在连续的内存空间中，数组通过变量名后加方括号表示，方括号里面是数组的元素数量。\"]},\"19\":{\"h\":\"声明数组\",\"t\":[\"数组通过变量名后加方括号表示，方括号里面是数组的元素数量，也就是: 类型 + 变量名称 + [一个正值的长度]， 在 code - 1 中声明了名为 array 长度为 100 元素类型为 int 的数组。\",\"int array[100]; \",\"数组中的元素是从 0 开始编号，所以数组 array[100] 就是从第 0 号元素一直到第 99 号元素，最后一个元素的编号会比数组长度小 1。\"]},\"20\":{\"h\":\"数组初始化\",\"t\":[\"数组在声明时，可以使用大括号，同时对每一个元素赋值，但大括号里面的值不能多于数组的长度，否则编译时会报错。\",\"int array[6] = { 1, 2, 3, 4, 5, 6 }; int array[6] = { 1, 2, 3, 4, 5, 6, 7 }; // 报错 \",\"如果大括号里面的值，少于数组的元素数量，那么未赋值的元素自动初始化为 0，如果要将整个数组的每一个元素都设置为零，最简单的写法就是下面这样。\",\"int array[5] = { 1, 2, 3 }; // 等同于 int array[5] = { 1, 2, 3, 0, 0 }; int array[5] = { 0 }; // 等同于 int array[5] = { 0, 0, 0, 0, 0 }; // 100 个 0 \",\"但要注意！使用大括号赋值时，必须在数组声明时赋值，否则编译时会报错，其原因在于是，C 语言规定，数组变量一旦声明，就不得修改变量指向的地址，同样的原因，数组赋值之后，再用大括号修改值，也是不允许的。\",\"int array[6]; array = { 1, 2, 3, 4, 5, 6 }; // 报错 int array[6] = { 1, 2, 3, 4, 5, 6 }; array = { 6, 5, 4, 3, 2, 1 }; // 报错 \",\"数组初始化时，可以指定为哪些位置的元素赋值，因为是制定的元素赋值，所以可以不按照顺序任意赋值，并且指定位置的赋值与顺序赋值，可以结合使用，但不建议这样做，会增加读代码的难度。\",\"int array[12] = { [2] = 22, [9] = 99, [11] = 122 }; // 等同于 int array[12] = { 0, 0, 22, 0, 0, 0, 0, 0, 0, 99, 0, 122 }; int array[12] = { [9] = 22, [2] = 99, [11] = 122 }; // 等同于 int array[12] = { 0, 0, 99, 0, 0, 0, 0, 0, 0, 22, 0, 122 }; int array[12] = { 1, 2, 3, [2] = 22, [9] = 99, [2] = 44, 88, [11] = 122 }; // 等同于 int array[] = { 1, 2, 44, 88, 0, 0, 0, 0, 0, 99, 0, 122 } \",\"C 语言允许省略方括号里面的数组元素数量，这时将根据大括号里面的值的数量，自动确定数组的长度，省略成员数量时，如果同时采用指定位置的赋值，那么数组长度将是最大的指定位置再加 1。\",\"int a[] = { 1, 2, 3 }; // 数组长度为 3 int a[] = { [9] = 12 } // 数组长度为 10 \"]},\"21\":{\"h\":\"访问数组元素\",\"t\":[\"上面示例中，数组 array 只有 100 个元素，因此 array[100] 这个位置是不存在的，但是！引用这个位置并不会报错，会正常运行，使得紧跟在 array 后面的那块内存区域被赋值，而那实际上是其他变量的区域，因此不知不觉就更改了其他变量的值，这很容易引发错误，而且难以发现。\"]},\"22\":{\"h\":\"计算数组长度\",\"t\":[\"计算数组长度可以使用 sizeof 函数，sizeof 可以获得数据类型或变量在内存中所占的字节数，同样，用 sizeof 也可以获得整个数组在内存中所占的字节数，因为数组中每个元素的类型都是一样的，在内存中所占的字节数都是相同的，所以总的字节数除以一个元素所占的字节数就是数组的长度。\",\"#include <stdio.h> int main() { int array[] = { 1, 2, 3, 4, 5, 6 }; int len = sizeof(array) / sizeof(array[0]); printf(\\\"len = %d\\\\n\\\", len); return 0; } \"]},\"23\":{\"c\":[\"C\"]},\"24\":{\"c\":[\"C\",\"数据结构\"]},\"25\":{\"h\":\"二叉树\",\"t\":[\"二叉树是计算机科学中一种基本且广泛应用的数据结构，它以独特的分层结构和高效的查找性能，在解决各种问题时展现出强大的功能。在 C 语言中，通过使用指针可以方便地构建和操作二叉树结构。本文将详细介绍 C 语言中二叉树的基本概念、实现方法以及常见操作。\",\"二叉树是一种每个节点最多有两个子节点的树形数据结构，这两个子节点分别称为左子节点和右子节点。二叉树既可以为空，也可以由一个根节点及两棵分别作为其左右子树的二叉树构成。根据节点间的关系和附加条件，二叉树有多种变体，如完全二叉树、满二叉树、平衡二叉树（如 AVL 树和红黑树）以及特殊的二叉搜索树等。\"]},\"26\":{\"h\":\"数据结构\",\"t\":[\"首先我们先来看一下二叉树的数据结构，从 code - 1 中我们可以看到它主要是由两部分组成，分别为指向左右两边的指针，与用于存储数据的数据域，其中从指针中我们不难发现每个节点最多有两个分支，且顺序不能随意颠倒。\",\"typedef struct node { struct node *left; struct node *right; int value; } node_t, *node_ptr; \"]},\"27\":{\"h\":\"创建节点\",\"t\":[\"node_ptr create(int val) { node_ptr p_node = (node_ptr)malloc(sizeof(node_t)); if (p_node != NULL) { p_node->left = NULL; p_node->right = NULL; p_node->value = val; } return p_node; } \"]},\"28\":{\"h\":\"查询节点\",\"t\":[\"node_ptr find(node_ptr root, int val) { node_ptr current = root; while (current != NULL) { if (current->value == val) { goto finish; } if (current->value > val) { current = current->left; } else { current = current->right; } } finish: return current; } \"]},\"29\":{\"h\":\"遍历节点-递归方法\"},\"30\":{\"h\":\"前序\",\"t\":[\"void pre_order(node_ptr root) { if (root == NULL) { return; } printf(\\\"%d \\\", root->value); if (root->left != NULL) { pre_order(root->left); } if (root->right != NULL) { pre_order(root->right); } } \"]},\"31\":{\"h\":\"中序\",\"t\":[\"void in_order(node_ptr root) { if (root == NULL) { return; } if (root->left != NULL) { in_order(root->left); } printf(\\\"%d \\\", root->value); if (root->right != NULL) { in_order(root->right); } } \"]},\"32\":{\"h\":\"后序\",\"t\":[\"void post_order(node_ptr root) { if (root == NULL) { return; } if (root->left != NULL) { post_order(root->left); } if (root->right != NULL) { post_order(root->right); } printf(\\\"%d \\\", root->value); } \"]},\"33\":{\"h\":\"遍历节点-非递归方法\"},\"34\":{\"h\":\"前序\",\"t\":[\"#define SIZE (64) node_ptr stack[SIZE] = { NULL }; int top = -1; void pre_order_with_stack(node_ptr root) { while (root != NULL || top >= 0) { if (root != NULL) { top++; stack[top] = root; printf(\\\"%d \\\", root->val); root = root->left; } else { root = stack[top]; top--; root = root->right; } } } \"]},\"35\":{\"h\":\"中序\",\"t\":[\"#define SIZE (64) node_ptr stack[SIZE] = { NULL }; int top = -1; void in_order_with_stack(node_ptr root) { while (root != NULL || top >= 0) { if (root != NULL) { top++; stack[top] = root; root = root->left; } else { root = stack[top]; top--; printf(\\\"%d \\\", root->val); root = root->right; } } } \"]},\"36\":{\"h\":\"后序\",\"t\":[\"#define SIZE (64) node_ptr stack[SIZE] = { NULL }; int top = -1; void post_order_with_stack(node_ptr root) { while (root != NULL || top >= 0) { if (root != NULL) { top++; stack[top] = root; root = root->left; } else { root = stack[top]; top--; if (((long)root & 0x1) == 1) { root = (node_ptr)((long)root - 1); printf(\\\"%d \\\", root->val); root = NULL; } else { top++; stack[top] = (node_ptr)((long)root | 0x1); root = root->right; } } } } \"]},\"37\":{\"c\":[\"C\"]},\"38\":{\"c\":[\"C\",\"数据结构\"]},\"39\":{\"h\":\"链表\",\"t\":[\"链表是一种线性数据结构，其中的每一个元素都是一个节点，其中每一个节点都通过指针相连接，指针记录了下一个节点的内存地址，通过它可以从当前节点访问到下一个节点。\",\"要知道计算机中的内存空间是所有程序的公共资源，在一个复杂的系统运行环境下，空闲的内存空间可能散落在内存各处，我们知道，存储数组的内存空间必须是连续的，而当数组非常大时，内存可能无法提供如此大的连续空间，此时链表的灵活性优势就体现出来了。\",\"链表中的每个节点由两部分构成，一是本身存储的数据信息（数据域），二是指向后续节点的指针（指针域）这两部分信息组成的存储结构称之为链表的“节点”\"]},\"40\":{\"h\":\"链表的结构定义\",\"t\":[\"从图 2 中可以看出分散存储是链表最显著的特征，但为了能够保持节点之间的顺序关系，每个节点在存储数据的同时都要配置一个指针，用于指向它的直接后继元素。\",\"#include <stddef.h> // 链表节点结构体定义 typedef struct Node { int value; // 节点数据域 struct Node* next; // 节点指针域，指向下一个节点的地址 } Node, *P_Node; int main() { P_Node head = NULL; // 初始化链表 return 0; } \",\"链表的首个节点被称为“头节点”，头节点通常包含指向下一个节点的指针。对于单链表来说，头结点是整个链表的入口，通过它可以遍历链表中的其他所有节点。如果链表为空，则头结点不存在，或者它的指针指向 NULL。 链表还拥有一个头指针，永远指向链表中第一个节点的位置，也就是链表中的“头节点”。\",\"头指针与头节点的区别：\",\"头指针只声明没有分配存储空间。\",\"头节点进行了声明并分配了一个结点大小的实际物理内存。\",\"在链表的实现中，有时人们会定义两个结构体，一个用于表示链表节点，另一个用于表示整个链表。这样做的原因主要是为了更好地管理链表的状态和提供更清晰的数据封装。\",\"#include <stddef.h> // 链表节点结构体定义 typedef struct Node { int value; // 节点数据域 struct Node* next; // 节点指针域，指向下一个节点的地址 } Node, *P_Node; // 链表结构体定义 typedef struct List { P_Node head; // 链表头结点 int size; // 链表大小（节点数量） } List; int main() { List list = { .head = NULL }; // 初始化链表 return 0; } \",\"从以上代码中可以看出，链表节点 Node 除了包含值，还需额外保存一个指针，因此在相同数据量下，链表比数组占用更多的内存空间。\"]},\"41\":{\"h\":\"链表的常用操作\"},\"42\":{\"h\":\"创建节点\",\"t\":[\"创建链表节点一般情况下需要使用 malloc 方法，该方法返回一个指针。如果分配内存成功，返回可用内存的起始地址，如果失败，则返回 NULL。需要注意的是 malloc 返回的指针类型是通用指针类型 void * 需要根据程序需要进行强制类型转换。**每个使用 malloc 分配的内存可以确保是地址连续的内存空间。多次使用 malloc 分配内存时，不能确保每个独立内存的起始地址是连续的。**使用 malloc 方法得到的内存不会执行内存清零操作，由于动态内存区可被重复使用，因此，程序作者一定要对内存进行初始化操作。\",\"// 创建新节点函数 P_Node create_node(int val) { P_Node new_node = (P_Node)malloc(sizeof(Node)); // 分配内存空间 if (new_node == NULL) { printf(\\\"Memory allocation failed.\\\\n\\\"); return NULL; } new_node->value = val; // 初始化数据域 new_node->next = NULL; // 初始化指针域 return new_node; } \"]},\"43\":{\"h\":\"插入节点\",\"t\":[\"// 在链表末尾添加节点函数 void append_node(List *list, P_Node node) { if (list->head == NULL) { // 如果链表为空，则将节点设为头节点 list->head = node; return; } P_Node last = list->head; while (last->next != NULL) { last = last->next; } last->next = node; // 将节点添加到链表末尾 } \"]},\"44\":{\"h\":\"查找节点\",\"t\":[\"// 查找链表中的第一个具有给定值 val 的节点（如果没有则返回 NULL） P_Node search_node(List list, int val) { while (list.head != NULL) { if (list.head->value == val) { return list.head; // 找到了返回与给定值相同的节点 } list.head = list.head->next; } return NULL; // 如果没有找到，则返回 NULL } \"]},\"45\":{\"h\":\"删除节点\",\"t\":[\"void delete_node(List *list, P_Node node) { if (list->head == NULL) { // 如果链表为空，则无需删除 return; } if (list->head == node) { // 如果要删除的节点是链表中第一个节点 list->head = node->next; // 直接修改链表头指向下一个节点 node->next = NULL; // 清除已删除节点的 next，使其与链表彻底隔离 free(node); // 释放 malloc 函数申请的空间 return; } P_Node last = list->head; while (last->next != NULL) { if (last->next == node) { last->next = node->next; node->next = NULL; free(node); return; } last = last->next; } } \"]},\"46\":{\"h\":\"打印节点\",\"t\":[\"void print_list(List list) { while (list.head != NULL) { printf(\\\"%d-->\\\", list.head->value); list.head = list.head->next; } printf(\\\"NULL\\\\n\\\"); } \"]},\"47\":{\"h\":\"完整代码\",\"t\":[\"#include <stddef.h> #include <stdlib.h> #include <stdio.h> // 链表节点结构体定义 typedef struct Node { int value; // 节点数据域 struct Node* next; // 节点指针域，指向下一个节点的地址 } Node, *P_Node; // 链表结构体定义 typedef struct List { P_Node head; // 链表头结点 int size; // 链表大小（节点数量） } List; P_Node create_node(int val) { P_Node new_node = (P_Node)malloc(sizeof(Node)); // 分配内存空间 if (new_node == NULL) { printf(\\\"Memory allocation failed.\\\\n\\\"); return NULL; } new_node->value = val; // 初始化数据域 new_node->next = NULL; // 初始化指针域 return new_node; } void append_node(List *list, P_Node node) { if (list->head == NULL) { // 如果链表为空，则将节点设为头节点 list->head = node; return; } P_Node last = list->head; while (last->next != NULL) { last = last->next; } last->next = node; // 将节点添加到链表末尾 } // 查找链表中的第一个具有给定值 val 的节点（如果没有则返回 NULL） P_Node search_node(List list, int val) { while (list.head != NULL) { if (list.head->value == val) { return list.head; // 找到了返回与给定值相同的节点 } list.head = list.head->next; } return NULL; // 如果没有找到，则返回 NULL } void delete_node(List *list, P_Node node) { if (list->head == NULL) { // 如果链表为空，则无需删除 return; } if (list->head == node) { // 如果要删除的节点是链表中第一个节点 list->head = node->next; // 直接修改链表头指向下一个节点 node->next = NULL; // 清除已删除节点的 next，使其与链表彻底隔离 free(node); // 释放 malloc 函数申请的空间 return; } P_Node last = list->head; while (last->next != NULL) { if (last->next == node) { last->next = node->next; node->next = NULL; free(node); return; } last = last->next; } } void print_list(List list) { while (list.head != NULL) { printf(\\\"%d-->\\\", list.head->value); list.head = list.head->next; } printf(\\\"NULL\\\\n\\\"); } int main() { List list = { .head = NULL, .size = 10 }; // 初始化链表 for (int i = 0; i < list.size; i++) { append_node(&list, create_node(i)); } print_list(list); delete_node(&list, search_node(list, 0)); delete_node(&list, search_node(list, 1)); delete_node(&list, search_node(list, 2)); delete_node(&list, search_node(list, 3)); delete_node(&list, search_node(list, 4)); delete_node(&list, search_node(list, 5)); delete_node(&list, search_node(list, 6)); delete_node(&list, search_node(list, 7)); delete_node(&list, search_node(list, 8)); delete_node(&list, search_node(list, 9)); print_list(list); return 0; } \"]},\"48\":{\"h\":\"常见链表类型\",\"t\":[\"常见的链表类型包括三种：\",\"单向链表：即前面介绍的普通链表。单向链表的节点包含值和指向下一节点的引用两项数据。我们将首个节点称为头节点，将最后一个节点称为尾节点，尾节点指向空 NULL 。\",\"环形链表：如果我们令单向链表的尾节点指向头节点（首尾相接），则得到一个环形链表。在环形链表中，任意节点都可以视作头节点。\",\"双向链表：与单向链表相比，双向链表记录了两个方向的引用。双向链表的节点定义同时包含指向后继节点（下一个节点）和前驱节点（上一个节点）的引用（指针）。相较于单向链表，双向链表更具灵活性，可以朝两个方向遍历链表，但相应地也需要占用更多的内存空间。\",\"typedef struct Node { int data; // 节点数据域 struct Node* next; // 节点指针域，指向下一个节点的地址 struct Node* prev; // 节点指针域，指向上一个节点的地址 } Node; \"]},\"49\":{\"c\":[\"C\"]},\"50\":{\"c\":[\"C\",\"数据结构\"]},\"51\":{\"h\":\"队列\",\"t\":[\"在计算机科学中，数据结构是软件开发的基础，它们负责组织和存储数据以优化算法性能。其中，队列是一种基础且广泛应用的线性数据结构，尤其在多任务处理、消息传递、操作系统调度等领域具有重要作用。本文将重点探讨如何在 C 语言中实现并操作队列。\"]},\"52\":{\"h\":\"队列的概念\",\"t\":[\"队列（queue）遵循先进先出的原则，就像现实生活中排队等待服务的情景一样，最先到达的元素最先离开。\"]},\"53\":{\"h\":\"队列的常用操作\",\"t\":[\"我们将队列头部称为“队首”，尾部称为“队尾”，队列有两个主要的操作：“入队”与“出队”，将把元素加入队尾的操作称为“入队”，删除队首元素的操作称为“出队”。\"]},\"54\":{\"h\":\"队列的实现\",\"t\":[\"为了实现队列，我们需要一种数据结构，可以在一端添加元素，并在另一端删除元素，链表和数组都符合要求。\"]},\"55\":{\"h\":\"基于链表实现\",\"t\":[\"我们可以将链表的“头节点”和“尾节点”分别视为“队首”和“队尾”，规定队尾仅可添加节点，队首仅可删除节点。\",\"#include <stdlib.h> typedef struct Node { int data; struct Node *next; } Node, *P_Node; typedef struct Queue { P_Node front; // 队头指针 P_Node rear; // 队尾指针 int size; } Queue, *P_Queue; P_Queue create_queue() { P_Queue queue = (P_Queue)malloc(sizeof(Queue)); if (queue != NULL) { queue->front = NULL; queue->rear = NULL; queue->size = 0; } return queue; } P_Node create_node(int value) { P_Node node = (P_Node)malloc(sizeof(Node)); if (node != NULL) { node->data = value; node->next = NULL; } return node; } \",\"入队操作：将要入队的节点插入到当前队列尾节点的后面，最后将尾节点变更为当前将要入队的节点。\",\"void push(P_Queue queue, int value) { P_Node node = create_node(value); if (node == NULL) { printf(\\\"Failed to allocate node\\\\n\\\"); return; } if (queue->front == NULL) { // 当队列中没有节点时，头节点与尾节点均指向将要入队的节点 queue->front = queue->rear = node; } else { // 将要入队的节点插入到当前队列尾节点的后面 queue->rear->next = node; // 更换尾节点的指向，保证队列的尾节点总是指向实际的最后一个节点。 queue->rear = node; } queue->size++; } \",\"出队操作：将当前队列头节点变更为头节点后下一个节点。\",\"void pop(P_Queue queue) { if (queue->size == 0 && queue->front == NULL) { printf(\\\"Queue is null\\\\n\\\"); return; } P_Node temp = queue->front; printf(\\\"%d\\\\n\\\", temp->data); queue->front = temp->next; queue->size--; free(temp); } \"]},\"56\":{\"h\":\"基于数组实现\",\"t\":[\"在数组中删除首元素时需要对当前数组进行遍历以确定首元素所在位置，这会导致出队操作效率较低。然而，我们可以采用以下巧妙方法来避免这个问题。 我们可以使用一个变量 front 指向队首元素的索引，并维护一个变量 size 用于记录队列长度。定义 rear = front + size ，这个公式计算出的 rear 指向队尾元素之后的下一个位置，基于此设计，数组中包含元素的有效区间为 [front, rear - 1]。\",\"#include <stdlib.h> typedef struct Queue { int *nums; int front; int size; int cap; } Queue, *P_Queue; P_Queue create_queue(int cap) { P_Queue queue = (P_Queue)malloc(sizeof(Queue)); if (queue != NULL) { queue->cap = cap; queue->nums = (int*)malloc(sizeof(int) * queue->cap); if (queue->nums == NULL) { return NULL; } queue->front = queue->size = 0; } return queue; } int main() { return 0; } \",\"入队操作：将要入队的元素赋值给 rear 索引处，并将 size 增加 1 。\",\"void push(P_Queue queue, int val) { if (queue->size == queue->cap) { printf(\\\"Queue is full\\\\n\\\"); return; } // 将输入元素赋值给 rear 索引处 int rear = (queue->front + queue->size) % queue->cap; queue->nums[rear] = val; // 并将 size 增加 1 queue->size++; } \",\"出队操作：只需将 front 增加 1 ，并将 size 减少 1 。\",\"void pop(P_Queue queue) { if (queue->size == 0) { printf(\\\"Queue is empty\\\\n\\\"); return; } int elem = queue->nums[queue->front]; printf(\\\"%d\\\\n\\\", elem); // 将 front 增加 1 queue->front = (queue->front + 1) % queue->cap; // 将 size 减少 1 queue->size--; } \"]},\"57\":{\"h\":\"为什么要用模运算\",\"t\":[\"模运算对于处理循环序列非常有用，例如，在当前数组或链表的索引循环中，通过使用模运算可以让索引值始终保持在有效范围内。例如，当你有一个长度为 n 的数组时，计算下标 i % n 可以确保下标总是在 0 到（n - 1）之间。\"]},\"58\":{\"c\":[\"C\"]},\"59\":{\"c\":[\"C\",\"数据结构\"]},\"60\":{\"h\":\"栈\",\"t\":[\"栈是一种遵循先入后出的逻辑的线性数据结构。我们可以将栈类比为桌面上的一摞盘子，如果想取出底部的盘子，则需要先将上面的盘子依次移走。我们将盘子替换为各种类型的元素（如整数、字符、对象等），就得到了栈这种数据结构。\"]},\"61\":{\"h\":\"栈的常用操作\",\"t\":[\"我们把堆叠元素的顶部称为“栈顶”，底部称为“栈底”。将把元素添加到栈顶的操作叫作“入栈”，删除栈顶元素的操作叫作“出栈”。\"]},\"62\":{\"h\":\"栈的实现\",\"t\":[\"为了深入了解栈的运行机制，我们来尝试自己实现一个栈。栈遵循先入后出的原则，因此我们只能在栈顶添加或删除元素。然而，数组和链表都可以在任意位置添加和删除元素，因此栈可以视为一种受限制的数组或链表。换句话说，我们可以“屏蔽”数组或链表的部分无关操作，使其对外表现的逻辑符合栈的特性。\"]},\"63\":{\"h\":\"基于链表实现\",\"t\":[\"使用链表实现栈时，我们可以将链表的头节点视为栈顶，尾节点视为栈底。对于入栈操作，我们只需将元素插入链表头部，这种节点插入方法被称为“头插法”。而对于出栈操作，只需将头节点从链表中删除即可。\",\"#include <stdlib.h> #include <stdio.h> typedef struct Node { int value; struct Node* next; } Node, *P_Node; typedef struct Stack { P_Node top; int size; } Stack, *P_Stack; // 构造函数 P_Stack create_stack() { P_Stack stack = (P_Stack)malloc(sizeof(Stack)); if (stack != NULL) { stack->top = NULL; stack->size = 0; } return stack; } // 入栈 void push(P_Stack stack, int val) { P_Node node = (P_Node)malloc(sizeof(Node)); if (node != NULL) { node->next = stack->top; node->value = val; stack->top = node; stack->size++; } } // 出栈 void pop(P_Stack stack) { if (stack->size == 0) { printf(\\\"stack is empty\\\\n\\\"); return; } P_Node node = stack->top; stack->top = stack->top->next; printf(\\\"%d\\\\n\\\", node->value); free(node); stack->size--; } int main() { P_Stack stack = create_stack(); push(stack, 1); push(stack, 2); pop(stack); pop(stack); pop(stack); return 0; } \"]},\"64\":{\"h\":\"基于数组实现\",\"t\":[\"使用数组实现栈时，我们可以将数组的尾部作为栈顶。入栈与出栈操作分别对应在数组尾部添加元素与删除元素。\",\"#include <stdlib.h> #include <stdio.h> typedef struct Stack { int capacity; // 栈的容量 int top; // 栈顶元素的索引 int* array; // 存储栈元素的数组 } Stack, *P_Stack; // 构造函数 P_Stack create_stack(int cap) { P_Stack stack = (P_Stack)malloc(sizeof(Stack)); if (stack != NULL) { stack->capacity = cap; stack->top = -1; stack->array = (int*)malloc(sizeof(int) * stack->capacity); if (stack->array == NULL) { return NULL; } } return stack; } // 入栈 void push(P_Stack stack, int val) { if (stack->top == stack->capacity - 1) { printf(\\\"stack is full\\\\n\\\"); return; } stack->top++; stack->array[stack->top] = val; } // 出栈 void pop(P_Stack stack) { if (stack->top == - 1) { printf(\\\"stack is empty\\\\n\\\"); return; } int data = stack->array[stack->top]; stack->top--; printf(\\\"%d\\\\n\\\", data); } int main() { P_Stack stack = create_stack(10); for (int i = 0; i <= 10; i++) { push(stack, i); } pop(stack); pop(stack); pop(stack); return 0; } \"]},\"65\":{\"c\":[\"C\"]},\"66\":{\"c\":[\"C\",\"数据结构\"]},\"67\":{\"h\":\"基本语法\"},\"68\":{\"h\":\"语句\",\"t\":[\"C 语言的代码是由一行行的语句所组成，语句就是程序执行的一个操作命令，C 语言规定，语句必须使用分号结尾，除非有明确规定可以不写分号。\",\"int x = 1; \",\"变量声明语句，声明整数变量 x，并且将值设为 1。\",\"int x; x = 1; \",\"两个语句写在一行：\",\"变量声明，声明整数变量 x。\",\"变量赋值，将声明的整数变量 x 赋值为 1。\",\"所以，语句之间的换行符并不是必需的，只是为了方便阅读代码。\",\"int x; x = 1 ; \",\"一个语句也可以写成多行，这时就要依靠分号判断语句在哪一行结束。\",\"不建议这样做，增加对代码的阅读负担\",\"； \",\"单个分号也是有效语句，称为“空语句”，虽然毫无作用。\"]},\"69\":{\"h\":\"表达式\",\"t\":[\"C 语言的各种计算，主要通过表达式完成，表达式是一个计算式，用来获取值。\",\"1 + 2 \",\"用来获取 1 + 2 这个算术计算的结果的表达式。\",\"8; 3 + 4; \",\"表达式加上分号，也可以成为语句。 表达式与语句的区别主要有：\",\"语句可以包含表达式，但是表达式本身不构成语句。\",\"表达式都有返回值，语句不一定有，因为语句用来执行某个命令，很多时候不需要返回值，比如变量声明语句（int x = 1）就没有返回值。\"]},\"70\":{\"h\":\"语句块\",\"t\":[\"C 语言允许多个语句使用一对大括号 {}，组成一个块，也称为复合语句，在语法上，语句块可以视为多个语句组成的一个复合语句。\",\"{ int x; x = 1; } \",\"用大括号包裹形成了一个语句块。\",\"大括号的结尾不需要添加分号。\"]},\"71\":{\"h\":\"空格\",\"t\":[\"C 语言里面的空格，主要用来帮助编译器区分语法单位，如果语法单位不用空格就能区分，空格就不是必须的，只是为了增加代码的可读性。\",\"int x = 1; // 等同于 int x=1; \",\"赋值号（=）前后有没有空格都可以，因为编译器这里不借助空格，就能区分语法单位。\",\"int x = 1; \",\"语法单位之间的多个空格，等同于单个空格。\",\"各个语法单位之间的多个空格，跟单个空格的效果是一样的。\",\"空格还用来表示缩进，多层级的代码有没有缩进，其实对于编译器来说并没有差别，没有缩进的代码也是完全可以运行的，强调代码缩进，只是为了增强代码可读性，便于区分代码块。\"]},\"72\":{\"h\":\"注释\",\"t\":[\"注释是对代码的说明，编译器会忽略注释，也就是说，注释对实际代码没有影响，C 语言中注释写法有两种。\",\"/* 注释 */ /* 这是一行注释 */ int x; /* 注释 */ x = 1; \",\"将要注释的内容放在 /.../ 之间，内部可以分行。\",\"这种注释可以插在行内，用来对参数进行说明，跟在它后面的代码依然会有效执行。\",\"一定不能忘记写结束符号 */，否则很容易导致错误。\",\"// 这是一行注释 int x = 1; // 这也是注释 \",\"将注释放在双斜杠//后面，从双斜杠到行尾都属于注释，这种注释只能是单行，可以放在行首，也可以放在一行语句的结尾，这是 C99 标准新增的语法。\",\"printf(\\\"// hello /* world */ \\\"); \",\"不管是哪一种注释，都不能放在双引号里面，双引号里面的注释符号，会成为字符串的一部分，解释为普通符号，失去注释作用。\"]},\"73\":{\"c\":[\"C\"]},\"74\":{\"c\":[\"C\"]},\"75\":{\"h\":\"main 函数\",\"t\":[\"C 语言的执行开始于 main 方法，main 方法是所有 C 语言程序执行的入口，在程序的开头，通常会定义一个 main 方法，并且它会作为程序的起始点，也就是说所有的 C 语言程序都需要一个称之为 mian 的方法，程序执行是从 main 方法中的第一句开始执行，当 main 函数返回时程序也会随之结束。\",\"在最新的 C99 标准中 main 函数只有两种标准形式，值得注意的是标准 C 的返回值是一个整数，若 main 方法执行到末尾没有遇到返回语句，则直接默认执行了 return 0，而 0 值一般代表着成功的意思，如果对其他非 0 值感兴趣的话可以试着去搜索一下“Linux 或 Window 错误代码及其含义”这里就不做过多陈述。\",\"int main(void) { // 程序执行的代码 return 0; } \",\"int main(int argc, char* argv[]) { // 程序执行的代码 return argc; } \",\"参数 argc 和 argv（也可以根据需要另外命名），代表了程序的命令行参数。\",\"argc（全称为 argument count）的值为 0 或者为命令行中启动该程序的字符串的数量。程序本身的名称也算作该字符串，也要计算进去。\",\"argv（全称为 arguments vector）是一个 char 指针数组，每个指针都独立的指向命令行中每个字符串：数组中元素的个数，比 argc 的值多 1；最后一个元素 argv[argc] 是空指针。如果 argc 大于 0，那么第一个字符串，argv[0]，就是程序本身的名称。如果运行环境不支持程序名称，那么 argv[0] 为空。如果 argc 大于 1，从字符串 argv[1] 到 argv[argc-1] 包含该程序命令行参数。\",\"除此之外，许多 C 的实现版本还支持其他、非标准语法的书写形式，有些编译器允许这种形式，但是还没有任何标准考虑接受它。所以编译器不必接受这种形式，并且很多编译器也不允许这么写。坚持使用标准的意义在于：当你把程序从一个编译器移到另一个编译器时，照样能正常运行。\",\"int main(int argc, char *argv[], char *envp[]) { // 程序执行的代码 return argc; } \",\"envp（全称为 environment pointer）在非标准的、有 3 个参数的 main（）函数版本中，是一个指针数组，每个指针都指向组成程序环境的一个字符串。通常，这个字符串的格式是“名称 = 值”。在标准 C 语言中，可以利用函数 getenv（）获取得这些环境变量。\",\"C 的 main 方法也是一个普通的函数，我们也向 main 方法叫做 main 函数，而 C 的设计原则是把函数作为程序的构成模块，main 函数称之为主函数，所有简单的程序都可以定义其他额外的函数。\",\"#include <stdio.h> int main() { printf(\\\"Hello World!\\\\n\\\"); return 0; } \",\"总之，C 语言中的 main 函数是程序的入口函数，它为程序提供了一个起始点，在 main 函数中，我们可以定义各种变量、调用各种函数、执行各种操作，还可以编写各种算法和逻辑。通过正确地使用 main 函数，我们可以让程序完成各种复杂的任务。\"]},\"76\":{\"c\":[\"C\"]},\"77\":{\"c\":[\"C\"]},\"78\":{\"h\":\"变量\"},\"79\":{\"h\":\"变量名\",\"t\":[\"在 C 语言中变量名属于标识符，命名有严格的规范：\",\"只能由字母（包括大写和小写）、数字和下划线 ‘_’ 组成。\",\"不能以数字开头。\",\"长度不能超过 63 个字符。\",\"变量名区分大小写，star、Star、STAR 都是不同的变量。\",\"并非所有的词都能用作变量名，有些词在 C 语言里面有特殊含义（比如 int），另一些词是命令（比如 continue），它们都称为关键字，不能用作变量名，另外，C 语言还保留了一些词，供未来使用，这些保留字也不能用作变量名，下面就是 C 语言主要的关键字和保留字。\",\"注意\",\"auto, break, case, char, const, continue, default, do, double, else, enum, extern, float, for, goto, if, inline, int, long, register, restrict, return, short, signed, sizeof, static, struct, switch, typedef, union, unsigned, void, volatile, while\",\"另外，两个下划线开头的变量名，以及一个下划线 + 大写英文字母开头的变量名，都是系统保留的，自己不应该起这样的变量名。\"]},\"80\":{\"h\":\"变量的声明\",\"t\":[\"C 语言的变量，必须先声明后使用，如果一个变量没有声明就直接使用会报错，每个变量都有自己的类型，声明变量时，必须把变量的类型告诉编译器。\",\"int height; \",\"声明了变量 height，并且指定类型为 int（整数）。\",\"int height, width; // 等同于 int height; int width; \",\"如果几个变量具有相同类型，可以在同一行声明。\",\"声明变量的语句必须以分号结尾。\",\"一旦声明，变量的类型就不能在运行时修改。\"]},\"81\":{\"h\":\"变量的赋值\",\"t\":[\"C 语言会在变量声明时，就为它分配内存空间，但是不会清除内存里面原来的值，这导致声明变量以后，变量会是一个随机的值，所以，变量一定要赋值以后才能使用。\",\"int num; num = 42; \",\"第一行声明了一个整数变量 num，第二行给这个变量赋值。\",\"变量的值应该与类型一致，不应该赋予不是同一个类型的值，比如 num 的类型是整数，就不应该赋值为小数，虽然 C 语言会自动转换类型，但是应该避免赋值运算符两侧的类型不一致。\",\"int num = 42; \",\"变量的声明和赋值，也可以写在一行。\",\"int x = 1, y = 2; \",\"多个相同类型变量的赋值，可以写在同一行。\",\"int x, y; x = 1; y = (x = 2 * x); // y = 2 \",\"赋值表达式有返回值，等于等号右边的值。\",\"变量 y 的值就是赋值表达式（x = 2 * x）的返回值 2。\",\"int x, y, z, m, n; x = y = z = m = n = 3; \",\"如上所示，赋值表达式有返回值，所以 C 语言可以写出多重赋值表达式（一次为多个变量赋值）。\",\"赋值运算符是从右到左执行，所以先为 n 赋值，然后依次为 m、z、y 和 x 赋值。\"]},\"82\":{\"h\":\"变量的作用域\",\"t\":[\"作用域指的是变量生效的范围。C 语言的变量作用域主要有两种：文件作用域和块作用域。\",\"文件作用域：在源码文件顶层声明的变量，从声明的位置到文件结束都有效。\",\"块作用域：指的是由大括号（{}）组成的代码块，它形成一个单独的作用域，凡是在块作用域里面声明的变量，只在当前代码块有效，代码块外部不可见。\",\"int x = 1; int main() { printf(\\\"%i\\\\n\\\", x); return 0; } \",\"变量 x 是在文件顶层声明的，从声明位置开始的整个当前文件都是它的作用域，可以在这个范围的任何地方读取这个变量，比如函数 main() 内部就可以读取这个变量。\",\"int a = 12; if (a == 12) { int b = 99; printf(\\\"%d %d\\\\n\\\", a, b); // 12 99 } printf(\\\"%d\\\\n\\\", a); // 12 printf(\\\"%d\\\\n\\\", b); // 出错 \",\"变量 b 是在 if 代码块里面声明的，所以对于大括号外面的代码，这个变量是不存在的。\",\"{ int i = 10; { int i = 20; printf(\\\"%d\\\\n\\\", i); // 20 } printf(\\\"%d\\\\n\\\", i); // 10 } \",\"内层和外层都有一个变量 i，每个作用域都会优先使用当前作用域声明的 i。\",\"代码块可以嵌套，即代码块内部还有代码块，这时就形成了多层的块作用域，它的规则是：内层代码块可以使用外层声明的变量，但外层不可以使用内层声明的变量，如果内层的变量与外层同名，那么会在当前作用域覆盖外层变量。\",\"for (int i = 0; i < 10; i++) { printf(\\\"%d\\\\n\\\", i); } printf(\\\"%d\\\\n\\\", i); // 出错 \",\"函数内部声明的变量，对于函数外部是不可见的， for 循环也是一个块作用域，循环变量只对循环体内部可见，外部是不可见的。\"]},\"83\":{\"c\":[\"C\"]},\"84\":{\"c\":[\"C\"]},\"85\":{\"h\":\"stdio.h\",\"t\":[\"stdio.h 是一个核心的标准输入输出（Standard Input/Output）头文件，它提供了丰富的函数和类型定义来处理与外部设备的文本和二进制数据交换。\"]},\"86\":{\"h\":\"标准 I/O 函数\",\"t\":[\"以下函数用于控制台的输入和输出：\",\"printf()：输出到控制台。\",\"scanf()：从控制台读取输入。\",\"getchar()：从控制台读取一个字符。\",\"putchar()：向控制台写入一个字符。\",\"gets()：从控制台读取整行输入（已废除）。\",\"puts()：向控制台写入一个字符串。\"]},\"87\":{\"h\":\"文件操作函数\",\"t\":[\"以下函数用于文件操作：\",\"fopen()：打开文件。\",\"fclose()：关闭文件。\",\"freopen()：打开一个新文件，关联一个已经打开的文件指针。\",\"fprintf()：输出到文件。\",\"fscanf()：从文件读取数据。\",\"getc()：从文件读取一个字符。\",\"fgetc()：从文件读取一个字符。\",\"putc()：向文件写入一个字符。\",\"fputc()：向文件写入一个字符。\",\"fgets()：从文件读取整行。\",\"fputs()：向文件写入字符串。\",\"fread()：从文件读取二进制数据。\",\"fwrite()：向文件写入二进制数据。\",\"fseek()：将文件内部指针移到指定位置。\",\"ftell()：获取文件内部指针的当前位置。\",\"rewind()：将文件内部指针重置到文件开始处。\",\"fgetpos()：获取文件内部指针的当前位置。\",\"fsetpos()：设置文件内部指针的当前位置。\",\"feof()：判断文件内部指针是否指向文件结尾。\",\"ferror()：返回文件错误指示器的状态。\",\"clearerr()：重置文件错误指示器。\",\"remove()：删除文件。\",\"rename()：文件改名，以及移动文件。\"]},\"88\":{\"h\":\"字符串操作函数\",\"t\":[\"以下函数用于操作字符串：\",\"sscanf()：从字符串读取数据。\",\"sprintf()：输出到字符串。\",\"snprintf()：输出到字符串的更安全版本，指定了输出字符串的数量。\"]},\"89\":{\"c\":[\"C\"]},\"90\":{\"c\":[\"C\"]},\"91\":{\"h\":\"深拷贝&浅拷贝\"},\"92\":{\"h\":\"JS 数据类型\",\"t\":[\"JavaScript 是一种动态类型的语言，这意味着变量可以在程序执行期间更改其数据类型。JavaScript 提供了多种数据类型，可以大致分为两类：基本数据类型（也称为原始值）和引用数据类型。\"]},\"93\":{\"h\":\"基本数据类型\",\"t\":[\"基本数据类型直接存储在栈内存中，它们的值是不可变的，这是因为当我们想从新给基础类型赋值来“改变”它们的值时，实际上是创建了一个新的基本数据类型实例，并将其分配给当前的变量名中。\",\"这样的好处在于，基本数据类型的值不可变，所以在代码中传递这些值时不需要担心它们被意外地修改。这有助于编写无副作用的纯函数，并提高程序的可预测性和稳定性。\",\"let myNum = 42 // 创建一个数值变量 myNum = 43 // 不是改变原来的数值，而是创建一个新的数值并重新分配给 myNum \",\"在 code - 1 中，myNum 变量最初存储的是整数 42，然后通过重新赋值将其改为 43。实际上，这是创建了两个不同的 Number 实例，而不是直接改变了原始数值的值。\"]},\"94\":{\"h\":\"引用数据类型\",\"t\":[\"引用数据类型存储在堆内存中，它们的值是可以改变的，值得注意的是 引用数据类型都是以 object 的基础上派生的，所以除了 null 类型以外，所有的引用类型都是 typeof 运算符返回结果为 object 的对象。\",\"如果你需要区分具体的引用类型，可以使用 instanceof 操作符或者检查构造函数名称。\",\"let arr = [] window.console.log(arr instanceof Array) // true window.console.log(arr.constructor.name) // Array \"]},\"95\":{\"h\":\"浅拷贝与深拷贝\",\"t\":[\"在 JavaScript 中，深拷贝和浅拷贝一般情况都是在引用数据类型的基础上所讨论的，它们是两种不同的复制对象的方式，区别就在于复制的深度以及对原始对象和副本之间关系的影响。\",\"这主要是因为在引用类型中，当我们将变量赋值给另一个变量时，实际上是将它们的引用地址复制了一份。这样，当我们对其中一个变量进行修改时，另一个变量也会受到影响。因此，为了避免这种情况的发生，所以我们通常需要使用拷贝的手段来创建一个新的副本。\",\"let objA = { name: \\\"Li Ming\\\", age: 18 } let objB = objA objA.name = \\\"Xiao Hua\\\" window.console.log(objA) // { name: \\\"Xiao Hua\\\", age: 18 } window.console.log(objB) // { name: \\\"Xiao Hua\\\", age: 18 } \"]},\"96\":{\"h\":\"浅拷贝\",\"t\":[\"浅拷贝只复制了对象的第一层属性值，而不复制其内部的引用。当对象包含其他对象或数组作为属性时，浅拷贝只会创建这些嵌套对象或数组的引用副本，而不是实际的对象或数组本身。因此，如果修改了原对象中的嵌套对象或数组，那么这个修改也会反映到浅拷贝后的副本上，因为它们共享相同的引用。\",\"let objA = { name: \\\"Li Ming\\\", score: [80, 60, 90] } let objB = { ...objA } objA.name = \\\"Xiao Hua\\\" objA.score[0] = 100 window.console.log(objA) // { name: \\\"Xiao Hua\\\", score: [100, 60, 90] } window.console.log(objB) // { name: \\\"Li Ming\\\", score: [100, 60, 90] } \",\"值得注意的是在 code - 5 中，我们修改了原对象中嵌套的数组，但这个修改没有反映到浅拷贝后的副本上，这是因为我们相当于重写了一个数组，如果重写的话，那么他相当于在堆内存中重新开辟了一块空间这样修改之后的这个数组与之前修改的数组会分别处在两个不同地址的内存空间中且他们互不影响，同理此种情况也适用于对象与函数。\",\"let objA = { name: \\\"Li Ming\\\", score: [80, 60, 90] } let objB = { ...objA } objA.name = \\\"Xiao Hua\\\" objA.score = [100, 60, 90] window.console.log(objA) // { name: \\\"Xiao Hua\\\", score: [100, 60, 90] } window.console.log(objB) // { name: \\\"Li Ming\\\", score: [80, 60, 90] } \"]},\"97\":{\"h\":\"深拷贝\",\"t\":[\"深拷贝会递归地复制整个对象及其所有嵌套的对象和数组。它会在内存中为每个被复制的对象分配新的空间，并将所有的属性值都复制过去。这意味着即使原对象中的嵌套对象或数组发生了变化，也不会影响到深拷贝后的副本，因为它们各自拥有独立的内存空间。\",\"实现深拷贝的方法有很多种，只要达到它们各自拥有独立的内存空间且互不干扰，例如使用 JSON.stringify 方法将对象转换为 JSON 字符串，然后使用 JSON.parse 方法将 JSON 字符串解析为新的对象，这样也可以实现深拷贝。但是，这种方法有一些局限性，例如它不能处理函数和 undefined。\",\"let objA = { name: \\\"Li Ming\\\", score: [80, 60, 90], select: function () { return this.name }, age: undefined, } let objB = JSON.parse(JSON.stringify(objA)) window.console.log(objA) // { name: \\\"Li Ming\\\", score: [80, 60, 90], select: ƒ, age: undefined } window.console.log(objB) // { name: \\\"Li Ming\\\", score: [80, 60, 90] } \",\"我们也可以手动去实现一个深拷贝，实现该方法通常需要递归地复制对象的所有属性，并创建任何嵌套对象或数组的新副本。\",\"function deepCopy(obj) { // 对于非对象和null值，直接返回 if (obj === null || typeof obj !== \\\"object\\\") return obj // 根据obj的类型来决定新创建对象的类型 let copy = Array.isArray(obj) ? [] : {} for (let key in obj) { if (obj.hasOwnProperty(key)) { // 递归调用deepCopy处理每个属性 copy[key] = deepCopy(obj[key]) } } return copy } \"]},\"98\":{\"c\":[\"JavaScript\"]},\"99\":{\"c\":[\"JavaScript\"]},\"100\":{\"h\":\"Blob 类型\"},\"101\":{\"h\":\"Blob\",\"t\":[\"Blob 是 JavaScript 中的一个对象，其全称为 binary large object（二进制大对象），用于表示一个不可变、原始数据的类文件对象，它本身是不能直接读写所存储的数据，需要借助图 1 中来对它的数据以不同形式的格式进行读取操作。\"]},\"102\":{\"h\":\"File\",\"t\":[\"File 对象中存在于浏览器环境中，在 node.js 环境中不存在，并且 Blob 的属性和方法都可以应用于 File 对象上，对此我们可以将 File 对象看作是特殊类型的 Blob，且可以用在任意的 Blob 类型的 context 中,比如: FileReader, URL.createObjectURL, createImageBitmap, 及 XMLHttpRequest.send 都能处理 Blob 和 File 对象。\",\"从图 2 可以看出 File 对象相比于 Blob 对象多包含了一些文件属性，File 原型中可以了解 File 是继承自 Blob。\"]},\"103\":{\"h\":\"前端获取文件的几种情况\"},\"104\":{\"h\":\"input 上传\",\"t\":[\"创建 <input> 元素并在其上绑定 onchange 事件，在通过用户点击上传后获取 FileList 对象，其中 input 标签中 type 是用来决定用户的输入类型，multiple 是用来确定是否可以同时上传多个文件。\",\"<input id=\\\"cake\\\" type=\\\"file\\\" multiple=\\\"multiple\\\" /> \",\"const selectElement = window.document.getElementById(\\\"cake\\\") selectElement.onchange = (event) => { window.console.log(event.target.files) } \"]},\"105\":{\"h\":\"文件拖放\",\"t\":[\"创建一个 <div> 标签或者创建其他任意一种标签，通过绑定 ondragover 与 ondrop 事件来完成将浏览器之外的文件拖拽到浏览器窗口中，并将它放在一个成为拖放区域的特殊区域中，也就是之前所创建的 <div> 标签中。\",\"ondragover：当元素或选中的文本被拖到一个可释放目标上时触发（每 100 毫秒触发一次）。\",\"ondrop：当元素或选中的文本在可释放目标上被释放时触发。\",\"<div id=\\\"cake\\\"></div> \",\"const selectElement = window.document.getElementById(\\\"cake\\\") selectElement.ondragover = (event) => { event.preventDefault() } selectElement.ondrop = (event) => { event.preventDefault() window.console.log(event.dataTransfer.files) } \",\"##cake { width: 200px; height: 200px; border: 1px solid black; } \",\"值得注意的是在 ondragover 与 ondrop 事件中均调用 preventDefault() 来阻止对这个事件的其他处理过程（如触点事件或指针事件更或者是放置文件时将文件显示在浏览器窗口中），但此事件还是会继续传播，除非碰到事件监听器调用 stopPropagation() 或 stopImmediatePropagation() 才停止传播。\"]},\"106\":{\"h\":\"showOpenFilePicker API\",\"t\":[\"通过 window.showOpenFilePicker() 方法，该方法用于显示一个文件选择器，以允许用户选择一个或多个文件并返回这些文件的句柄。\",\"<button id=\\\"cake\\\">点击上传文件</button> \",\"const selectElement = window.document.getElementById(\\\"cake\\\") selectElement.onclick = async () => { const pickerOpts = { types: [ { description: \\\"Images\\\", accept: { \\\"image/*\\\": [\\\".png\\\", \\\".gif\\\", \\\".jpeg\\\", \\\".jpg\\\"], }, }, ], excludeAcceptAllOption: true, multiple: false, } const [fileHandle] = await window.showOpenFilePicker(pickerOpts) window.console.log(fileHandle) } \",\"值得注意的是 window.showOpenFilePicker() API 较新，使用时需注意此项功能仅在一些支持的浏览器的安全上下文（HTTPS）中可用，在将其用于生产之前，需仔细检查浏览器兼容性。\"]},\"107\":{\"h\":\"请求远端\",\"t\":[\"通过 fetch 或 axios 等获取远端文件，这也是我们最常用到的。\",\"fetch(\\\"../src/assets/image/cake.png\\\") .then(async (responce) => { window.console.log(await responce.blob()) }) .catch((err) => { window.console.log(err) }) \"]},\"108\":{\"h\":\"FileReader\",\"t\":[\"FileReader 对象允许 Web 应用程序异步读取存储在用户计算机上的文件（但不能用于从文件系统中按路径名简单地读取文件）或原始数据缓冲区的内容，使用 File 或 Blob 对象指定要读取的文件或数据。 简单来说 FileReader 是一个异步 API，它允许接受 File 或 Blob 对象，并根据我们的要求读取成我们想要的文件或数据类型。\",\"FileReader 对象可以使用 FileReader 构造函数来创建，并从图 5 中分别可以看到 FileReader 对象所提供的属性与事件处理。\",\"const fr = new FileReader() window.console.log(fr) \",\"FileReader 对象属性如下：\",\"error（只读）：表示在读取文件时发生的错误；\",\"readyState（只读）：表示 FileReader 状态的数字，取值如下：0（EMPTY）还没有加载任何数据、1（LOADING）数据正在被加载、2（DONE）已完成全部的读取请求。\",\"result（只读）：文件的内容，该属性仅在读取操作完成后才有效，数据的格式取决于使用哪个方法来启动读取操作。\",\"FileReader 对象事件处理如下：\",\"onabort：该事件在读取操作被中断时触发。\",\"onerror：该事件在读取操作发生错误时触发。\",\"onload：该事件在读取操作完成时触发。\",\"onloadstart：该事件在读取操作开始时触发。\",\"onloadend：该事件在读取操作结束时（要么成功，要么失败）触发。\",\"onprogress：该事件在读取 Blob 时触发，当上传大文件时，可以用该事件来监控文件的读取进度。\",\"回归正文，在图 4 中可以看到 FileReader 对象可以将 File 或 Blob 输出成不同的数据格式，所以可以把 FileReader 对象看成一个工具，该工具提供了一些读取方法，这关乎着 result 属性最后所呈现的文件内容，FileReader 对象提供了以下方法来加载文件：\",\"readAsArrayBuffer: 读取指定 Blob 中的内容，完成之后，result 属性中保存的将是被读取文件的 ArrayBuffer 数据对象。\",\"readAsBinaryString: 读取指定 Blob 中的内容，完成之后，result 属性中将包含所读取文件的原始二进制数据。\",\"readAsDataURL: 读取指定 Blob 中的内容，完成之后，result 属性中将包含一个 data: URL 格式的 Base64 字符串以表示所读取文件的内容。\",\"readAsText: 读取指定 Blob 中的内容，完成之后，result 属性中将包含一个字符串以表示所读取的文件内容。\",\"以 readAsDataURL 方法为例，首先创建一个 FileReader 对象，当文件上传成功时，使用该方法读取 File 对象，当读取操作完成时打印读取结果。\",\"<input id=\\\"cake\\\" type=\\\"file\\\" /> \",\"const selectElement = window.document.getElementById(\\\"cake\\\") const fr = new FileReader() fr.onload = (e) => { window.console.log(e.target.result) } selectElement.onchange = (event) => { fr.readAsDataURL(event.target.files[0]) } \",\"如果此时打印 FileReader 对象我们就可以看见 readyState 状态为已完成、 onload 事件为我们刚刚定义的方法、 result 内容为 readAsDataURL 方法启动的读取结果。\"]},\"109\":{\"h\":\"ArrayBuffer\",\"t\":[\"ArrayBuffer 对象用来表示通用的、固定长度的原始二进制数据缓冲区，ArrayBuffer 的内容不能直接操作，只能通过 DataView 对象或 TypedArrray 对象来访问，这些对象用于读取和写入缓冲区内容。 TypedArrray 视图与 DataView 视图的区别主要是字节序，前者的数组成员都是同一个数据类型，后者的数组成员可以是不同的数据类型。\",\"TypedArrray 只是一个概念，实际使用的是那图 7 中的 9 个对象。\",\"DataView 可以自定义格式和字节序，更像是 TypeScript 中的元祖。\",\"Blob 相较于 ArrayBuffer 它作为一个整体文件，更适合用于文件传输，当需要对二进制数据进行操作时（例如修改文件中某一段数据时）就可以使用 ArrayBuffer 来完成。\",\"const Hello = [72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100] const buffer = new ArrayBuffer(Hello.length) const wrapBuffer = new Int8Array(buffer) for (let i = 0; i < Hello.length; i++) { wrapBuffer[i] = Hello[i] } const blob = new Blob([buffer]) const reader = new FileReader() reader.readAsText(blob) window.console.log(reader) \"]},\"110\":{\"c\":[\"JavaScript\"]},\"111\":{\"c\":[\"JavaScript\"]},\"112\":{\"h\":\"Algorithm Training\"},\"113\":{\"h\":\"Data Structure\"},\"114\":{\"h\":\"Language Foundation\"},\"115\":{\"h\":\"Standard Library\"},\"116\":{\"h\":\"Basic\"}},\"dirtCount\":0,\"index\":[[\"相较于\",{\"1\":{\"109\":1}}],[\"相较于单向链表\",{\"1\":{\"48\":1}}],[\"视图的区别主要是字节序\",{\"1\":{\"109\":1}}],[\"视图与\",{\"1\":{\"109\":1}}],[\"固定长度的原始二进制数据缓冲区\",{\"1\":{\"109\":1}}],[\"状态为已完成\",{\"1\":{\"108\":1}}],[\"状态的数字\",{\"1\":{\"108\":1}}],[\"格式的\",{\"1\":{\"108\":1}}],[\"属性中将包含一个字符串以表示所读取的文件内容\",{\"1\":{\"108\":1}}],[\"属性中将包含一个\",{\"1\":{\"108\":1}}],[\"属性中将包含所读取文件的原始二进制数据\",{\"1\":{\"108\":1}}],[\"属性中保存的将是被读取文件的\",{\"1\":{\"108\":1}}],[\"属性最后所呈现的文件内容\",{\"1\":{\"108\":1}}],[\"读取指定\",{\"1\":{\"108\":4}}],[\"输出成不同的数据格式\",{\"1\":{\"108\":1}}],[\"输出到字符串的更安全版本\",{\"1\":{\"88\":1}}],[\"输出到字符串\",{\"1\":{\"88\":1}}],[\"输出到文件\",{\"1\":{\"87\":1}}],[\"输出到控制台\",{\"1\":{\"86\":1}}],[\"回归正文\",{\"1\":{\"108\":1}}],[\"时触发\",{\"1\":{\"108\":1}}],[\"触发\",{\"1\":{\"108\":1}}],[\"已完成全部的读取请求\",{\"1\":{\"108\":1}}],[\"已废除\",{\"1\":{\"86\":1}}],[\"取值如下\",{\"1\":{\"108\":1}}],[\"简单来说\",{\"1\":{\"108\":1}}],[\"应用程序异步读取存储在用户计算机上的文件\",{\"1\":{\"108\":1}}],[\"请求远端\",{\"0\":{\"107\":1}}],[\"需仔细检查浏览器兼容性\",{\"1\":{\"106\":1}}],[\"需要借助图\",{\"1\":{\"101\":1}}],[\"需要根据程序需要进行强制类型转换\",{\"1\":{\"42\":1}}],[\"需要注意的是\",{\"1\":{\"42\":1}}],[\"较新\",{\"1\":{\"106\":1}}],[\"才停止传播\",{\"1\":{\"105\":1}}],[\"毫秒触发一次\",{\"1\":{\"105\":1}}],[\"标签或者创建其他任意一种标签\",{\"1\":{\"105\":1}}],[\"标签中\",{\"1\":{\"104\":1,\"105\":1}}],[\"标准\",{\"0\":{\"86\":1}}],[\"标准中\",{\"1\":{\"75\":1}}],[\"标准新增的语法\",{\"1\":{\"72\":1}}],[\"事件为我们刚刚定义的方法\",{\"1\":{\"108\":1}}],[\"事件中均调用\",{\"1\":{\"105\":1}}],[\"事件来完成将浏览器之外的文件拖拽到浏览器窗口中\",{\"1\":{\"105\":1}}],[\"事件\",{\"1\":{\"104\":1}}],[\"事实上\",{\"1\":{\"15\":1}}],[\"元素并在其上绑定\",{\"1\":{\"104\":1}}],[\"元素类型为\",{\"1\":{\"19\":1}}],[\"原型中可以了解\",{\"1\":{\"102\":1}}],[\"原始数据的类文件对象\",{\"1\":{\"101\":1}}],[\"及\",{\"1\":{\"102\":1}}],[\"url\",{\"1\":{\"102\":1,\"108\":1}}],[\"undefined\",{\"1\":{\"97\":3}}],[\"union\",{\"1\":{\"79\":1}}],[\"unsigned\",{\"1\":{\"15\":9,\"79\":1}}],[\"环境中不存在\",{\"1\":{\"102\":1}}],[\"环形链表\",{\"1\":{\"48\":1}}],[\"递归调用deepcopy处理每个属性\",{\"1\":{\"97\":1}}],[\"递归方法\",{\"0\":{\"29\":1}}],[\"根据obj的类型来决定新创建对象的类型\",{\"1\":{\"97\":1}}],[\"根据节点间的关系和附加条件\",{\"1\":{\"25\":1}}],[\"ƒ\",{\"1\":{\"97\":1}}],[\"区别就在于复制的深度以及对原始对象和副本之间关系的影响\",{\"1\":{\"95\":1}}],[\"操作符或者检查构造函数名称\",{\"1\":{\"94\":1}}],[\"操作系统调度等领域具有重要作用\",{\"1\":{\"51\":1}}],[\"运算符返回结果为\",{\"1\":{\"94\":1}}],[\"引用数据类型都是以\",{\"1\":{\"94\":1}}],[\"引用数据类型存储在堆内存中\",{\"1\":{\"94\":1}}],[\"引用数据类型\",{\"0\":{\"94\":1}}],[\"引用这个位置并不会报错\",{\"1\":{\"21\":1}}],[\"实际使用的是那图\",{\"1\":{\"109\":1}}],[\"实际上是将它们的引用地址复制了一份\",{\"1\":{\"95\":1}}],[\"实际上是创建了一个新的基本数据类型实例\",{\"1\":{\"93\":1}}],[\"实际上\",{\"1\":{\"93\":1}}],[\"实现该方法通常需要递归地复制对象的所有属性\",{\"1\":{\"97\":1}}],[\"实现深拷贝的方法有很多种\",{\"1\":{\"97\":1}}],[\"实现方法以及常见操作\",{\"1\":{\"25\":1}}],[\"实例\",{\"1\":{\"93\":1}}],[\"改变\",{\"1\":{\"93\":1}}],[\"提供了多种数据类型\",{\"1\":{\"92\":1}}],[\"提示\",{\"1\":{\"12\":1}}],[\"jpg\",{\"1\":{\"106\":1}}],[\"jpeg\",{\"1\":{\"106\":1}}],[\"javascript\",{\"1\":{\"92\":2,\"95\":1,\"101\":1},\"2\":{\"98\":1,\"99\":1,\"110\":1,\"111\":1}}],[\"json\",{\"1\":{\"97\":6}}],[\"js\",{\"0\":{\"92\":1},\"1\":{\"102\":1}}],[\"浅拷贝只会创建这些嵌套对象或数组的引用副本\",{\"1\":{\"96\":1}}],[\"浅拷贝只复制了对象的第一层属性值\",{\"1\":{\"96\":1}}],[\"浅拷贝与深拷贝\",{\"0\":{\"95\":1}}],[\"浅拷贝\",{\"0\":{\"91\":1,\"96\":1}}],[\"深拷贝会递归地复制整个对象及其所有嵌套的对象和数组\",{\"1\":{\"97\":1}}],[\"深拷贝和浅拷贝一般情况都是在引用数据类型的基础上所讨论的\",{\"1\":{\"95\":1}}],[\"深拷贝\",{\"0\":{\"91\":1,\"97\":1}}],[\"重置文件错误指示器\",{\"1\":{\"87\":1}}],[\"设置文件内部指针的当前位置\",{\"1\":{\"87\":1}}],[\"设置查找范围的左右边界\",{\"1\":{\"9\":1}}],[\"获取文件内部指针的当前位置\",{\"1\":{\"87\":2}}],[\"获取得这些环境变量\",{\"1\":{\"75\":1}}],[\"向文件写入二进制数据\",{\"1\":{\"87\":1}}],[\"向文件写入字符串\",{\"1\":{\"87\":1}}],[\"向文件写入一个字符\",{\"1\":{\"87\":2}}],[\"向控制台写入一个字符串\",{\"1\":{\"86\":1}}],[\"向控制台写入一个字符\",{\"1\":{\"86\":1}}],[\"关联一个已经打开的文件指针\",{\"1\":{\"87\":1}}],[\"关闭文件\",{\"1\":{\"87\":1}}],[\"关于我\",{\"0\":{\"0\":1}}],[\"打开一个新文件\",{\"1\":{\"87\":1}}],[\"打开文件\",{\"1\":{\"87\":1}}],[\"打印节点\",{\"0\":{\"46\":1}}],[\"文件的内容\",{\"1\":{\"108\":1}}],[\"文件拖放\",{\"0\":{\"105\":1}}],[\"文件改名\",{\"1\":{\"87\":1}}],[\"文件操作函数\",{\"0\":{\"87\":1}}],[\"文件作用域\",{\"1\":{\"82\":1}}],[\"文件作用域和块作用域\",{\"1\":{\"82\":1}}],[\"外部是不可见的\",{\"1\":{\"82\":1}}],[\"循环变量只对循环体内部可见\",{\"1\":{\"82\":1}}],[\"循环也是一个块作用域\",{\"1\":{\"82\":1}}],[\"循环的条件中是\",{\"1\":{\"9\":1}}],[\"代码块可以嵌套\",{\"1\":{\"82\":1}}],[\"代码块里面声明的\",{\"1\":{\"82\":1}}],[\"代码块外部不可见\",{\"1\":{\"82\":1}}],[\"代表了程序的命令行参数\",{\"1\":{\"75\":1}}],[\"代表移动\",{\"1\":{\"12\":1}}],[\"凡是在块作用域里面声明的变量\",{\"1\":{\"82\":1}}],[\"块作用域\",{\"1\":{\"82\":1}}],[\"作用域指的是变量生效的范围\",{\"1\":{\"82\":1}}],[\"z\",{\"1\":{\"81\":3}}],[\"zequanr\",{\"0\":{\"1\":1}}],[\"y\",{\"1\":{\"81\":8}}],[\"虽然\",{\"1\":{\"81\":1}}],[\"虽然毫无作用\",{\"1\":{\"68\":1}}],[\"第二行给这个变量赋值\",{\"1\":{\"81\":1}}],[\"第一行声明了一个整数变量\",{\"1\":{\"81\":1}}],[\"第一步就是要将\",{\"1\":{\"12\":1}}],[\"自己不应该起这样的变量名\",{\"1\":{\"79\":1}}],[\"自动确定数组的长度\",{\"1\":{\"20\":1}}],[\"两个下划线开头的变量名\",{\"1\":{\"79\":1}}],[\"两个语句写在一行\",{\"1\":{\"68\":1}}],[\"下面就是\",{\"1\":{\"79\":1}}],[\"下一个节点\",{\"1\":{\"48\":1}}],[\"供未来使用\",{\"1\":{\"79\":1}}],[\"另外\",{\"1\":{\"79\":2}}],[\"另一个变量也会受到影响\",{\"1\":{\"95\":1}}],[\"另一个用于表示整个链表\",{\"1\":{\"40\":1}}],[\"另一些词是命令\",{\"1\":{\"79\":1}}],[\"长度不能超过\",{\"1\":{\"79\":1}}],[\"长度为\",{\"1\":{\"19\":1}}],[\"组成的代码块\",{\"1\":{\"82\":1}}],[\"组成\",{\"1\":{\"79\":1}}],[\"组成一个块\",{\"1\":{\"70\":1}}],[\"命名有严格的规范\",{\"1\":{\"79\":1}}],[\"执行各种操作\",{\"1\":{\"75\":1}}],[\"调用各种函数\",{\"1\":{\"75\":1}}],[\"总之\",{\"1\":{\"75\":1}}],[\"总结一下分别为\",{\"1\":{\"12\":1}}],[\"名称\",{\"1\":{\"75\":1}}],[\"照样能正常运行\",{\"1\":{\"75\":1}}],[\"坚持使用标准的意义在于\",{\"1\":{\"75\":1}}],[\"非标准语法的书写形式\",{\"1\":{\"75\":1}}],[\"非递归方法\",{\"0\":{\"33\":1}}],[\"许多\",{\"1\":{\"75\":1}}],[\"许多数学定理和算法都与素数有关\",{\"1\":{\"15\":1}}],[\"包括大写和小写\",{\"1\":{\"79\":1}}],[\"包括著名的费马小定理和欧拉定理\",{\"1\":{\"15\":1}}],[\"包含该程序命令行参数\",{\"1\":{\"75\":1}}],[\"比\",{\"1\":{\"75\":1}}],[\"比如函数\",{\"1\":{\"82\":1}}],[\"比如变量声明语句\",{\"1\":{\"69\":1}}],[\"比如\",{\"1\":{\"15\":1,\"79\":2,\"81\":1,\"102\":1}}],[\"比如说\",{\"1\":{\"12\":1}}],[\"全称为\",{\"1\":{\"75\":3}}],[\"参数\",{\"1\":{\"75\":1}}],[\"错误代码及其含义\",{\"1\":{\"75\":1}}],[\"若\",{\"1\":{\"75\":1}}],[\"通常\",{\"1\":{\"75\":1}}],[\"通常会定义一个\",{\"1\":{\"75\":1}}],[\"通过\",{\"1\":{\"106\":1,\"107\":1}}],[\"通过绑定\",{\"1\":{\"105\":1}}],[\"通过正确地使用\",{\"1\":{\"75\":1}}],[\"通过使用模运算可以让索引值始终保持在有效范围内\",{\"1\":{\"57\":1}}],[\"通过使用指针可以方便地构建和操作二叉树结构\",{\"1\":{\"25\":1}}],[\"通过它可以遍历链表中的其他所有节点\",{\"1\":{\"40\":1}}],[\"通过它可以从当前节点访问到下一个节点\",{\"1\":{\"39\":1}}],[\"失去注释作用\",{\"1\":{\"72\":1}}],[\"解释为普通符号\",{\"1\":{\"72\":1}}],[\"解题思路\",{\"1\":{\"12\":1}}],[\"双引号里面的注释符号\",{\"1\":{\"72\":1}}],[\"双向链表更具灵活性\",{\"1\":{\"48\":1}}],[\"双向链表的节点定义同时包含指向后继节点\",{\"1\":{\"48\":1}}],[\"双向链表记录了两个方向的引用\",{\"1\":{\"48\":1}}],[\"双向链表\",{\"1\":{\"48\":1}}],[\"跟在它后面的代码依然会有效执行\",{\"1\":{\"72\":1}}],[\"跟单个空格的效果是一样的\",{\"1\":{\"71\":1}}],[\"内容为\",{\"1\":{\"108\":1}}],[\"内层代码块可以使用外层声明的变量\",{\"1\":{\"82\":1}}],[\"内层和外层都有一个变量\",{\"1\":{\"82\":1}}],[\"内部就可以读取这个变量\",{\"1\":{\"82\":1}}],[\"内部可以分行\",{\"1\":{\"72\":1}}],[\"内存可能无法提供如此大的连续空间\",{\"1\":{\"39\":1}}],[\"编译器会忽略注释\",{\"1\":{\"72\":1}}],[\"编程学习过程中\",{\"1\":{\"6\":1}}],[\"注意\",{\"1\":{\"79\":1}}],[\"注意到一个正整数是不可能写成比自身还大的两个正整数的乘积的\",{\"1\":{\"15\":1}}],[\"注释对实际代码没有影响\",{\"1\":{\"72\":1}}],[\"注释是对代码的说明\",{\"1\":{\"72\":1}}],[\"注释\",{\"0\":{\"72\":1},\"1\":{\"72\":2}}],[\"便于区分代码块\",{\"1\":{\"71\":1}}],[\"强调代码缩进\",{\"1\":{\"71\":1}}],[\"没有缩进的代码也是完全可以运行的\",{\"1\":{\"71\":1}}],[\"多个相同类型变量的赋值\",{\"1\":{\"81\":1}}],[\"多层级的代码有没有缩进\",{\"1\":{\"71\":1}}],[\"多次使用\",{\"1\":{\"42\":1}}],[\"各个语法单位之间的多个空格\",{\"1\":{\"71\":1}}],[\"赋值\",{\"1\":{\"81\":2}}],[\"赋值运算符是从右到左执行\",{\"1\":{\"81\":1}}],[\"赋值表达式有返回值\",{\"1\":{\"81\":2}}],[\"赋值号\",{\"1\":{\"71\":1}}],[\"赋值为\",{\"1\":{\"68\":1}}],[\"主要用来帮助编译器区分语法单位\",{\"1\":{\"71\":1}}],[\"主要通过表达式完成\",{\"1\":{\"69\":1}}],[\"很多时候不需要返回值\",{\"1\":{\"69\":1}}],[\"表达式都有返回值\",{\"1\":{\"69\":1}}],[\"表达式与语句的区别主要有\",{\"1\":{\"69\":1}}],[\"表达式加上分号\",{\"1\":{\"69\":1}}],[\"表达式是一个计算式\",{\"1\":{\"69\":1}}],[\"表达式\",{\"0\":{\"69\":1}}],[\"表示\",{\"1\":{\"108\":1}}],[\"表示在读取文件时发生的错误\",{\"1\":{\"108\":1}}],[\"表示的含义是数字\",{\"1\":{\"15\":1}}],[\"表示该整数是否为素数\",{\"1\":{\"15\":1}}],[\"空格还用来表示缩进\",{\"1\":{\"71\":1}}],[\"空格就不是必须的\",{\"1\":{\"71\":1}}],[\"空格\",{\"0\":{\"71\":1}}],[\"空语句\",{\"1\":{\"68\":1}}],[\"空闲的内存空间可能散落在内存各处\",{\"1\":{\"39\":1}}],[\"称为\",{\"1\":{\"68\":1}}],[\"单个分号也是有效语句\",{\"1\":{\"68\":1}}],[\"单向链表的节点包含值和指向下一节点的引用两项数据\",{\"1\":{\"48\":1}}],[\"单向链表\",{\"1\":{\"48\":1}}],[\"声明变量的语句必须以分号结尾\",{\"1\":{\"80\":1}}],[\"声明变量时\",{\"1\":{\"80\":1}}],[\"声明了变量\",{\"1\":{\"80\":1}}],[\"声明整数变量\",{\"1\":{\"68\":2}}],[\"声明数组\",{\"0\":{\"19\":1}}],[\"变量最初存储的是整数\",{\"1\":{\"93\":1}}],[\"变量一定要赋值以后才能使用\",{\"1\":{\"81\":1}}],[\"变量会是一个随机的值\",{\"1\":{\"81\":1}}],[\"变量的作用域\",{\"0\":{\"82\":1}}],[\"变量的值应该与类型一致\",{\"1\":{\"81\":1}}],[\"变量的赋值\",{\"0\":{\"81\":1}}],[\"变量的类型就不能在运行时修改\",{\"1\":{\"80\":1}}],[\"变量的声明和赋值\",{\"1\":{\"81\":1}}],[\"变量的声明\",{\"0\":{\"80\":1}}],[\"变量名区分大小写\",{\"1\":{\"79\":1}}],[\"变量名\",{\"0\":{\"79\":1}}],[\"变量名称\",{\"1\":{\"19\":1}}],[\"变量\",{\"0\":{\"78\":1},\"1\":{\"81\":1,\"82\":2}}],[\"变量赋值\",{\"1\":{\"68\":1}}],[\"变量声明\",{\"1\":{\"68\":1}}],[\"变量声明语句\",{\"1\":{\"68\":1}}],[\"xmlhttprequest\",{\"1\":{\"102\":1}}],[\"xiao\",{\"1\":{\"95\":3,\"96\":4}}],[\"x=1\",{\"1\":{\"71\":1}}],[\"x\",{\"1\":{\"68\":8,\"69\":1,\"70\":2,\"71\":2,\"72\":3,\"81\":10,\"82\":3}}],[\"除非碰到事件监听器调用\",{\"1\":{\"105\":1}}],[\"除非有明确规定可以不写分号\",{\"1\":{\"68\":1}}],[\"除此之外\",{\"1\":{\"75\":1}}],[\"除了包含值\",{\"1\":{\"40\":1}}],[\"除了\",{\"1\":{\"15\":1}}],[\"语法单位之间的多个空格\",{\"1\":{\"71\":1}}],[\"语句块可以视为多个语句组成的一个复合语句\",{\"1\":{\"70\":1}}],[\"语句块\",{\"0\":{\"70\":1}}],[\"语句不一定有\",{\"1\":{\"69\":1}}],[\"语句可以包含表达式\",{\"1\":{\"69\":1}}],[\"语句之间的换行符并不是必需的\",{\"1\":{\"68\":1}}],[\"语句必须使用分号结尾\",{\"1\":{\"68\":1}}],[\"语句就是程序执行的一个操作命令\",{\"1\":{\"68\":1}}],[\"语句\",{\"0\":{\"68\":1}}],[\"语言可以写出多重赋值表达式\",{\"1\":{\"81\":1}}],[\"语言会自动转换类型\",{\"1\":{\"81\":1}}],[\"语言会在变量声明时\",{\"1\":{\"81\":1}}],[\"语言主要的关键字和保留字\",{\"1\":{\"79\":1}}],[\"语言还保留了一些词\",{\"1\":{\"79\":1}}],[\"语言里面有特殊含义\",{\"1\":{\"79\":1}}],[\"语言里面的空格\",{\"1\":{\"71\":1}}],[\"语言程序都需要一个称之为\",{\"1\":{\"75\":1}}],[\"语言程序执行的入口\",{\"1\":{\"75\":1}}],[\"语言程序中一个\",{\"1\":{\"15\":1}}],[\"语言允许多个语句使用一对大括号\",{\"1\":{\"70\":1}}],[\"语言允许省略方括号里面的数组元素数量\",{\"1\":{\"20\":1}}],[\"语言的变量作用域主要有两种\",{\"1\":{\"82\":1}}],[\"语言的变量\",{\"1\":{\"80\":1}}],[\"语言的执行开始于\",{\"1\":{\"75\":1}}],[\"语言的各种计算\",{\"1\":{\"69\":1}}],[\"语言的代码是由一行行的语句所组成\",{\"1\":{\"68\":1}}],[\"语言规定\",{\"1\":{\"20\":1,\"68\":1}}],[\"语言中变量名属于标识符\",{\"1\":{\"79\":1}}],[\"语言中的\",{\"1\":{\"75\":1}}],[\"语言中注释写法有两种\",{\"1\":{\"72\":1}}],[\"语言中实现并操作队列\",{\"1\":{\"51\":1}}],[\"语言中二叉树的基本概念\",{\"1\":{\"25\":1}}],[\"语言中\",{\"1\":{\"18\":1,\"25\":1,\"75\":1}}],[\"语言课堂笔记\",{\"0\":{\"6\":1}}],[\"基本数据类型的值不可变\",{\"1\":{\"93\":1}}],[\"基本数据类型直接存储在栈内存中\",{\"1\":{\"93\":1}}],[\"基本数据类型\",{\"0\":{\"93\":1},\"1\":{\"92\":1}}],[\"基本语法\",{\"0\":{\"67\":1}}],[\"基于此设计\",{\"1\":{\"56\":1}}],[\"基于数组实现\",{\"0\":{\"56\":1,\"64\":1}}],[\"基于链表实现\",{\"0\":{\"55\":1,\"63\":1}}],[\"存储栈元素的数组\",{\"1\":{\"64\":1}}],[\"存储数组的内存空间必须是连续的\",{\"1\":{\"39\":1}}],[\"构造函数来创建\",{\"1\":{\"108\":1}}],[\"构造函数\",{\"1\":{\"63\":1,\"64\":1}}],[\"屏蔽\",{\"1\":{\"62\":1}}],[\"出错\",{\"1\":{\"82\":2}}],[\"出栈\",{\"1\":{\"61\":1,\"63\":1,\"64\":1}}],[\"出队操作\",{\"1\":{\"55\":1,\"56\":1}}],[\"出队\",{\"1\":{\"53\":2}}],[\"入栈与出栈操作分别对应在数组尾部添加元素与删除元素\",{\"1\":{\"64\":1}}],[\"入栈\",{\"1\":{\"61\":1,\"63\":1,\"64\":1}}],[\"入队操作\",{\"1\":{\"55\":1,\"56\":1}}],[\"入队\",{\"1\":{\"53\":2}}],[\"底部称为\",{\"1\":{\"61\":1}}],[\"字符串以表示所读取文件的内容\",{\"1\":{\"108\":1}}],[\"字符串解析为新的对象\",{\"1\":{\"97\":1}}],[\"字符串\",{\"1\":{\"97\":1}}],[\"字符串操作函数\",{\"0\":{\"88\":1}}],[\"字符\",{\"1\":{\"60\":1}}],[\"字节\",{\"1\":{\"15\":1}}],[\"栈遵循先入后出的原则\",{\"1\":{\"62\":1}}],[\"栈的容量\",{\"1\":{\"64\":1}}],[\"栈的实现\",{\"0\":{\"62\":1}}],[\"栈的常用操作\",{\"0\":{\"61\":1}}],[\"栈底\",{\"1\":{\"61\":1}}],[\"栈顶元素的索引\",{\"1\":{\"64\":1}}],[\"栈顶\",{\"1\":{\"61\":1}}],[\"栈是一种遵循先入后出的逻辑的线性数据结构\",{\"1\":{\"60\":1}}],[\"栈\",{\"0\":{\"60\":1}}],[\"之间\",{\"1\":{\"57\":1,\"72\":1}}],[\"到\",{\"1\":{\"57\":1,\"75\":1}}],[\"模运算对于处理循环序列非常有用\",{\"1\":{\"57\":1}}],[\"e\",{\"1\":{\"108\":2}}],[\"error\",{\"1\":{\"108\":1}}],[\"err\",{\"1\":{\"107\":2}}],[\"excludeacceptalloption\",{\"1\":{\"106\":1}}],[\"extern\",{\"1\":{\"79\":1}}],[\"event\",{\"1\":{\"104\":2,\"105\":5,\"108\":2}}],[\"enum\",{\"1\":{\"79\":1}}],[\"environment\",{\"1\":{\"75\":1}}],[\"envp\",{\"1\":{\"75\":2}}],[\"elem\",{\"1\":{\"56\":2}}],[\"else\",{\"1\":{\"9\":3,\"15\":1,\"28\":1,\"34\":1,\"35\":1,\"36\":2,\"55\":1,\"79\":1}}],[\"empty\",{\"1\":{\"56\":1,\"63\":1,\"64\":1,\"108\":1}}],[\"减少\",{\"1\":{\"56\":2}}],[\"只是一个概念\",{\"1\":{\"109\":1}}],[\"只是为了增强代码可读性\",{\"1\":{\"71\":1}}],[\"只是为了增加代码的可读性\",{\"1\":{\"71\":1}}],[\"只是为了方便阅读代码\",{\"1\":{\"68\":1}}],[\"只能通过\",{\"1\":{\"109\":1}}],[\"只能由字母\",{\"1\":{\"79\":1}}],[\"只读\",{\"1\":{\"108\":3}}],[\"只要达到它们各自拥有独立的内存空间且互不干扰\",{\"1\":{\"97\":1}}],[\"只在当前代码块有效\",{\"1\":{\"82\":1}}],[\"只需将头节点从链表中删除即可\",{\"1\":{\"63\":1}}],[\"只需将\",{\"1\":{\"56\":1}}],[\"只有\",{\"1\":{\"21\":1}}],[\"增加对代码的阅读负担\",{\"1\":{\"68\":1}}],[\"增加\",{\"1\":{\"56\":4}}],[\"索引处\",{\"1\":{\"56\":2}}],[\"定义\",{\"1\":{\"56\":1}}],[\"然后使用\",{\"1\":{\"97\":1}}],[\"然后通过重新赋值将其改为\",{\"1\":{\"93\":1}}],[\"然后依次为\",{\"1\":{\"81\":1}}],[\"然后判断目标值与中间值的大小关系\",{\"1\":{\"9\":1}}],[\"然而\",{\"1\":{\"56\":1,\"62\":1}}],[\"保证队列的尾节点总是指向实际的最后一个节点\",{\"1\":{\"55\":1}}],[\"更适合用于文件传输\",{\"1\":{\"109\":1}}],[\"更像是\",{\"1\":{\"109\":1}}],[\"更换尾节点的指向\",{\"1\":{\"55\":1}}],[\"更是在培养逻辑思维\",{\"1\":{\"6\":1}}],[\"规定队尾仅可添加节点\",{\"1\":{\"55\":1}}],[\"删除文件\",{\"1\":{\"87\":1}}],[\"删除栈顶元素的操作叫作\",{\"1\":{\"61\":1}}],[\"删除队首元素的操作称为\",{\"1\":{\"53\":1}}],[\"删除节点\",{\"0\":{\"45\":1}}],[\"尾节点视为栈底\",{\"1\":{\"63\":1}}],[\"尾节点\",{\"1\":{\"55\":1}}],[\"尾节点指向空\",{\"1\":{\"48\":1}}],[\"尾部称为\",{\"1\":{\"53\":1}}],[\"队头指针\",{\"1\":{\"55\":1}}],[\"队尾指针\",{\"1\":{\"55\":1}}],[\"队尾\",{\"1\":{\"53\":1,\"55\":1}}],[\"队首仅可删除节点\",{\"1\":{\"55\":1}}],[\"队首\",{\"1\":{\"53\":1,\"55\":1}}],[\"队列有两个主要的操作\",{\"1\":{\"53\":1}}],[\"队列的实现\",{\"0\":{\"54\":1}}],[\"队列的常用操作\",{\"0\":{\"53\":1}}],[\"队列的概念\",{\"0\":{\"52\":1}}],[\"队列是一种基础且广泛应用的线性数据结构\",{\"1\":{\"51\":1}}],[\"队列\",{\"0\":{\"51\":1},\"1\":{\"52\":1}}],[\"遵循先进先出的原则\",{\"1\":{\"52\":1}}],[\"queue\",{\"1\":{\"52\":1,\"55\":30,\"56\":37}}],[\"本文将重点探讨如何在\",{\"1\":{\"51\":1}}],[\"本文将详细介绍\",{\"1\":{\"25\":1}}],[\"消息传递\",{\"1\":{\"51\":1}}],[\"尤其在多任务处理\",{\"1\":{\"51\":1}}],[\"与\",{\"1\":{\"53\":1,\"105\":2}}],[\"与单向链表相比\",{\"1\":{\"48\":1}}],[\"与用于存储数据的数据域\",{\"1\":{\"26\":1}}],[\"任意节点都可以视作头节点\",{\"1\":{\"48\":1}}],[\"首尾相接\",{\"1\":{\"48\":1}}],[\"首先创建一个\",{\"1\":{\"108\":1}}],[\"首先我们先来看一下二叉树的数据结构\",{\"1\":{\"26\":1}}],[\"首先移动\",{\"1\":{\"12\":1}}],[\"常见的链表类型包括三种\",{\"1\":{\"48\":1}}],[\"常见链表类型\",{\"0\":{\"48\":1}}],[\"完成之后\",{\"1\":{\"108\":4}}],[\"完成解题\",{\"1\":{\"12\":1}}],[\"完整代码\",{\"0\":{\"47\":1}}],[\"释放\",{\"1\":{\"45\":1,\"47\":1}}],[\"清除已删除节点的\",{\"1\":{\"45\":1,\"47\":1}}],[\"直接返回\",{\"1\":{\"97\":1}}],[\"直接修改链表头指向下一个节点\",{\"1\":{\"45\":1,\"47\":1}}],[\"直到找到目标值或者查找范围为空为止\",{\"1\":{\"9\":1}}],[\"找到了返回与给定值相同的节点\",{\"1\":{\"44\":1,\"47\":1}}],[\"插入节点\",{\"0\":{\"43\":1}}],[\"初始化指针域\",{\"1\":{\"42\":1,\"47\":1}}],[\"初始化数据域\",{\"1\":{\"42\":1,\"47\":1}}],[\"初始化链表\",{\"1\":{\"40\":2,\"47\":1}}],[\"程序本身的名称也算作该字符串\",{\"1\":{\"75\":1}}],[\"程序执行的代码\",{\"1\":{\"75\":3}}],[\"程序执行是从\",{\"1\":{\"75\":1}}],[\"程序作者一定要对内存进行初始化操作\",{\"1\":{\"42\":1}}],[\"程序求解\",{\"1\":{\"12\":1}}],[\"由于动态内存区可被重复使用\",{\"1\":{\"42\":1}}],[\"分配内存空间\",{\"1\":{\"42\":1,\"47\":1}}],[\"分配内存时\",{\"1\":{\"42\":1}}],[\"分配的内存可以确保是地址连续的内存空间\",{\"1\":{\"42\":1}}],[\"分别视为\",{\"1\":{\"55\":1}}],[\"分别为指向左右两边的指针\",{\"1\":{\"26\":1}}],[\"分别指向数组的第一个元素和最后一个元素\",{\"1\":{\"9\":1}}],[\"该工具提供了一些读取方法\",{\"1\":{\"108\":1}}],[\"该事件在读取\",{\"1\":{\"108\":1}}],[\"该事件在读取操作结束时\",{\"1\":{\"108\":1}}],[\"该事件在读取操作开始时触发\",{\"1\":{\"108\":1}}],[\"该事件在读取操作完成时触发\",{\"1\":{\"108\":1}}],[\"该事件在读取操作发生错误时触发\",{\"1\":{\"108\":1}}],[\"该事件在读取操作被中断时触发\",{\"1\":{\"108\":1}}],[\"该属性仅在读取操作完成后才有效\",{\"1\":{\"108\":1}}],[\"该方法用于显示一个文件选择器\",{\"1\":{\"106\":1}}],[\"该方法返回一个指针\",{\"1\":{\"42\":1}}],[\"该游戏通常由三个柱子和若干个圆盘组成\",{\"1\":{\"12\":1}}],[\"方法启动的读取结果\",{\"1\":{\"108\":1}}],[\"方法为例\",{\"1\":{\"108\":1}}],[\"方法将\",{\"1\":{\"97\":1}}],[\"方法将对象转换为\",{\"1\":{\"97\":1}}],[\"方法叫做\",{\"1\":{\"75\":1}}],[\"方法也是一个普通的函数\",{\"1\":{\"75\":1}}],[\"方法执行到末尾没有遇到返回语句\",{\"1\":{\"75\":1}}],[\"方法中的第一句开始执行\",{\"1\":{\"75\":1}}],[\"方法是所有\",{\"1\":{\"75\":1}}],[\"方法得到的内存不会执行内存清零操作\",{\"1\":{\"42\":1}}],[\"方法\",{\"1\":{\"42\":1,\"75\":2,\"106\":1}}],[\"方括号里面是数组的元素数量\",{\"1\":{\"18\":1,\"19\":1}}],[\"创建一个\",{\"1\":{\"105\":1}}],[\"创建一个数值变量\",{\"1\":{\"93\":1}}],[\"创建\",{\"1\":{\"104\":1}}],[\"创建新节点函数\",{\"1\":{\"42\":1}}],[\"创建链表节点一般情况下需要使用\",{\"1\":{\"42\":1}}],[\"创建节点\",{\"0\":{\"27\":1,\"42\":1}}],[\"还没有加载任何数据\",{\"1\":{\"108\":1}}],[\"还可以编写各种算法和逻辑\",{\"1\":{\"75\":1}}],[\"还需额外保存一个指针\",{\"1\":{\"40\":1}}],[\"还有一个移动第\",{\"1\":{\"12\":1}}],[\"有些词在\",{\"1\":{\"79\":1}}],[\"有些编译器允许这种形式\",{\"1\":{\"75\":1}}],[\"有\",{\"1\":{\"75\":1}}],[\"有时人们会定义两个结构体\",{\"1\":{\"40\":1}}],[\"有小数需进一\",{\"1\":{\"15\":1}}],[\"永远指向链表中第一个节点的位置\",{\"1\":{\"40\":1}}],[\"头文件\",{\"1\":{\"85\":1}}],[\"头插法\",{\"1\":{\"63\":1}}],[\"头指针只声明没有分配存储空间\",{\"1\":{\"40\":1}}],[\"头指针与头节点的区别\",{\"1\":{\"40\":1}}],[\"头结点是整个链表的入口\",{\"1\":{\"40\":1}}],[\"头节点与尾节点均指向将要入队的节点\",{\"1\":{\"55\":1}}],[\"头节点进行了声明并分配了一个结点大小的实际物理内存\",{\"1\":{\"40\":1}}],[\"头节点通常包含指向下一个节点的指针\",{\"1\":{\"40\":1}}],[\"头节点\",{\"1\":{\"40\":2,\"55\":1}}],[\"指定了输出字符串的数量\",{\"1\":{\"88\":1}}],[\"指的是由大括号\",{\"1\":{\"82\":1}}],[\"指向队尾元素之后的下一个位置\",{\"1\":{\"56\":1}}],[\"指向队首元素的索引\",{\"1\":{\"56\":1}}],[\"指向上一个节点的地址\",{\"1\":{\"48\":1}}],[\"指向下一个节点的地址\",{\"1\":{\"40\":2,\"47\":1,\"48\":1}}],[\"指针数组\",{\"1\":{\"75\":1}}],[\"指针\",{\"1\":{\"48\":1}}],[\"指针域\",{\"1\":{\"39\":1}}],[\"指针记录了下一个节点的内存地址\",{\"1\":{\"39\":1}}],[\"节点数量\",{\"1\":{\"40\":1,\"47\":1}}],[\"节点数据域\",{\"1\":{\"40\":2,\"47\":1,\"48\":1}}],[\"节点指针域\",{\"1\":{\"40\":2,\"47\":1,\"48\":2}}],[\"节点\",{\"1\":{\"39\":1}}],[\"一次为多个变量赋值\",{\"1\":{\"81\":1}}],[\"一旦声明\",{\"1\":{\"80\":1}}],[\"一定不能忘记写结束符号\",{\"1\":{\"72\":1}}],[\"一是本身存储的数据信息\",{\"1\":{\"39\":1}}],[\"一个语句也可以写成多行\",{\"1\":{\"68\":1}}],[\"一个用于表示链表节点\",{\"1\":{\"40\":1}}],[\"一个正值的长度\",{\"1\":{\"19\":1}}],[\"一个素数只有两个正因数\",{\"1\":{\"15\":1}}],[\"一个完整且正常的二分查找并不是很容易可以完成的\",{\"1\":{\"9\":1}}],[\"此时链表的灵活性优势就体现出来了\",{\"1\":{\"39\":1}}],[\"此刻要解决的就是拥有二个圆盘的汉诺塔问题\",{\"1\":{\"12\":1}}],[\"链表和数组都符合要求\",{\"1\":{\"54\":1}}],[\"链表比数组占用更多的内存空间\",{\"1\":{\"40\":1}}],[\"链表节点\",{\"1\":{\"40\":1}}],[\"链表节点结构体定义\",{\"1\":{\"40\":2,\"47\":1}}],[\"链表大小\",{\"1\":{\"40\":1,\"47\":1}}],[\"链表头结点\",{\"1\":{\"40\":1,\"47\":1}}],[\"链表结构体定义\",{\"1\":{\"40\":1,\"47\":1}}],[\"链表还拥有一个头指针\",{\"1\":{\"40\":1}}],[\"链表的常用操作\",{\"0\":{\"41\":1}}],[\"链表的首个节点被称为\",{\"1\":{\"40\":1}}],[\"链表的结构定义\",{\"0\":{\"40\":1}}],[\"链表中的每个节点由两部分构成\",{\"1\":{\"39\":1}}],[\"链表是一种线性数据结构\",{\"1\":{\"39\":1}}],[\"链表\",{\"0\":{\"39\":1}}],[\"|\",{\"1\":{\"36\":1}}],[\"||\",{\"1\":{\"34\":1,\"35\":1,\"36\":1,\"97\":1}}],[\"前者的数组成员都是同一个数据类型\",{\"1\":{\"109\":1}}],[\"前者相当于两端都闭区间\",{\"1\":{\"9\":1}}],[\"前端获取文件的几种情况\",{\"0\":{\"103\":1}}],[\"前后有没有空格都可以\",{\"1\":{\"71\":1}}],[\"前序\",{\"0\":{\"30\":1,\"34\":1}}],[\"遍历节点\",{\"0\":{\"29\":1,\"33\":1}}],[\"查询节点\",{\"0\":{\"28\":1}}],[\"查找链表中的第一个具有给定值\",{\"1\":{\"44\":1,\"47\":1}}],[\"查找节点\",{\"0\":{\"44\":1}}],[\"查找更多素数\",{\"1\":{\"15\":1}}],[\"查找素数\",{\"1\":{\"15\":1}}],[\"查找失败\",{\"1\":{\"9\":1}}],[\"volatile\",{\"1\":{\"79\":1}}],[\"void\",{\"1\":{\"12\":2,\"15\":2,\"30\":1,\"31\":1,\"32\":1,\"34\":1,\"35\":1,\"36\":1,\"42\":1,\"43\":1,\"45\":1,\"46\":1,\"47\":3,\"55\":2,\"56\":2,\"63\":2,\"64\":2,\"75\":1,\"79\":1}}],[\"vector\",{\"1\":{\"75\":1}}],[\"val\",{\"1\":{\"27\":2,\"28\":3,\"42\":2,\"44\":3,\"47\":5,\"56\":2,\"63\":2,\"64\":2}}],[\"value\",{\"1\":{\"26\":1,\"40\":2,\"47\":1,\"55\":4,\"63\":1}}],[\"以\",{\"1\":{\"108\":1}}],[\"以允许用户选择一个或多个文件并返回这些文件的句柄\",{\"1\":{\"106\":1}}],[\"以下函数用于操作字符串\",{\"1\":{\"88\":1}}],[\"以下函数用于文件操作\",{\"1\":{\"87\":1}}],[\"以下函数用于控制台的输入和输出\",{\"1\":{\"86\":1}}],[\"以及移动文件\",{\"1\":{\"87\":1}}],[\"以及一个下划线\",{\"1\":{\"79\":1}}],[\"以及特殊的二叉搜索树等\",{\"1\":{\"25\":1}}],[\"以此类推\",{\"1\":{\"15\":1}}],[\"树和红黑树\",{\"1\":{\"25\":1}}],[\"平衡二叉树\",{\"1\":{\"25\":1}}],[\"满二叉树\",{\"1\":{\"25\":1}}],[\"二进制大对象\",{\"1\":{\"101\":1}}],[\"二是指向后续节点的指针\",{\"1\":{\"39\":1}}],[\"二叉树有多种变体\",{\"1\":{\"25\":1}}],[\"二叉树既可以为空\",{\"1\":{\"25\":1}}],[\"二叉树是一种每个节点最多有两个子节点的树形数据结构\",{\"1\":{\"25\":1}}],[\"二叉树是计算机科学中一种基本且广泛应用的数据结构\",{\"1\":{\"25\":1}}],[\"二叉树\",{\"0\":{\"25\":1}}],[\"二分查找动态演示\",{\"1\":{\"9\":1}}],[\"二分查找的具体实现过程如下\",{\"1\":{\"9\":1}}],[\"二分查找又称折半查找\",{\"1\":{\"9\":1}}],[\"二分查找\",{\"0\":{\"9\":1}}],[\"数字和下划线\",{\"1\":{\"79\":1}}],[\"数据对象\",{\"1\":{\"108\":1}}],[\"数据的格式取决于使用哪个方法来启动读取操作\",{\"1\":{\"108\":1}}],[\"数据正在被加载\",{\"1\":{\"108\":1}}],[\"数据类型\",{\"0\":{\"92\":1}}],[\"数据域\",{\"1\":{\"39\":1}}],[\"数据结构是软件开发的基础\",{\"1\":{\"51\":1}}],[\"数据结构\",{\"0\":{\"26\":1},\"2\":{\"24\":1,\"38\":1,\"50\":1,\"59\":1,\"66\":1}}],[\"数组或链表的部分无关操作\",{\"1\":{\"62\":1}}],[\"数组和链表都可以在任意位置添加和删除元素\",{\"1\":{\"62\":1}}],[\"数组中元素的个数\",{\"1\":{\"75\":1}}],[\"数组中包含元素的有效区间为\",{\"1\":{\"56\":1}}],[\"数组中的元素是从\",{\"1\":{\"19\":1}}],[\"数组长度为\",{\"1\":{\"20\":2}}],[\"数组赋值之后\",{\"1\":{\"20\":1}}],[\"数组变量一旦声明\",{\"1\":{\"20\":1}}],[\"数组在声明时\",{\"1\":{\"20\":1}}],[\"数组初始化时\",{\"1\":{\"20\":1}}],[\"数组初始化\",{\"0\":{\"20\":1}}],[\"数组通过变量名后加方括号表示\",{\"1\":{\"18\":1,\"19\":1}}],[\"数组是将其相同类型元素存储在连续的内存空间中\",{\"1\":{\"18\":1}}],[\"数组\",{\"0\":{\"18\":1},\"1\":{\"21\":1}}],[\"数组内容表示该索引对应的数字是否为素数\",{\"1\":{\"15\":1}}],[\"用来对参数进行说明\",{\"1\":{\"72\":1}}],[\"用来获取\",{\"1\":{\"69\":1}}],[\"用来获取值\",{\"1\":{\"69\":1}}],[\"用大括号包裹形成了一个语句块\",{\"1\":{\"70\":1}}],[\"用于表示一个不可变\",{\"1\":{\"101\":1}}],[\"用于记录队列长度\",{\"1\":{\"56\":1}}],[\"用于指向它的直接后继元素\",{\"1\":{\"40\":1}}],[\"用\",{\"1\":{\"22\":1}}],[\"函数内部声明的变量\",{\"1\":{\"82\":1}}],[\"函数中\",{\"1\":{\"75\":1}}],[\"函数是程序的入口函数\",{\"1\":{\"75\":1}}],[\"函数称之为主函数\",{\"1\":{\"75\":1}}],[\"函数版本中\",{\"1\":{\"75\":1}}],[\"函数只有两种标准形式\",{\"1\":{\"75\":1}}],[\"函数返回时程序也会随之结束\",{\"1\":{\"75\":1}}],[\"函数申请的空间\",{\"1\":{\"45\":1,\"47\":1}}],[\"函数\",{\"0\":{\"75\":1,\"86\":1},\"1\":{\"22\":1,\"75\":2}}],[\"计算下标\",{\"1\":{\"57\":1}}],[\"计算数组长度可以使用\",{\"1\":{\"22\":1}}],[\"计算数组长度\",{\"0\":{\"22\":1}}],[\"计算中间位置\",{\"1\":{\"9\":1}}],[\"后者的数组成员可以是不同的数据类型\",{\"1\":{\"109\":1}}],[\"后者相当于左闭右开区间\",{\"1\":{\"9\":1}}],[\"后面\",{\"1\":{\"72\":1}}],[\"后面的那块内存区域被赋值\",{\"1\":{\"21\":1}}],[\"后序\",{\"0\":{\"32\":1,\"36\":1}}],[\"访问数组元素\",{\"0\":{\"21\":1}}],[\"省略成员数量时\",{\"1\":{\"20\":1}}],[\"会成为字符串的一部分\",{\"1\":{\"72\":1}}],[\"会正常运行\",{\"1\":{\"21\":1}}],[\"会增加读代码的难度\",{\"1\":{\"20\":1}}],[\"会存在大量存储空间上的浪费\",{\"1\":{\"15\":1}}],[\"再用大括号修改值\",{\"1\":{\"20\":1}}],[\"其全称为\",{\"1\":{\"101\":1}}],[\"其实对于编译器来说并没有差别\",{\"1\":{\"71\":1}}],[\"其原因在于是\",{\"1\":{\"20\":1}}],[\"其中每一个节点都通过指针相连接\",{\"1\":{\"39\":1}}],[\"其中的每一个元素都是一个节点\",{\"1\":{\"39\":1}}],[\"其中从指针中我们不难发现每个节点最多有两个分支\",{\"1\":{\"26\":1}}],[\"其中\",{\"1\":{\"15\":2,\"51\":1,\"104\":1}}],[\"其中一个因数必然小于或等于它的平方根\",{\"1\":{\"15\":3}}],[\"必须把变量的类型告诉编译器\",{\"1\":{\"80\":1}}],[\"必须先声明后使用\",{\"1\":{\"80\":1}}],[\"必须在数组声明时赋值\",{\"1\":{\"20\":1}}],[\"必须小于或等于\",{\"1\":{\"15\":1}}],[\"使其对外表现的逻辑符合栈的特性\",{\"1\":{\"62\":1}}],[\"使其与链表彻底隔离\",{\"1\":{\"45\":1,\"47\":1}}],[\"使用该方法读取\",{\"1\":{\"108\":1}}],[\"使用时需注意此项功能仅在一些支持的浏览器的安全上下文\",{\"1\":{\"106\":1}}],[\"使用数组实现栈时\",{\"1\":{\"64\":1}}],[\"使用链表实现栈时\",{\"1\":{\"63\":1}}],[\"使用\",{\"1\":{\"42\":1,\"108\":1}}],[\"使用大括号赋值时\",{\"1\":{\"20\":1}}],[\"使得紧跟在\",{\"1\":{\"21\":1}}],[\"使得我们将最大的圆盘从塔\",{\"1\":{\"12\":1}}],[\"少于数组的元素数量\",{\"1\":{\"20\":1}}],[\"报错\",{\"1\":{\"20\":3}}],[\"最后一个元素\",{\"1\":{\"75\":1}}],[\"最后一个元素的编号会比数组长度小\",{\"1\":{\"19\":1}}],[\"最后将尾节点变更为当前将要入队的节点\",{\"1\":{\"55\":1}}],[\"最先到达的元素最先离开\",{\"1\":{\"52\":1}}],[\"最简单的写法就是下面这样\",{\"1\":{\"20\":1}}],[\"最少要移动多少次\",{\"1\":{\"12\":1}}],[\"号元素\",{\"1\":{\"19\":1}}],[\"号元素一直到第\",{\"1\":{\"19\":1}}],[\"号圆盘\",{\"1\":{\"12\":1}}],[\"号圆盘从塔\",{\"1\":{\"12\":1}}],[\"开始编号\",{\"1\":{\"19\":1}}],[\"开始遍历\",{\"1\":{\"15\":1}}],[\"开始遍历到\",{\"1\":{\"15\":1}}],[\"开始遍历到该整数的平方根是一种有效的算法\",{\"1\":{\"15\":1}}],[\"开始遍历到该整数的平方根\",{\"1\":{\"15\":2}}],[\"~\",{\"1\":{\"15\":1}}],[\"对此我们可以将\",{\"1\":{\"102\":1}}],[\"对象来访问\",{\"1\":{\"109\":1}}],[\"对象或\",{\"1\":{\"109\":1}}],[\"对象用来表示通用的\",{\"1\":{\"109\":1}}],[\"对象我们就可以看见\",{\"1\":{\"108\":1}}],[\"对象提供了以下方法来加载文件\",{\"1\":{\"108\":1}}],[\"对象看成一个工具\",{\"1\":{\"108\":1}}],[\"对象看作是特殊类型的\",{\"1\":{\"102\":1}}],[\"对象可以将\",{\"1\":{\"108\":1}}],[\"对象可以使用\",{\"1\":{\"108\":1}}],[\"对象事件处理如下\",{\"1\":{\"108\":1}}],[\"对象属性如下\",{\"1\":{\"108\":1}}],[\"对象所提供的属性与事件处理\",{\"1\":{\"108\":1}}],[\"对象指定要读取的文件或数据\",{\"1\":{\"108\":1}}],[\"对象允许\",{\"1\":{\"108\":1}}],[\"对象多包含了一些文件属性\",{\"1\":{\"102\":1}}],[\"对象相比于\",{\"1\":{\"102\":1}}],[\"对象\",{\"1\":{\"102\":1,\"104\":1,\"108\":3}}],[\"对象上\",{\"1\":{\"102\":1}}],[\"对象中存在于浏览器环境中\",{\"1\":{\"102\":1}}],[\"对象等\",{\"1\":{\"60\":1}}],[\"对于非对象和null值\",{\"1\":{\"97\":1}}],[\"对于函数外部是不可见的\",{\"1\":{\"82\":1}}],[\"对于入栈操作\",{\"1\":{\"63\":1}}],[\"对于单链表来说\",{\"1\":{\"40\":1}}],[\"对于更大的整数\",{\"1\":{\"15\":1}}],[\"对数组长度进行取整\",{\"1\":{\"15\":1}}],[\"要么失败\",{\"1\":{\"108\":1}}],[\"要么成功\",{\"1\":{\"108\":1}}],[\"要知道计算机中的内存空间是所有程序的公共资源\",{\"1\":{\"39\":1}}],[\"要知道在计算机中所有数据都是以二进制的形式进行存储的\",{\"1\":{\"15\":1}}],[\"要想实施刚刚的操作那么就必将会出现下面这一情况\",{\"1\":{\"12\":1}}],[\"要想将塔\",{\"1\":{\"12\":2}}],[\"来完成\",{\"1\":{\"109\":1}}],[\"来阻止对这个事件的其他处理过程\",{\"1\":{\"105\":1}}],[\"来表示一个索引是否为素数\",{\"1\":{\"15\":1}}],[\"来计算\",{\"1\":{\"9\":1}}],[\"png\",{\"1\":{\"106\":1,\"107\":1}}],[\"pickeropts\",{\"1\":{\"106\":2}}],[\"parse\",{\"1\":{\"97\":2}}],[\"putc\",{\"1\":{\"87\":1}}],[\"putchar\",{\"1\":{\"86\":1}}],[\"puts\",{\"1\":{\"86\":1}}],[\"push\",{\"1\":{\"55\":1,\"56\":1,\"63\":3,\"64\":2}}],[\"pointer\",{\"1\":{\"75\":1}}],[\"pop\",{\"1\":{\"55\":1,\"56\":1,\"63\":4,\"64\":4}}],[\"post\",{\"1\":{\"32\":3,\"36\":1}}],[\"p\",{\"1\":{\"27\":6,\"40\":4,\"42\":3,\"43\":2,\"44\":1,\"45\":2,\"47\":10,\"55\":14,\"56\":6,\"63\":12,\"64\":7}}],[\"ptr\",{\"1\":{\"26\":1,\"27\":3,\"28\":3,\"30\":1,\"31\":1,\"32\":1,\"34\":2,\"35\":2,\"36\":4}}],[\"per\",{\"1\":{\"15\":4}}],[\"preventdefault\",{\"1\":{\"105\":3}}],[\"prev\",{\"1\":{\"48\":1}}],[\"pre\",{\"1\":{\"30\":3,\"34\":1}}],[\"print\",{\"1\":{\"46\":1,\"47\":3}}],[\"printf\",{\"1\":{\"9\":2,\"12\":2,\"15\":6,\"22\":1,\"30\":1,\"31\":1,\"32\":1,\"34\":1,\"35\":1,\"36\":1,\"42\":1,\"46\":2,\"47\":3,\"55\":3,\"56\":3,\"63\":2,\"64\":3,\"72\":1,\"75\":1,\"82\":8,\"86\":1}}],[\"prime\",{\"1\":{\"15\":11}}],[\"projects\",{\"1\":{\"2\":1}}],[\"k\",{\"1\":{\"15\":10}}],[\"key\",{\"1\":{\"9\":4,\"97\":4}}],[\"为空\",{\"1\":{\"75\":1}}],[\"为什么要用模运算\",{\"0\":{\"57\":1}}],[\"为\",{\"1\":{\"15\":1}}],[\"为了避免这种情况的发生\",{\"1\":{\"95\":1}}],[\"为了避免大数越界\",{\"1\":{\"9\":1}}],[\"为了深入了解栈的运行机制\",{\"1\":{\"62\":1}}],[\"为了实现队列\",{\"1\":{\"54\":1}}],[\"为了求解更多的素数\",{\"1\":{\"15\":1}}],[\"为了表达一个数字是否为素数\",{\"1\":{\"15\":1}}],[\"且可以用在任意的\",{\"1\":{\"102\":1}}],[\"且顺序不能随意颠倒\",{\"1\":{\"26\":1}}],[\"且小于自身的数字整除的话\",{\"1\":{\"15\":1}}],[\"且保持圆盘的排列顺序不变\",{\"1\":{\"12\":1}}],[\"至少有一个因数\",{\"1\":{\"15\":1}}],[\"都能处理\",{\"1\":{\"102\":1}}],[\"都不能放在双引号里面\",{\"1\":{\"72\":1}}],[\"都大于\",{\"1\":{\"15\":1}}],[\"都是系统保留的\",{\"1\":{\"79\":1}}],[\"都是不同的变量\",{\"1\":{\"79\":1}}],[\"都是大于\",{\"1\":{\"15\":1}}],[\"都是\",{\"1\":{\"9\":1}}],[\"或原始数据缓冲区的内容\",{\"1\":{\"108\":1}}],[\"或者为命令行中启动该程序的字符串的数量\",{\"1\":{\"75\":1}}],[\"或者它的指针指向\",{\"1\":{\"40\":1}}],[\"或\",{\"1\":{\"15\":1,\"75\":1,\"105\":1,\"107\":1,\"108\":3}}],[\"或是\",{\"1\":{\"12\":1}}],[\"假设\",{\"1\":{\"15\":1}}],[\"假设一个整数\",{\"1\":{\"15\":1}}],[\"假设我们要判断\",{\"1\":{\"15\":1}}],[\"证明过程\",{\"1\":{\"15\":1}}],[\"从文件读取二进制数据\",{\"1\":{\"87\":1}}],[\"从文件读取整行\",{\"1\":{\"87\":1}}],[\"从文件读取一个字符\",{\"1\":{\"87\":2}}],[\"从文件读取数据\",{\"1\":{\"87\":1}}],[\"从控制台读取整行输入\",{\"1\":{\"86\":1}}],[\"从控制台读取一个字符\",{\"1\":{\"86\":1}}],[\"从控制台读取输入\",{\"1\":{\"86\":1}}],[\"从声明位置开始的整个当前文件都是它的作用域\",{\"1\":{\"82\":1}}],[\"从声明的位置到文件结束都有效\",{\"1\":{\"82\":1}}],[\"从字符串读取数据\",{\"1\":{\"88\":1}}],[\"从字符串\",{\"1\":{\"75\":1}}],[\"从双斜杠到行尾都属于注释\",{\"1\":{\"72\":1}}],[\"从以上代码中可以看出\",{\"1\":{\"40\":1}}],[\"从图\",{\"1\":{\"40\":1,\"102\":1}}],[\"从\",{\"1\":{\"15\":1,\"26\":1}}],[\"从塔\",{\"1\":{\"12\":1}}],[\"同理此种情况也适用于对象与函数\",{\"1\":{\"96\":1}}],[\"同样\",{\"1\":{\"22\":1}}],[\"同样的原因\",{\"1\":{\"20\":1}}],[\"同样地\",{\"1\":{\"15\":1}}],[\"同时对每一个元素赋值\",{\"1\":{\"20\":1}}],[\"同时遵守以下规则\",{\"1\":{\"12\":1}}],[\"大写英文字母开头的变量名\",{\"1\":{\"79\":1}}],[\"大括号的结尾不需要添加分号\",{\"1\":{\"70\":1}}],[\"大于\",{\"1\":{\"15\":2,\"75\":2}}],[\"大圆盘不能放在小圆盘上面\",{\"1\":{\"12\":1}}],[\"不是改变原来的数值\",{\"1\":{\"93\":1}}],[\"不是素数\",{\"1\":{\"15\":4}}],[\"不应该赋予不是同一个类型的值\",{\"1\":{\"81\":1}}],[\"不管是哪一种注释\",{\"1\":{\"72\":1}}],[\"不建议这样做\",{\"1\":{\"68\":1}}],[\"不能用作变量名\",{\"1\":{\"79\":1}}],[\"不能以数字开头\",{\"1\":{\"79\":1}}],[\"不能确保每个独立内存的起始地址是连续的\",{\"1\":{\"42\":1}}],[\"不能被其他正整数整除\",{\"1\":{\"15\":1}}],[\"不妨设为\",{\"1\":{\"15\":1}}],[\"并从图\",{\"1\":{\"108\":1}}],[\"并根据我们的要求读取成我们想要的文件或数据类型\",{\"1\":{\"108\":1}}],[\"并创建任何嵌套对象或数组的新副本\",{\"1\":{\"97\":1}}],[\"并提高程序的可预测性和稳定性\",{\"1\":{\"93\":1}}],[\"并非所有的词都能用作变量名\",{\"1\":{\"79\":1}}],[\"并将它放在一个成为拖放区域的特殊区域中\",{\"1\":{\"105\":1}}],[\"并将所有的属性值都复制过去\",{\"1\":{\"97\":1}}],[\"并将其分配给当前的变量名中\",{\"1\":{\"93\":1}}],[\"并将\",{\"1\":{\"56\":3}}],[\"并维护一个变量\",{\"1\":{\"56\":1}}],[\"并在另一端删除元素\",{\"1\":{\"54\":1}}],[\"并且\",{\"1\":{\"102\":1}}],[\"并且指定类型为\",{\"1\":{\"80\":1}}],[\"并且指定位置的赋值与顺序赋值\",{\"1\":{\"20\":1}}],[\"并且很多编译器也不允许这么写\",{\"1\":{\"75\":1}}],[\"并且它会作为程序的起始点\",{\"1\":{\"75\":1}}],[\"并且将值设为\",{\"1\":{\"68\":1}}],[\"并且如果一个正整数能被大于\",{\"1\":{\"15\":1}}],[\"并检查\",{\"1\":{\"15\":1}}],[\"并返回一个布尔值\",{\"1\":{\"15\":1}}],[\"小于或等于\",{\"1\":{\"15\":1}}],[\"小于\",{\"1\":{\"15\":2}}],[\"是用来确定是否可以同时上传多个文件\",{\"1\":{\"104\":1}}],[\"是用来决定用户的输入类型\",{\"1\":{\"104\":1}}],[\"是继承自\",{\"1\":{\"102\":1}}],[\"是\",{\"1\":{\"101\":1}}],[\"是在\",{\"1\":{\"82\":1}}],[\"是在文件顶层声明的\",{\"1\":{\"82\":1}}],[\"是空指针\",{\"1\":{\"75\":1}}],[\"是一种动态类型的语言\",{\"1\":{\"92\":1}}],[\"是一种常见的查找算法\",{\"1\":{\"9\":1}}],[\"是一个异步\",{\"1\":{\"108\":1}}],[\"是一个核心的标准输入输出\",{\"1\":{\"85\":1}}],[\"是一个指针数组\",{\"1\":{\"75\":1}}],[\"是一个\",{\"1\":{\"75\":1}}],[\"是否可以被这些数字整除\",{\"1\":{\"15\":1}}],[\"是否为素数\",{\"1\":{\"15\":1}}],[\"否则很容易导致错误\",{\"1\":{\"72\":1}}],[\"否则编译时会报错\",{\"1\":{\"20\":2}}],[\"否则\",{\"1\":{\"15\":2}}],[\"否则返回\",{\"1\":{\"9\":1}}],[\"判断文件内部指针是否指向文件结尾\",{\"1\":{\"87\":1}}],[\"判断一个数是否为素数\",{\"1\":{\"15\":1}}],[\"判断目标值与中间值的大小关系\",{\"1\":{\"9\":1}}],[\"特别是在数论领域\",{\"1\":{\"15\":1}}],[\"整数\",{\"1\":{\"80\":1}}],[\"整除\",{\"1\":{\"15\":2}}],[\"整型数组\",{\"1\":{\"9\":1}}],[\"而不复制其内部的引用\",{\"1\":{\"96\":1}}],[\"而不是实际的对象或数组本身\",{\"1\":{\"96\":1}}],[\"而不是直接改变了原始数值的值\",{\"1\":{\"93\":1}}],[\"而不是\",{\"1\":{\"9\":2}}],[\"而是创建一个新的数值并重新分配给\",{\"1\":{\"93\":1}}],[\"而对于出栈操作\",{\"1\":{\"63\":1}}],[\"而当数组非常大时\",{\"1\":{\"39\":1}}],[\"而且难以发现\",{\"1\":{\"21\":1}}],[\"而那实际上是其他变量的区域\",{\"1\":{\"21\":1}}],[\"而在我们当前的\",{\"1\":{\"15\":1}}],[\"而保存这两个数字使用\",{\"1\":{\"15\":1}}],[\"而表达式\",{\"1\":{\"15\":1}}],[\"而\",{\"1\":{\"15\":2,\"75\":2}}],[\"等获取远端文件\",{\"1\":{\"107\":1}}],[\"等同于单个空格\",{\"1\":{\"71\":1}}],[\"等同于\",{\"1\":{\"20\":5,\"71\":1,\"80\":1}}],[\"等于等号右边的值\",{\"1\":{\"81\":1}}],[\"等于\",{\"1\":{\"15\":1}}],[\"等不是素数\",{\"1\":{\"15\":1}}],[\"等都是素数\",{\"1\":{\"15\":1}}],[\"等等这个问题与我们最开始讨论的问题是不是有些相似\",{\"1\":{\"12\":1}}],[\"例如修改文件中某一段数据时\",{\"1\":{\"109\":1}}],[\"例如它不能处理函数和\",{\"1\":{\"97\":1}}],[\"例如使用\",{\"1\":{\"97\":1}}],[\"例如\",{\"1\":{\"15\":2,\"57\":2}}],[\"换句话说\",{\"1\":{\"15\":1,\"62\":1}}],[\"换而言之要想解决拥有三个圆盘的汉诺塔问题\",{\"1\":{\"12\":1}}],[\"素数在数学中有着重要的地位\",{\"1\":{\"15\":1}}],[\"素数\",{\"0\":{\"15\":1},\"1\":{\"15\":2}}],[\"90\",{\"1\":{\"96\":7,\"97\":3}}],[\"99\",{\"1\":{\"19\":1,\"20\":6,\"82\":2}}],[\"9999\",{\"1\":{\"15\":1}}],[\"9\",{\"1\":{\"12\":1,\"15\":2,\"20\":4,\"47\":1,\"109\":1}}],[\"步\",{\"1\":{\"12\":3}}],[\"在将其用于生产之前\",{\"1\":{\"106\":1}}],[\"在通过用户点击上传后获取\",{\"1\":{\"104\":1}}],[\"在源码文件顶层声明的变量\",{\"1\":{\"82\":1}}],[\"在标准\",{\"1\":{\"75\":1}}],[\"在非标准的\",{\"1\":{\"75\":1}}],[\"在最新的\",{\"1\":{\"75\":1}}],[\"在程序的开头\",{\"1\":{\"75\":1}}],[\"在语法上\",{\"1\":{\"70\":1}}],[\"在当前数组或链表的索引循环中\",{\"1\":{\"57\":1}}],[\"在数组中删除首元素时需要对当前数组进行遍历以确定首元素所在位置\",{\"1\":{\"56\":1}}],[\"在计算机科学中\",{\"1\":{\"51\":1}}],[\"在环形链表中\",{\"1\":{\"48\":1}}],[\"在链表末尾添加节点函数\",{\"1\":{\"43\":1}}],[\"在链表的实现中\",{\"1\":{\"40\":1}}],[\"在一个复杂的系统运行环境下\",{\"1\":{\"39\":1}}],[\"在解决各种问题时展现出强大的功能\",{\"1\":{\"25\":1}}],[\"在内存中所占的字节数都是相同的\",{\"1\":{\"22\":1}}],[\"在图\",{\"1\":{\"15\":1,\"108\":1}}],[\"在这个例子中\",{\"1\":{\"15\":1}}],[\"在这里我们以\",{\"1\":{\"12\":1}}],[\"在判断一个整数是否为素数时\",{\"1\":{\"15\":1}}],[\"在\",{\"1\":{\"15\":1,\"18\":1,\"19\":1,\"25\":1,\"75\":1,\"79\":1,\"93\":1,\"95\":1,\"102\":1}}],[\"在第\",{\"1\":{\"9\":2}}],[\"移动\",{\"1\":{\"12\":3}}],[\"移动第\",{\"1\":{\"12\":1}}],[\"移动到塔\",{\"1\":{\"12\":11}}],[\"移动到目标柱子\",{\"1\":{\"12\":1}}],[\"它作为一个整体文件\",{\"1\":{\"109\":1}}],[\"它允许接受\",{\"1\":{\"108\":1}}],[\"它本身是不能直接读写所存储的数据\",{\"1\":{\"101\":1}}],[\"它会在内存中为每个被复制的对象分配新的空间\",{\"1\":{\"97\":1}}],[\"它提供了丰富的函数和类型定义来处理与外部设备的文本和二进制数据交换\",{\"1\":{\"85\":1}}],[\"它形成一个单独的作用域\",{\"1\":{\"82\":1}}],[\"它们是两种不同的复制对象的方式\",{\"1\":{\"95\":1}}],[\"它们的值是可以改变的\",{\"1\":{\"94\":1}}],[\"它们的值是不可变的\",{\"1\":{\"93\":1}}],[\"它们的值时\",{\"1\":{\"93\":1}}],[\"它们都称为关键字\",{\"1\":{\"79\":1}}],[\"它们负责组织和存储数据以优化算法性能\",{\"1\":{\"51\":1}}],[\"它为程序提供了一个起始点\",{\"1\":{\"75\":1}}],[\"它以独特的分层结构和高效的查找性能\",{\"1\":{\"25\":1}}],[\"它就是素数\",{\"1\":{\"15\":1}}],[\"它接受一个整数作为参数\",{\"1\":{\"15\":1}}],[\"它包含两个移动\",{\"1\":{\"12\":1}}],[\"它的规则是\",{\"1\":{\"82\":1}}],[\"它的位置已经固定不再会移动了\",{\"1\":{\"12\":1}}],[\"它的基本思想是将一个有序的数组按照中间值分成两个部分\",{\"1\":{\"9\":1}}],[\"层为二的三次方减一\",{\"1\":{\"12\":1}}],[\"层为二的二次方减一\",{\"1\":{\"12\":1}}],[\"层为二的一次方减一\",{\"1\":{\"12\":1}}],[\"层圆盘需要\",{\"1\":{\"12\":3}}],[\"层圆盘的步数\",{\"1\":{\"12\":1}}],[\"层圆盘就是一步\",{\"1\":{\"12\":1}}],[\"层圆盘\",{\"1\":{\"12\":3}}],[\"层的我们从上图中可以看出\",{\"1\":{\"12\":1}}],[\"层的汉诺塔问题\",{\"1\":{\"12\":3}}],[\"层汉诺塔问题时\",{\"1\":{\"12\":1}}],[\"当需要对二进制数据进行操作时\",{\"1\":{\"109\":1}}],[\"当读取操作完成时打印读取结果\",{\"1\":{\"108\":1}}],[\"当文件上传成功时\",{\"1\":{\"108\":1}}],[\"当上传大文件时\",{\"1\":{\"108\":1}}],[\"当元素或选中的文本在可释放目标上被释放时触发\",{\"1\":{\"105\":1}}],[\"当元素或选中的文本被拖到一个可释放目标上时触发\",{\"1\":{\"105\":1}}],[\"当对象包含其他对象或数组作为属性时\",{\"1\":{\"96\":1}}],[\"当我们对其中一个变量进行修改时\",{\"1\":{\"95\":1}}],[\"当我们将变量赋值给另一个变量时\",{\"1\":{\"95\":1}}],[\"当你把程序从一个编译器移到另一个编译器时\",{\"1\":{\"75\":1}}],[\"当你有一个长度为\",{\"1\":{\"57\":1}}],[\"当\",{\"1\":{\"75\":1}}],[\"当队列中没有节点时\",{\"1\":{\"55\":1}}],[\"当要解决\",{\"1\":{\"12\":1}}],[\"当遇到这样的题目时我们就可以采用二分查找来完成\",{\"1\":{\"9\":1}}],[\"结果肯定是可以的\",{\"1\":{\"12\":1}}],[\"接下来要考虑的问题就是如何将\",{\"1\":{\"12\":1}}],[\"甚至我们可以将它忽略掉\",{\"1\":{\"12\":1}}],[\"所有的引用类型都是\",{\"1\":{\"94\":1}}],[\"所有简单的程序都可以定义其他额外的函数\",{\"1\":{\"75\":1}}],[\"所以可以把\",{\"1\":{\"108\":1}}],[\"所以可以不按照顺序任意赋值\",{\"1\":{\"20\":1}}],[\"所以除了\",{\"1\":{\"94\":1}}],[\"所以在代码中传递这些值时不需要担心它们被意外地修改\",{\"1\":{\"93\":1}}],[\"所以对于大括号外面的代码\",{\"1\":{\"82\":1}}],[\"所以先为\",{\"1\":{\"81\":1}}],[\"所以编译器不必接受这种形式\",{\"1\":{\"75\":1}}],[\"所以\",{\"1\":{\"68\":1,\"81\":2}}],[\"所以总的字节数除以一个元素所占的字节数就是数组的长度\",{\"1\":{\"22\":1}}],[\"所以数组\",{\"1\":{\"19\":1}}],[\"所以我们通常需要使用拷贝的手段来创建一个新的副本\",{\"1\":{\"95\":1}}],[\"所以我们就有以下等式\",{\"1\":{\"12\":1}}],[\"所以我们不在需要考虑它了\",{\"1\":{\"12\":1}}],[\"所示\",{\"1\":{\"9\":1}}],[\"现在最大的圆盘已经抵达了它应在的位置\",{\"1\":{\"12\":1}}],[\"那么他相当于在堆内存中重新开辟了一块空间这样修改之后的这个数组与之前修改的数组会分别处在两个不同地址的内存空间中且他们互不影响\",{\"1\":{\"96\":1}}],[\"那么会在当前作用域覆盖外层变量\",{\"1\":{\"82\":1}}],[\"那么第一个字符串\",{\"1\":{\"75\":1}}],[\"那么数组长度将是最大的指定位置再加\",{\"1\":{\"20\":1}}],[\"那么未赋值的元素自动初始化为\",{\"1\":{\"20\":1}}],[\"那么这个修改也会反映到浅拷贝后的副本上\",{\"1\":{\"96\":1}}],[\"那么这个整数就是素数\",{\"1\":{\"15\":1}}],[\"那么这可以大大的减少我们对存储空间上的消耗\",{\"1\":{\"15\":1}}],[\"那么剩下的下一个数字必然为素数\",{\"1\":{\"15\":1}}],[\"那么该数字必然不是素数\",{\"1\":{\"15\":1}}],[\"那么\",{\"1\":{\"15\":1,\"75\":1}}],[\"那么另一个因数就是\",{\"1\":{\"15\":1}}],[\"那么它们的乘积就会大于\",{\"1\":{\"15\":1}}],[\"那么它就不是素数\",{\"1\":{\"15\":1}}],[\"那么它可以表示为两个因数的乘积\",{\"1\":{\"15\":4}}],[\"那么如何计算需要多少步\",{\"1\":{\"12\":1}}],[\"那么以当前思路来说\",{\"1\":{\"12\":1}}],[\"那么遵循上述的游戏规则\",{\"1\":{\"12\":1}}],[\"那么必然要将塔\",{\"1\":{\"12\":1}}],[\"率先落入到塔\",{\"1\":{\"12\":1}}],[\"中分别可以看到\",{\"1\":{\"108\":1}}],[\"中可以看到\",{\"1\":{\"108\":1}}],[\"中可以看出分散存储是链表最显著的特征\",{\"1\":{\"40\":1}}],[\"中可用\",{\"1\":{\"106\":1}}],[\"中来对它的数据以不同形式的格式进行读取操作\",{\"1\":{\"101\":1}}],[\"中序\",{\"0\":{\"31\":1,\"35\":1}}],[\"中我们可以看到它主要是由两部分组成\",{\"1\":{\"26\":1}}],[\"中我们就可以看出为何仅使用数字\",{\"1\":{\"15\":1}}],[\"中声明了名为\",{\"1\":{\"19\":1}}],[\"中最开始的操作\",{\"1\":{\"12\":1}}],[\"中畅通无阻\",{\"1\":{\"12\":1}}],[\"中\",{\"1\":{\"12\":6,\"15\":1,\"93\":1,\"95\":1,\"96\":1,\"102\":1}}],[\"中的元祖\",{\"1\":{\"109\":1}}],[\"中的内容\",{\"1\":{\"108\":4}}],[\"中的一个对象\",{\"1\":{\"101\":1}}],[\"中的最大的圆盘\",{\"1\":{\"12\":1}}],[\"中的\",{\"1\":{\"9\":1,\"109\":1}}],[\"的内容不能直接操作\",{\"1\":{\"109\":1}}],[\"的属性和方法都可以应用于\",{\"1\":{\"102\":1}}],[\"的对象\",{\"1\":{\"94\":1}}],[\"的基础上派生的\",{\"1\":{\"94\":1}}],[\"的返回值\",{\"1\":{\"81\":1}}],[\"的返回值是一个整数\",{\"1\":{\"75\":1}}],[\"的类型是整数\",{\"1\":{\"81\":1}}],[\"的设计原则是把函数作为程序的构成模块\",{\"1\":{\"75\":1}}],[\"的\",{\"1\":{\"75\":1}}],[\"的实现版本还支持其他\",{\"1\":{\"75\":1}}],[\"的值就是赋值表达式\",{\"1\":{\"81\":1}}],[\"的值多\",{\"1\":{\"75\":1}}],[\"的值为\",{\"1\":{\"75\":1}}],[\"的方法\",{\"1\":{\"75\":1}}],[\"的引用\",{\"1\":{\"48\":1}}],[\"的节点\",{\"1\":{\"44\":1,\"47\":1}}],[\"的数组时\",{\"1\":{\"57\":1}}],[\"的数组\",{\"1\":{\"19\":1}}],[\"的数字\",{\"1\":{\"15\":1}}],[\"的整数倍去除掉\",{\"1\":{\"15\":1}}],[\"的平方根\",{\"1\":{\"15\":6}}],[\"的平方是\",{\"1\":{\"15\":1}}],[\"的正整数\",{\"1\":{\"15\":1}}],[\"的乘积\",{\"1\":{\"15\":1}}],[\"的函数\",{\"1\":{\"15\":1}}],[\"的自然数\",{\"1\":{\"15\":1}}],[\"的定义是一个大于\",{\"1\":{\"15\":1}}],[\"的原因\",{\"1\":{\"12\":1}}],[\"的圆盘全部移动到塔\",{\"1\":{\"12\":1}}],[\"的赋值是\",{\"1\":{\"9\":1}}],[\"具体过程如下\",{\"1\":{\"12\":1}}],[\"具体过程我们可以将其抽象成\",{\"1\":{\"12\":1}}],[\"就不应该赋值为小数\",{\"1\":{\"81\":1}}],[\"就不得修改变量指向的地址\",{\"1\":{\"20\":1}}],[\"就为它分配内存空间\",{\"1\":{\"81\":1}}],[\"就是程序本身的名称\",{\"1\":{\"75\":1}}],[\"就是从第\",{\"1\":{\"19\":1}}],[\"就能区分语法单位\",{\"1\":{\"71\":1}}],[\"就没有返回值\",{\"1\":{\"69\":1}}],[\"就得到了栈这种数据结构\",{\"1\":{\"60\":1}}],[\"就像现实生活中排队等待服务的情景一样\",{\"1\":{\"52\":1}}],[\"就像农夫播撒种子\",{\"1\":{\"6\":1}}],[\"就会小于\",{\"1\":{\"15\":1}}],[\"就可以使用\",{\"1\":{\"109\":1}}],[\"就可以确定\",{\"1\":{\"15\":1}}],[\"就可执行图\",{\"1\":{\"12\":1}}],[\"就需先解决将拥有二个圆盘的汉诺塔问题\",{\"1\":{\"12\":1}}],[\"就需要先解决\",{\"1\":{\"12\":2}}],[\"也不会影响到深拷贝后的副本\",{\"1\":{\"97\":1}}],[\"也要计算进去\",{\"1\":{\"75\":1}}],[\"也称为原始值\",{\"1\":{\"92\":1}}],[\"也称为复合语句\",{\"1\":{\"70\":1}}],[\"也称为质数\",{\"1\":{\"15\":1}}],[\"也可以写在一行\",{\"1\":{\"81\":1}}],[\"也可以根据需要另外命名\",{\"1\":{\"75\":1}}],[\"也可以放在一行语句的结尾\",{\"1\":{\"72\":1}}],[\"也可以成为语句\",{\"1\":{\"69\":1}}],[\"也可以由一个根节点及两棵分别作为其左右子树的二叉树构成\",{\"1\":{\"25\":1}}],[\"也可以获得整个数组在内存中所占的字节数\",{\"1\":{\"22\":1}}],[\"也可将从\",{\"1\":{\"12\":1}}],[\"也是不允许的\",{\"1\":{\"20\":1}}],[\"也就是之前所创建的\",{\"1\":{\"105\":1}}],[\"也就是链表中的\",{\"1\":{\"40\":1}}],[\"也就是\",{\"1\":{\"15\":1,\"19\":1}}],[\"也就是说所有的\",{\"1\":{\"75\":1}}],[\"也就是说\",{\"1\":{\"12\":1,\"72\":1}}],[\"也就是说想要解决\",{\"1\":{\"12\":1}}],[\"将文件内部指针重置到文件开始处\",{\"1\":{\"87\":1}}],[\"将文件内部指针移到指定位置\",{\"1\":{\"87\":1}}],[\"将注释放在双斜杠\",{\"1\":{\"72\":1}}],[\"将要注释的内容放在\",{\"1\":{\"72\":1}}],[\"将要入队的元素赋值给\",{\"1\":{\"56\":1}}],[\"将要入队的节点插入到当前队列尾节点的后面\",{\"1\":{\"55\":2}}],[\"将声明的整数变量\",{\"1\":{\"68\":1}}],[\"将把元素添加到栈顶的操作叫作\",{\"1\":{\"61\":1}}],[\"将把元素加入队尾的操作称为\",{\"1\":{\"53\":1}}],[\"将输入元素赋值给\",{\"1\":{\"56\":1}}],[\"将当前队列头节点变更为头节点后下一个节点\",{\"1\":{\"55\":1}}],[\"将最后一个节点称为尾节点\",{\"1\":{\"48\":1}}],[\"将最大的\",{\"1\":{\"12\":1}}],[\"将节点添加到链表末尾\",{\"1\":{\"43\":1,\"47\":1}}],[\"将第\",{\"1\":{\"12\":2}}],[\"将\",{\"1\":{\"12\":5,\"15\":1,\"56\":2}}],[\"个对象\",{\"1\":{\"109\":1}}],[\"个字符\",{\"1\":{\"79\":1}}],[\"个字节是存在显著浪费的\",{\"1\":{\"15\":1}}],[\"个参数的\",{\"1\":{\"75\":1}}],[\"个元素\",{\"1\":{\"21\":1}}],[\"个\",{\"1\":{\"20\":1}}],[\"个二进制位\",{\"1\":{\"15\":1}}],[\"个圆盘从塔\",{\"1\":{\"12\":7}}],[\"个步骤\",{\"1\":{\"12\":1}}],[\"个不同元素的有序\",{\"1\":{\"9\":1}}],[\"但不能用于从文件系统中按路径名简单地读取文件\",{\"1\":{\"108\":1}}],[\"但不建议这样做\",{\"1\":{\"20\":1}}],[\"但此事件还是会继续传播\",{\"1\":{\"105\":1}}],[\"但这个修改没有反映到浅拷贝后的副本上\",{\"1\":{\"96\":1}}],[\"但外层不可以使用内层声明的变量\",{\"1\":{\"82\":1}}],[\"但相应地也需要占用更多的内存空间\",{\"1\":{\"48\":1}}],[\"但为了能够保持节点之间的顺序关系\",{\"1\":{\"40\":1}}],[\"但要注意\",{\"1\":{\"20\":1}}],[\"但大括号里面的值不能多于数组的长度\",{\"1\":{\"20\":1}}],[\"但是应该避免赋值运算符两侧的类型不一致\",{\"1\":{\"81\":1}}],[\"但是不会清除内存里面原来的值\",{\"1\":{\"81\":1}}],[\"但是还没有任何标准考虑接受它\",{\"1\":{\"75\":1}}],[\"但是表达式本身不构成语句\",{\"1\":{\"69\":1}}],[\"但是\",{\"1\":{\"21\":1,\"97\":1}}],[\"但是这与我们的假设矛盾\",{\"1\":{\"15\":1}}],[\"但是其中蕴含了很多算法思想\",{\"1\":{\"12\":1}}],[\"但都必须遵循上述两条规则\",{\"1\":{\"12\":1}}],[\"塔移出的圆盘重新移回\",{\"1\":{\"12\":1}}],[\"塔\",{\"1\":{\"12\":4}}],[\"可以自定义格式和字节序\",{\"1\":{\"109\":1}}],[\"可以用该事件来监控文件的读取进度\",{\"1\":{\"108\":1}}],[\"可以看出\",{\"1\":{\"102\":1}}],[\"可以使用\",{\"1\":{\"94\":1}}],[\"可以使用大括号\",{\"1\":{\"20\":1}}],[\"可以大致分为两类\",{\"1\":{\"92\":1}}],[\"可以写在同一行\",{\"1\":{\"81\":1}}],[\"可以在这个范围的任何地方读取这个变量\",{\"1\":{\"82\":1}}],[\"可以在同一行声明\",{\"1\":{\"80\":1}}],[\"可以在一端添加元素\",{\"1\":{\"54\":1}}],[\"可以利用函数\",{\"1\":{\"75\":1}}],[\"可以放在行首\",{\"1\":{\"72\":1}}],[\"可以确保下标总是在\",{\"1\":{\"57\":1}}],[\"可以朝两个方向遍历链表\",{\"1\":{\"48\":1}}],[\"可以获得数据类型或变量在内存中所占的字节数\",{\"1\":{\"22\":1}}],[\"可以结合使用\",{\"1\":{\"20\":1}}],[\"可以指定为哪些位置的元素赋值\",{\"1\":{\"20\":1}}],[\"可以通过位的形式对程序进行改写\",{\"1\":{\"15\":1}}],[\"可以快速判断一个整数是否为素数\",{\"1\":{\"15\":1}}],[\"可以表示为\",{\"1\":{\"15\":1}}],[\"可以被某个数字整除\",{\"1\":{\"15\":1}}],[\"可以被\",{\"1\":{\"15\":2}}],[\"可将圆盘临时置于\",{\"1\":{\"12\":1}}],[\"可能会超出\",{\"1\":{\"9\":1}}],[\"上传\",{\"0\":{\"104\":1}}],[\"上一个节点\",{\"1\":{\"48\":1}}],[\"上面示例中\",{\"1\":{\"21\":1}}],[\"上的三个圆盘全部移动到塔\",{\"1\":{\"12\":1}}],[\"上的两个圆盘全部移动到塔\",{\"1\":{\"12\":2}}],[\"上\",{\"1\":{\"12\":1}}],[\"问题\",{\"1\":{\"12\":1}}],[\"问题解决能力和创新意识\",{\"1\":{\"6\":1}}],[\"每\",{\"1\":{\"105\":1}}],[\"每个作用域都会优先使用当前作用域声明的\",{\"1\":{\"82\":1}}],[\"每个变量都有自己的类型\",{\"1\":{\"80\":1}}],[\"每个指针都指向组成程序环境的一个字符串\",{\"1\":{\"75\":1}}],[\"每个指针都独立的指向命令行中每个字符串\",{\"1\":{\"75\":1}}],[\"每个使用\",{\"1\":{\"42\":1}}],[\"每个节点在存储数据的同时都要配置一个指针\",{\"1\":{\"40\":1}}],[\"每次只能移动一个圆盘\",{\"1\":{\"12\":1}}],[\"每当看到孩子们面对一串串代码时眼睛闪烁出好奇的光芒\",{\"1\":{\"6\":1}}],[\"目标是将若干个圆盘从起始柱子移动到目标柱子\",{\"1\":{\"12\":1}}],[\"源自于印度数学家毕达哥拉斯所提出的问题\",{\"1\":{\"12\":1}}],[\"汉诺塔中只有一个圆盘直接将圆盘从塔\",{\"1\":{\"12\":1}}],[\"汉诺塔游戏看起来很简单\",{\"1\":{\"12\":1}}],[\"汉诺塔是一个经典的益智游戏\",{\"1\":{\"12\":1}}],[\"汉诺塔\",{\"0\":{\"12\":1}}],[\"算法训练\",{\"2\":{\"11\":1,\"14\":1,\"17\":1}}],[\"div>\",{\"1\":{\"105\":1}}],[\"done\",{\"1\":{\"108\":1}}],[\"document\",{\"1\":{\"104\":1,\"105\":1,\"106\":1,\"108\":1}}],[\"double\",{\"1\":{\"79\":1}}],[\"do\",{\"1\":{\"79\":1}}],[\"dataview\",{\"1\":{\"109\":3}}],[\"datatransfer\",{\"1\":{\"105\":1}}],[\"data\",{\"0\":{\"113\":1},\"1\":{\"48\":1,\"55\":1,\"64\":2,\"108\":1}}],[\"description\",{\"1\":{\"106\":1}}],[\"deepcopy\",{\"1\":{\"97\":2}}],[\"default\",{\"1\":{\"79\":1}}],[\"define\",{\"1\":{\"34\":1,\"35\":1,\"36\":1}}],[\"delete\",{\"1\":{\"45\":1,\"47\":11}}],[\"development\",{\"1\":{\"2\":1}}],[\"d\",{\"1\":{\"9\":3,\"12\":3,\"15\":4,\"22\":1,\"30\":1,\"31\":1,\"32\":1,\"34\":1,\"35\":1,\"36\":1,\"46\":1,\"47\":1,\"55\":1,\"56\":1,\"63\":1,\"64\":1,\"82\":8}}],[\"80\",{\"1\":{\"96\":3,\"97\":3}}],[\"88\",{\"1\":{\"20\":2}}],[\"8\",{\"1\":{\"9\":1,\"15\":3,\"47\":1,\"69\":1}}],[\"5\",{\"1\":{\"9\":1,\"15\":3,\"20\":9,\"22\":1,\"47\":1,\"96\":1,\"108\":1}}],[\"43\",{\"1\":{\"93\":2}}],[\"42\",{\"1\":{\"81\":2,\"93\":2}}],[\"44\",{\"1\":{\"20\":2}}],[\"4\",{\"1\":{\"9\":1,\"15\":6,\"20\":5,\"22\":1,\"47\":1,\"69\":1,\"108\":1}}],[\"32\",{\"1\":{\"15\":1,\"109\":1}}],[\"3\",{\"1\":{\"9\":1,\"12\":7,\"15\":8,\"20\":10,\"22\":1,\"47\":1,\"69\":1,\"75\":1,\"81\":1}}],[\"src\",{\"1\":{\"107\":1}}],[\"showopenfilepicker\",{\"0\":{\"106\":1},\"1\":{\"106\":3}}],[\"short\",{\"1\":{\"79\":1}}],[\"solid\",{\"1\":{\"105\":1}}],[\"sorted\",{\"1\":{\"9\":5}}],[\"send\",{\"1\":{\"102\":1}}],[\"selectelement\",{\"1\":{\"104\":2,\"105\":3,\"106\":2,\"108\":2}}],[\"select\",{\"1\":{\"97\":2}}],[\"search\",{\"1\":{\"9\":2,\"44\":1,\"47\":11}}],[\"score\",{\"1\":{\"96\":8,\"97\":3}}],[\"scanf\",{\"1\":{\"86\":1}}],[\"scale\",{\"1\":{\"15\":12}}],[\"snprintf\",{\"1\":{\"88\":1}}],[\"sprintf\",{\"1\":{\"88\":1}}],[\"sscanf\",{\"1\":{\"88\":1}}],[\"switch\",{\"1\":{\"79\":1}}],[\"signed\",{\"1\":{\"79\":1}}],[\"size\",{\"1\":{\"34\":2,\"35\":2,\"36\":2,\"40\":1,\"47\":3,\"55\":1,\"56\":7,\"63\":1}}],[\"sizeof\",{\"1\":{\"9\":2,\"15\":1,\"22\":5,\"27\":1,\"42\":1,\"47\":1,\"55\":2,\"56\":2,\"63\":2,\"64\":2,\"79\":1}}],[\"stopimmediatepropagation\",{\"1\":{\"105\":1}}],[\"stoppropagation\",{\"1\":{\"105\":1}}],[\"stringify\",{\"1\":{\"97\":2}}],[\"structure\",{\"0\":{\"113\":1}}],[\"struct\",{\"1\":{\"26\":3,\"40\":5,\"47\":3,\"48\":3,\"55\":3,\"56\":1,\"63\":3,\"64\":1,\"79\":1}}],[\"stdio\",{\"0\":{\"85\":1},\"1\":{\"85\":1}}],[\"standard\",{\"0\":{\"115\":1},\"1\":{\"85\":1}}],[\"static\",{\"1\":{\"79\":1}}],[\"status\",{\"0\":{\"2\":1}}],[\"star\",{\"1\":{\"79\":3}}],[\"stack\",{\"1\":{\"2\":1,\"34\":4,\"35\":4,\"36\":5,\"63\":34,\"64\":38}}],[\"succeed\",{\"1\":{\"9\":1}}],[\"root\",{\"1\":{\"28\":2,\"30\":7,\"31\":7,\"32\":7,\"34\":10,\"35\":10,\"36\":15}}],[\"reader\",{\"1\":{\"109\":3}}],[\"readastext\",{\"1\":{\"108\":1,\"109\":1}}],[\"readasdataurl\",{\"1\":{\"108\":4}}],[\"readasbinarystring\",{\"1\":{\"108\":1}}],[\"readasarraybuffer\",{\"1\":{\"108\":1}}],[\"readystate\",{\"1\":{\"108\":2}}],[\"rear\",{\"1\":{\"55\":1,\"56\":7}}],[\"rename\",{\"1\":{\"87\":1}}],[\"remove\",{\"1\":{\"87\":1}}],[\"rewind\",{\"1\":{\"87\":1}}],[\"responce\",{\"1\":{\"107\":2}}],[\"restrict\",{\"1\":{\"79\":1}}],[\"result\",{\"1\":{\"9\":3,\"108\":8}}],[\"register\",{\"1\":{\"79\":1}}],[\"return\",{\"1\":{\"9\":3,\"12\":5,\"15\":6,\"22\":1,\"27\":1,\"28\":1,\"30\":1,\"31\":1,\"32\":1,\"40\":2,\"42\":2,\"43\":1,\"44\":2,\"45\":3,\"47\":9,\"55\":4,\"56\":5,\"63\":3,\"64\":5,\"75\":5,\"79\":1,\"82\":1,\"97\":3}}],[\"right\",{\"1\":{\"9\":14,\"26\":1}}],[\"0x1\",{\"1\":{\"36\":2}}],[\"0xffffffff\",{\"1\":{\"15\":1}}],[\"0x3fffffff\",{\"1\":{\"15\":1}}],[\"0\",{\"1\":{\"9\":3,\"12\":2,\"15\":19,\"19\":2,\"20\":34,\"22\":2,\"34\":1,\"35\":1,\"36\":1,\"40\":2,\"47\":3,\"55\":2,\"56\":3,\"57\":1,\"63\":3,\"64\":2,\"75\":9,\"82\":2,\"96\":1,\"108\":2,\"109\":1}}],[\"basic\",{\"0\":{\"116\":1}}],[\"base64\",{\"1\":{\"108\":1}}],[\"buffer\",{\"1\":{\"109\":3}}],[\"button>\",{\"1\":{\"106\":1}}],[\"black\",{\"1\":{\"105\":1}}],[\"blob\",{\"0\":{\"100\":1,\"101\":1},\"1\":{\"101\":1,\"102\":6,\"107\":1,\"108\":8,\"109\":4}}],[\"border\",{\"1\":{\"105\":1}}],[\"break\",{\"1\":{\"79\":1}}],[\"binary\",{\"1\":{\"101\":1}}],[\"binarysearch\",{\"1\":{\"9\":2}}],[\"bit\",{\"1\":{\"15\":1}}],[\"byte\",{\"1\":{\"15\":1}}],[\"b\",{\"1\":{\"12\":12,\"15\":6,\"82\":4}}],[\"better\",{\"1\":{\"1\":1}}],[\"become\",{\"1\":{\"1\":1}}],[\"https\",{\"1\":{\"106\":1}}],[\"hasownproperty\",{\"1\":{\"97\":1}}],[\"hanoi\",{\"1\":{\"12\":4}}],[\"hua\",{\"1\":{\"95\":3,\"96\":4}}],[\"h\",{\"0\":{\"85\":1},\"1\":{\"85\":1}}],[\"height\",{\"1\":{\"80\":4,\"105\":1}}],[\"hello\",{\"1\":{\"72\":1,\"75\":1,\"109\":4}}],[\"head\",{\"1\":{\"40\":3,\"44\":5,\"46\":4,\"47\":11}}],[\"h>\",{\"1\":{\"9\":1,\"12\":2,\"15\":3,\"22\":1,\"40\":2,\"47\":3,\"55\":1,\"56\":1,\"63\":2,\"64\":2,\"75\":1}}],[\"hi\",{\"0\":{\"1\":1}}],[\"因为编译器这里不借助空格\",{\"1\":{\"71\":1}}],[\"因为语句用来执行某个命令\",{\"1\":{\"69\":1}}],[\"因为数组中每个元素的类型都是一样的\",{\"1\":{\"22\":1}}],[\"因为是制定的元素赋值\",{\"1\":{\"20\":1}}],[\"因为\",{\"1\":{\"15\":3}}],[\"因为它们各自拥有独立的内存空间\",{\"1\":{\"97\":1}}],[\"因为它们共享相同的引用\",{\"1\":{\"96\":1}}],[\"因为它们可以被其他的正整数整除\",{\"1\":{\"15\":1}}],[\"因为它们只能被\",{\"1\":{\"15\":1}}],[\"因为我们只要完成二个圆盘的汉诺塔问题\",{\"1\":{\"12\":1}}],[\"因为初始化\",{\"1\":{\"9\":1}}],[\"因此栈可以视为一种受限制的数组或链表\",{\"1\":{\"62\":1}}],[\"因此我们只能在栈顶添加或删除元素\",{\"1\":{\"62\":1}}],[\"因此我们可以排除这种情况\",{\"1\":{\"15\":2}}],[\"因此在相同数据量下\",{\"1\":{\"40\":1}}],[\"因此不知不觉就更改了其他变量的值\",{\"1\":{\"21\":1}}],[\"因此\",{\"1\":{\"9\":1,\"15\":6,\"21\":1,\"42\":1,\"95\":1,\"96\":1}}],[\"<button\",{\"1\":{\"106\":1}}],[\"<div\",{\"1\":{\"105\":1}}],[\"<div>\",{\"1\":{\"105\":2}}],[\"<input\",{\"1\":{\"104\":1,\"108\":1}}],[\"<input>\",{\"1\":{\"104\":1}}],[\"<stdlib\",{\"1\":{\"47\":1,\"55\":1,\"56\":1,\"63\":1,\"64\":1}}],[\"<stddef\",{\"1\":{\"40\":2,\"47\":1}}],[\"<stdio\",{\"1\":{\"9\":1,\"12\":2,\"15\":3,\"22\":1,\"47\":1,\"63\":1,\"64\":1,\"75\":1}}],[\"<<\",{\"1\":{\"15\":3}}],[\"<\",{\"1\":{\"9\":2,\"15\":8,\"47\":1,\"82\":1,\"109\":1}}],[\"<=\",{\"1\":{\"9\":2,\"12\":1,\"15\":2,\"64\":1}}],[\"行\",{\"1\":{\"9\":1}}],[\"行由于\",{\"1\":{\"9\":1}}],[\"60\",{\"1\":{\"96\":7,\"97\":3}}],[\"63\",{\"1\":{\"79\":1}}],[\"64\",{\"1\":{\"34\":1,\"35\":1,\"36\":1}}],[\"6\",{\"1\":{\"9\":2,\"15\":3,\"20\":9,\"22\":1,\"47\":1}}],[\"值得注意的是在\",{\"1\":{\"96\":1,\"105\":1}}],[\"值得注意的是\",{\"1\":{\"94\":1,\"106\":1}}],[\"值得注意的是标准\",{\"1\":{\"75\":1}}],[\"值感兴趣的话可以试着去搜索一下\",{\"1\":{\"75\":1}}],[\"值一般代表着成功的意思\",{\"1\":{\"75\":1}}],[\"值\",{\"1\":{\"9\":1,\"75\":1}}],[\"我们也可以手动去实现一个深拷贝\",{\"1\":{\"97\":1}}],[\"我们也向\",{\"1\":{\"75\":1}}],[\"我们修改了原对象中嵌套的数组\",{\"1\":{\"96\":1}}],[\"我们只需将元素插入链表头部\",{\"1\":{\"63\":1}}],[\"我们只需要检查到它的平方根就可以确定它是否为素数\",{\"1\":{\"15\":1}}],[\"我们只需要检查到\",{\"1\":{\"15\":1}}],[\"我们来尝试自己实现一个栈\",{\"1\":{\"62\":1}}],[\"我们把堆叠元素的顶部称为\",{\"1\":{\"61\":1}}],[\"我们需要一种数据结构\",{\"1\":{\"54\":1}}],[\"我们将盘子替换为各种类型的元素\",{\"1\":{\"60\":1}}],[\"我们将队列头部称为\",{\"1\":{\"53\":1}}],[\"我们将首个节点称为头节点\",{\"1\":{\"48\":1}}],[\"我们将数组下标做为要表示的数字\",{\"1\":{\"15\":1}}],[\"我们知道\",{\"1\":{\"39\":1}}],[\"我们仅使用了数字\",{\"1\":{\"15\":1}}],[\"我们不需要继续检查大于\",{\"1\":{\"15\":1}}],[\"我们可以让程序完成各种复杂的任务\",{\"1\":{\"75\":1}}],[\"我们可以定义各种变量\",{\"1\":{\"75\":1}}],[\"我们可以\",{\"1\":{\"62\":1}}],[\"我们可以将数组的尾部作为栈顶\",{\"1\":{\"64\":1}}],[\"我们可以将栈类比为桌面上的一摞盘子\",{\"1\":{\"60\":1}}],[\"我们可以将链表的头节点视为栈顶\",{\"1\":{\"63\":1}}],[\"我们可以将链表的\",{\"1\":{\"55\":1}}],[\"我们可以使用一个变量\",{\"1\":{\"56\":1}}],[\"我们可以使用递归的方法来解决这个问题\",{\"1\":{\"12\":1}}],[\"我们可以采用以下巧妙方法来避免这个问题\",{\"1\":{\"56\":1}}],[\"我们可以通过以下步骤来证明其中一个因数必然小于或等于\",{\"1\":{\"15\":1}}],[\"我们可以从\",{\"1\":{\"15\":1}}],[\"我们通常从\",{\"1\":{\"15\":1}}],[\"我们通常采用公式\",{\"1\":{\"9\":1}}],[\"我们从\",{\"1\":{\"15\":2}}],[\"我们定义了一个名为\",{\"1\":{\"15\":1}}],[\"我们简单计算一下\",{\"1\":{\"12\":1}}],[\"我们是否可以继续简化这两层的汉诺塔问题\",{\"1\":{\"12\":1}}],[\"我们现在将拥有三个圆盘的汉诺塔问题简化成拥有两个圆盘的汉诺塔问题\",{\"1\":{\"12\":1}}],[\"我内心无比欣慰\",{\"1\":{\"6\":1}}],[\"类型以外\",{\"1\":{\"94\":1}}],[\"类型的\",{\"1\":{\"102\":1}}],[\"类型的数据所占有的空间为\",{\"1\":{\"15\":1}}],[\"类型的取值范围\",{\"1\":{\"9\":1}}],[\"类型\",{\"0\":{\"100\":1},\"1\":{\"9\":1,\"19\":1}}],[\"72\",{\"1\":{\"109\":1}}],[\"7\",{\"1\":{\"9\":2,\"12\":1,\"15\":1,\"20\":1,\"47\":1,\"109\":1}}],[\"这关乎着\",{\"1\":{\"108\":1}}],[\"这意味着即使原对象中的嵌套对象或数组发生了变化\",{\"1\":{\"97\":1}}],[\"这意味着变量可以在程序执行期间更改其数据类型\",{\"1\":{\"92\":1}}],[\"这主要是因为在引用类型中\",{\"1\":{\"95\":1}}],[\"这有助于编写无副作用的纯函数\",{\"1\":{\"93\":1}}],[\"这导致声明变量以后\",{\"1\":{\"81\":1}}],[\"这些对象用于读取和写入缓冲区内容\",{\"1\":{\"109\":1}}],[\"这些保留字也不能用作变量名\",{\"1\":{\"79\":1}}],[\"这些品质将伴随他们一生\",{\"1\":{\"6\":1}}],[\"这里就不做过多陈述\",{\"1\":{\"75\":1}}],[\"这里强调几个要点\",{\"1\":{\"9\":1}}],[\"这也是我们最常用到的\",{\"1\":{\"107\":1}}],[\"这也是注释\",{\"1\":{\"72\":1}}],[\"这也是为什么在抽象过程中\",{\"1\":{\"12\":1}}],[\"这种方法有一些局限性\",{\"1\":{\"97\":1}}],[\"这种注释只能是单行\",{\"1\":{\"72\":1}}],[\"这种注释可以插在行内\",{\"1\":{\"72\":1}}],[\"这种节点插入方法被称为\",{\"1\":{\"63\":1}}],[\"这是创建了两个不同的\",{\"1\":{\"93\":1}}],[\"这是因为我们相当于重写了一个数组\",{\"1\":{\"96\":1}}],[\"这是因为当我们想从新给基础类型赋值来\",{\"1\":{\"93\":1}}],[\"这是因为如果一个整数不是素数\",{\"1\":{\"15\":2}}],[\"这是\",{\"1\":{\"72\":1}}],[\"这是一行注释\",{\"1\":{\"72\":2}}],[\"这个变量是不存在的\",{\"1\":{\"82\":1}}],[\"这个字符串的格式是\",{\"1\":{\"75\":1}}],[\"这个算术计算的结果的表达式\",{\"1\":{\"69\":1}}],[\"这个公式计算出的\",{\"1\":{\"56\":1}}],[\"这个位置是不存在的\",{\"1\":{\"21\":1}}],[\"这会导致出队操作效率较低\",{\"1\":{\"56\":1}}],[\"这样也可以实现深拷贝\",{\"1\":{\"97\":1}}],[\"这样\",{\"1\":{\"95\":1}}],[\"这样的好处在于\",{\"1\":{\"93\":1}}],[\"这样做的原因主要是为了更好地管理链表的状态和提供更清晰的数据封装\",{\"1\":{\"40\":1}}],[\"这样我们最终将一个大的问题分解成多个小的问题\",{\"1\":{\"12\":1}}],[\"这两部分信息组成的存储结构称之为链表的\",{\"1\":{\"39\":1}}],[\"这两个子节点分别称为左子节点和右子节点\",{\"1\":{\"25\":1}}],[\"这很容易引发错误\",{\"1\":{\"21\":1}}],[\"这时就形成了多层的块作用域\",{\"1\":{\"82\":1}}],[\"这时就要依靠分号判断语句在哪一行结束\",{\"1\":{\"68\":1}}],[\"这时将根据大括号里面的值的数量\",{\"1\":{\"20\":1}}],[\"这时我们可以发现\",{\"1\":{\"12\":1}}],[\"这与题目条件不符\",{\"1\":{\"15\":2}}],[\"如触点事件或指针事件更或者是放置文件时将文件显示在浏览器窗口中\",{\"1\":{\"105\":1}}],[\"如上所示\",{\"1\":{\"81\":1}}],[\"如整数\",{\"1\":{\"60\":1}}],[\"如完全二叉树\",{\"1\":{\"25\":1}}],[\"如\",{\"1\":{\"9\":1,\"15\":1,\"25\":1}}],[\"如果此时打印\",{\"1\":{\"108\":1}}],[\"如果重写的话\",{\"1\":{\"96\":1}}],[\"如果修改了原对象中的嵌套对象或数组\",{\"1\":{\"96\":1}}],[\"如果你需要区分具体的引用类型\",{\"1\":{\"94\":1}}],[\"如果内层的变量与外层同名\",{\"1\":{\"82\":1}}],[\"如果几个变量具有相同类型\",{\"1\":{\"80\":1}}],[\"如果一个变量没有声明就直接使用会报错\",{\"1\":{\"80\":1}}],[\"如果一个整数\",{\"1\":{\"15\":1}}],[\"如果运行环境不支持程序名称\",{\"1\":{\"75\":1}}],[\"如果对其他非\",{\"1\":{\"75\":1}}],[\"如果语法单位不用空格就能区分\",{\"1\":{\"71\":1}}],[\"如果想取出底部的盘子\",{\"1\":{\"60\":1}}],[\"如果想要移动\",{\"1\":{\"12\":1}}],[\"如果要删除的节点是链表中第一个节点\",{\"1\":{\"45\":1,\"47\":1}}],[\"如果要将整个数组的每一个元素都设置为零\",{\"1\":{\"20\":1}}],[\"如果没有找到\",{\"1\":{\"44\":1,\"47\":1}}],[\"如果没有则返回\",{\"1\":{\"44\":1,\"47\":1}}],[\"如果失败\",{\"1\":{\"42\":1}}],[\"如果分配内存成功\",{\"1\":{\"42\":1}}],[\"如果链表为空\",{\"1\":{\"40\":1,\"43\":1,\"45\":1,\"47\":2}}],[\"如果同时采用指定位置的赋值\",{\"1\":{\"20\":1}}],[\"如果大括号里面的值\",{\"1\":{\"20\":1}}],[\"如果\",{\"1\":{\"15\":2,\"75\":2}}],[\"如果我们令单向链表的尾节点指向头节点\",{\"1\":{\"48\":1}}],[\"如果我们可以将每一个二进制位都利用起来\",{\"1\":{\"15\":1}}],[\"如果我们没有找到这样的因数\",{\"1\":{\"15\":1}}],[\"如果我们发现\",{\"1\":{\"15\":1}}],[\"如果该整数可以被任何一个小于它的正整数整除\",{\"1\":{\"15\":1}}],[\"如果输入的整数小于等于\",{\"1\":{\"15\":1}}],[\"如果将若干个圆盘从起始柱子\",{\"1\":{\"12\":1}}],[\"如果查找范围为空\",{\"1\":{\"9\":1}}],[\"如果目标值等于中间值\",{\"1\":{\"9\":1}}],[\"如果目标值比中间值大\",{\"1\":{\"9\":2}}],[\"如果目标值比中间值小\",{\"1\":{\"9\":2}}],[\"如果目标值存在返回下标\",{\"1\":{\"9\":1}}],[\"如果相等\",{\"1\":{\"9\":1}}],[\">点击上传文件<\",{\"1\":{\"106\":1}}],[\"><\",{\"1\":{\"105\":1}}],[\">array\",{\"1\":{\"64\":4}}],[\">top++\",{\"1\":{\"64\":1}}],[\">top\",{\"1\":{\"63\":6,\"64\":6}}],[\">nums\",{\"1\":{\"56\":4}}],[\">next\",{\"1\":{\"42\":1,\"43\":3,\"44\":1,\"45\":8,\"46\":1,\"47\":14,\"55\":3,\"63\":2}}],[\">capacity\",{\"1\":{\"64\":3}}],[\">cap\",{\"1\":{\"56\":5}}],[\">data\",{\"1\":{\"55\":2}}],[\">size++\",{\"1\":{\"55\":1,\"56\":1,\"63\":1}}],[\">size\",{\"1\":{\"55\":3,\"56\":5,\"63\":3}}],[\">rear\",{\"1\":{\"55\":4}}],[\">right\",{\"1\":{\"27\":1,\"28\":1,\"30\":2,\"31\":2,\"32\":2,\"34\":1,\"35\":1,\"36\":1}}],[\">front\",{\"1\":{\"55\":6,\"56\":5}}],[\">head\",{\"1\":{\"43\":3,\"45\":4,\"47\":7}}],[\">val\",{\"1\":{\"34\":1,\"35\":1,\"36\":1}}],[\">value\",{\"1\":{\"27\":1,\"28\":2,\"30\":1,\"31\":1,\"32\":1,\"42\":1,\"44\":1,\"46\":1,\"47\":3,\"63\":2}}],[\">=\",{\"1\":{\"34\":1,\"35\":1,\"36\":1}}],[\">left\",{\"1\":{\"27\":1,\"28\":1,\"30\":2,\"31\":2,\"32\":2,\"34\":1,\"35\":1,\"36\":1}}],[\">\",{\"1\":{\"9\":3,\"12\":1,\"28\":1,\"46\":1,\"47\":1,\"104\":1,\"108\":1}}],[\"即代码块内部还有代码块\",{\"1\":{\"82\":1}}],[\"即前面介绍的普通链表\",{\"1\":{\"48\":1}}],[\"即最后一个元素的索引\",{\"1\":{\"9\":1}}],[\"即\",{\"1\":{\"9\":3}}],[\"返回文件错误指示器的状态\",{\"1\":{\"87\":1}}],[\"返回的指针类型是通用指针类型\",{\"1\":{\"42\":1}}],[\"返回可用内存的起始地址\",{\"1\":{\"42\":1}}],[\"返回\",{\"1\":{\"9\":1}}],[\"200px\",{\"1\":{\"105\":2}}],[\"20\",{\"1\":{\"82\":2}}],[\"2024\",{\"1\":{\"2\":1}}],[\"22\",{\"1\":{\"20\":5}}],[\"23\",{\"1\":{\"15\":1}}],[\"2\",{\"1\":{\"9\":4,\"12\":5,\"15\":23,\"20\":14,\"22\":1,\"40\":1,\"47\":1,\"63\":1,\"69\":2,\"81\":5,\"102\":1,\"108\":1}}],[\"+=\",{\"1\":{\"15\":1}}],[\"+\",{\"1\":{\"9\":6,\"12\":1,\"15\":2,\"19\":2,\"56\":3,\"69\":3,\"79\":1}}],[\"=>\",{\"1\":{\"104\":1,\"105\":2,\"106\":1,\"107\":2,\"108\":2}}],[\"===\",{\"1\":{\"97\":1}}],[\"==\",{\"1\":{\"9\":1,\"12\":2,\"15\":7,\"28\":1,\"30\":1,\"31\":1,\"32\":1,\"36\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":3,\"47\":6,\"55\":4,\"56\":3,\"63\":1,\"64\":3,\"82\":1,\"97\":1}}],[\"=\",{\"1\":{\"9\":13,\"12\":4,\"15\":36,\"20\":28,\"22\":3,\"27\":5,\"28\":4,\"30\":2,\"31\":2,\"32\":2,\"34\":8,\"35\":8,\"36\":11,\"40\":3,\"42\":3,\"43\":5,\"44\":2,\"45\":7,\"46\":2,\"47\":23,\"55\":16,\"56\":11,\"63\":12,\"64\":9,\"68\":3,\"69\":1,\"70\":1,\"71\":3,\"72\":2,\"75\":1,\"81\":14,\"82\":6,\"93\":2,\"94\":1,\"95\":3,\"96\":8,\"97\":4,\"104\":2,\"105\":3,\"106\":4,\"108\":5,\"109\":7}}],[\"和引用数据类型\",{\"1\":{\"92\":1}}],[\"和前驱节点\",{\"1\":{\"48\":1}}],[\"和它们自身整除\",{\"1\":{\"15\":1}}],[\"和它自己\",{\"1\":{\"15\":1}}],[\"和它本身以外\",{\"1\":{\"15\":1}}],[\"和\",{\"1\":{\"9\":2,\"15\":4,\"55\":2,\"75\":1,\"81\":1,\"102\":1}}],[\"和一个目标值\",{\"1\":{\"9\":1}}],[\"则直接默认执行了\",{\"1\":{\"75\":1}}],[\"则需要先将上面的盘子依次移走\",{\"1\":{\"60\":1}}],[\"则得到一个环形链表\",{\"1\":{\"48\":1}}],[\"则无需删除\",{\"1\":{\"45\":1,\"47\":1}}],[\"则将节点设为头节点\",{\"1\":{\"43\":1,\"47\":1}}],[\"则返回\",{\"1\":{\"42\":1,\"44\":1,\"47\":1}}],[\"则头结点不存在\",{\"1\":{\"40\":1}}],[\"则表示数字\",{\"1\":{\"15\":1}}],[\"则不是素数\",{\"1\":{\"15\":2}}],[\"则说明目标值不存在于数组中\",{\"1\":{\"9\":1}}],[\"则在右半部分继续查找\",{\"1\":{\"9\":2}}],[\"则在左半部分继续查找\",{\"1\":{\"9\":2}}],[\"则查找成功\",{\"1\":{\"9\":2}}],[\"1px\",{\"1\":{\"105\":1}}],[\"18\",{\"1\":{\"95\":3}}],[\"122\",{\"1\":{\"20\":6}}],[\"12\",{\"1\":{\"20\":6,\"82\":4}}],[\"108\",{\"1\":{\"109\":3}}],[\"101\",{\"1\":{\"109\":1}}],[\"100\",{\"1\":{\"19\":3,\"20\":1,\"21\":2,\"96\":5,\"105\":1,\"109\":1}}],[\"1000\",{\"1\":{\"15\":1}}],[\"10\",{\"1\":{\"15\":9,\"20\":1,\"47\":1,\"64\":2,\"82\":3}}],[\"19\",{\"1\":{\"15\":1}}],[\"17\",{\"1\":{\"15\":1}}],[\"13\",{\"1\":{\"15\":1}}],[\"114\",{\"1\":{\"109\":1}}],[\"119\",{\"1\":{\"109\":1}}],[\"111\",{\"1\":{\"109\":2}}],[\"11\",{\"1\":{\"15\":1,\"20\":3}}],[\"1\",{\"1\":{\"9\":12,\"12\":21,\"15\":23,\"19\":2,\"20\":11,\"22\":1,\"26\":1,\"34\":1,\"35\":1,\"36\":3,\"47\":1,\"56\":8,\"57\":1,\"63\":1,\"64\":3,\"68\":5,\"69\":3,\"70\":1,\"71\":2,\"72\":2,\"75\":4,\"81\":2,\"82\":1,\"93\":1,\"101\":1,\"108\":1}}],[\"写一个函数搜索\",{\"1\":{\"9\":1}}],[\"升序\",{\"1\":{\"9\":1}}],[\"name\",{\"1\":{\"94\":1,\"95\":4,\"96\":8,\"97\":4}}],[\"new\",{\"1\":{\"42\":5,\"47\":5,\"108\":2,\"109\":4}}],[\"next\",{\"1\":{\"40\":2,\"45\":1,\"47\":2,\"48\":1,\"55\":1,\"63\":1}}],[\"null\",{\"1\":{\"27\":3,\"28\":1,\"30\":3,\"31\":3,\"32\":3,\"34\":3,\"35\":3,\"36\":4,\"40\":3,\"42\":4,\"43\":2,\"44\":4,\"45\":4,\"46\":2,\"47\":16,\"48\":1,\"55\":9,\"56\":3,\"63\":3,\"64\":3,\"94\":1,\"97\":1}}],[\"numbers\",{\"1\":{\"15\":14}}],[\"number\",{\"1\":{\"15\":8,\"93\":1}}],[\"num\",{\"1\":{\"12\":3,\"81\":5}}],[\"nums\",{\"1\":{\"9\":6,\"56\":1}}],[\"node\",{\"1\":{\"26\":5,\"27\":10,\"28\":3,\"30\":1,\"31\":1,\"32\":1,\"34\":2,\"35\":2,\"36\":4,\"40\":11,\"42\":10,\"43\":6,\"44\":2,\"45\":12,\"47\":57,\"48\":4,\"55\":25,\"63\":17,\"102\":1}}],[\"not\",{\"1\":{\"9\":1,\"15\":1}}],[\"n\",{\"1\":{\"9\":3,\"12\":27,\"15\":35,\"22\":1,\"42\":1,\"46\":1,\"47\":2,\"55\":3,\"56\":3,\"57\":3,\"63\":2,\"64\":3,\"75\":1,\"81\":3,\"82\":8}}],[\"给定一个拥有\",{\"1\":{\"9\":1}}],[\"成为他们人生路上坚实的基石\",{\"1\":{\"6\":1}}],[\"孩子们不仅学会了如何操控计算机执行任务\",{\"1\":{\"6\":1}}],[\"期待收获科技树上的累累硕果\",{\"1\":{\"6\":1}}],[\"他们用稚嫩的小手敲击键盘\",{\"1\":{\"6\":1}}],[\"false\",{\"1\":{\"106\":1}}],[\"failed\",{\"1\":{\"9\":1,\"42\":1,\"47\":1,\"55\":1}}],[\"filehandle\",{\"1\":{\"106\":2}}],[\"files\",{\"1\":{\"104\":1,\"105\":1,\"108\":1}}],[\"filelist\",{\"1\":{\"104\":1}}],[\"filereader\",{\"0\":{\"108\":1},\"1\":{\"102\":1,\"108\":15,\"109\":1}}],[\"file\",{\"0\":{\"102\":1},\"1\":{\"102\":7,\"104\":1,\"108\":5}}],[\"finish\",{\"1\":{\"28\":2}}],[\"find\",{\"1\":{\"28\":1}}],[\"function\",{\"1\":{\"97\":2}}],[\"full\",{\"1\":{\"2\":1,\"56\":1,\"64\":1}}],[\"fetch\",{\"1\":{\"107\":2}}],[\"ferror\",{\"1\":{\"87\":1}}],[\"feof\",{\"1\":{\"87\":1}}],[\"ftell\",{\"1\":{\"87\":1}}],[\"fsetpos\",{\"1\":{\"87\":1}}],[\"fseek\",{\"1\":{\"87\":1}}],[\"fscanf\",{\"1\":{\"87\":1}}],[\"fwrite\",{\"1\":{\"87\":1}}],[\"fgetpos\",{\"1\":{\"87\":1}}],[\"fgets\",{\"1\":{\"87\":1}}],[\"fgetc\",{\"1\":{\"87\":1}}],[\"fputs\",{\"1\":{\"87\":1}}],[\"fputc\",{\"1\":{\"87\":1}}],[\"fprintf\",{\"1\":{\"87\":1}}],[\"fclose\",{\"1\":{\"87\":1}}],[\"float\",{\"1\":{\"79\":1}}],[\"fopen\",{\"1\":{\"87\":1}}],[\"for\",{\"1\":{\"12\":1,\"15\":9,\"47\":1,\"64\":1,\"79\":1,\"82\":2,\"97\":1,\"109\":1}}],[\"foundation\",{\"0\":{\"114\":1}}],[\"found\",{\"1\":{\"9\":1}}],[\"fr\",{\"1\":{\"108\":5}}],[\"fread\",{\"1\":{\"87\":1}}],[\"freopen\",{\"1\":{\"87\":1}}],[\"free\",{\"1\":{\"45\":2,\"47\":2,\"55\":1,\"63\":1}}],[\"front\",{\"1\":{\"55\":1,\"56\":6}}],[\"from\",{\"1\":{\"12\":2}}],[\"frameworks\",{\"0\":{\"4\":1}}],[\"f\",{\"1\":{\"12\":4}}],[\"algorithm\",{\"0\":{\"112\":1}}],[\"allocate\",{\"1\":{\"55\":1}}],[\"allocation\",{\"1\":{\"42\":1,\"47\":1}}],[\"assets\",{\"1\":{\"107\":1}}],[\"async\",{\"1\":{\"106\":1,\"107\":1}}],[\"axios\",{\"1\":{\"107\":1}}],[\"await\",{\"1\":{\"106\":1,\"107\":1}}],[\"accept\",{\"1\":{\"106\":1}}],[\"api\",{\"0\":{\"106\":1},\"1\":{\"106\":1,\"108\":1}}],[\"append\",{\"1\":{\"43\":1,\"47\":2}}],[\"age\",{\"1\":{\"95\":3,\"97\":2}}],[\"auto\",{\"1\":{\"79\":1}}],[\"arr\",{\"1\":{\"94\":3}}],[\"arraybuffer\",{\"0\":{\"109\":1},\"1\":{\"108\":1,\"109\":5}}],[\"array\",{\"1\":{\"19\":3,\"20\":16,\"21\":3,\"22\":3,\"64\":1,\"94\":2,\"97\":1}}],[\"arguments\",{\"1\":{\"75\":1}}],[\"argument\",{\"1\":{\"75\":1}}],[\"argv\",{\"1\":{\"75\":9}}],[\"argc\",{\"1\":{\"75\":11}}],[\"avl\",{\"1\":{\"25\":1}}],[\"a\",{\"1\":{\"2\":1,\"12\":21,\"15\":11,\"20\":2,\"82\":4}}],[\"and\",{\"0\":{\"4\":1},\"1\":{\"1\":1,\"2\":2}}],[\"gif\",{\"1\":{\"106\":1}}],[\"github\",{\"0\":{\"5\":1}}],[\"getelementbyid\",{\"1\":{\"104\":1,\"105\":1,\"106\":1,\"108\":1}}],[\"getenv\",{\"1\":{\"75\":1}}],[\"getc\",{\"1\":{\"87\":1}}],[\"getchar\",{\"1\":{\"86\":1}}],[\"gets\",{\"1\":{\"86\":1}}],[\"group\",{\"1\":{\"2\":1}}],[\"goto\",{\"1\":{\"28\":1,\"79\":1}}],[\"goals\",{\"1\":{\"2\":1}}],[\"go\",{\"1\":{\"2\":1}}],[\"obj\",{\"1\":{\"97\":8}}],[\"objb\",{\"1\":{\"95\":2,\"96\":4,\"97\":2}}],[\"obja\",{\"1\":{\"95\":4,\"96\":10,\"97\":3}}],[\"object\",{\"1\":{\"94\":2,\"97\":1,\"101\":1}}],[\"o\",{\"0\":{\"86\":1}}],[\"output\",{\"1\":{\"85\":1}}],[\"order\",{\"1\":{\"30\":3,\"31\":3,\"32\":3,\"34\":1,\"35\":1,\"36\":1}}],[\"offset\",{\"1\":{\"15\":6}}],[\"overview\",{\"0\":{\"5\":1}}],[\"opensource\",{\"1\":{\"2\":1}}],[\"onprogress\",{\"1\":{\"108\":1}}],[\"onloadend\",{\"1\":{\"108\":1}}],[\"onloadstart\",{\"1\":{\"108\":1}}],[\"onload\",{\"1\":{\"108\":3}}],[\"onerror\",{\"1\":{\"108\":1}}],[\"onabort\",{\"1\":{\"108\":1}}],[\"onclick\",{\"1\":{\"106\":1}}],[\"onchange\",{\"1\":{\"104\":2,\"108\":1}}],[\"ondrop\",{\"1\":{\"105\":4}}],[\"ondragover\",{\"1\":{\"105\":4}}],[\"on\",{\"1\":{\"2\":2}}],[\"clearerr\",{\"1\":{\"87\":1}}],[\"c99\",{\"1\":{\"72\":1,\"75\":1}}],[\"catch\",{\"1\":{\"107\":1}}],[\"cake\",{\"1\":{\"104\":2,\"105\":3,\"106\":2,\"107\":1,\"108\":2}}],[\"case\",{\"1\":{\"79\":1}}],[\"capacity\",{\"1\":{\"64\":1}}],[\"cap\",{\"1\":{\"56\":3,\"64\":2}}],[\"calculate\",{\"1\":{\"12\":3}}],[\"createimagebitmap\",{\"1\":{\"102\":1}}],[\"createobjecturl\",{\"1\":{\"102\":1}}],[\"create\",{\"1\":{\"27\":1,\"42\":1,\"47\":2,\"55\":3,\"56\":1,\"63\":2,\"64\":2}}],[\"char\",{\"1\":{\"12\":5,\"75\":4,\"79\":1}}],[\"copy\",{\"1\":{\"97\":3}}],[\"count++\",{\"1\":{\"15\":2}}],[\"count\",{\"1\":{\"15\":6,\"75\":1}}],[\"context\",{\"1\":{\"102\":1}}],[\"continue\",{\"1\":{\"15\":4,\"79\":2}}],[\"console\",{\"1\":{\"94\":2,\"95\":2,\"96\":4,\"97\":2,\"104\":1,\"105\":1,\"106\":1,\"107\":2,\"108\":2,\"109\":1}}],[\"constructor\",{\"1\":{\"94\":1}}],[\"const\",{\"1\":{\"9\":3,\"79\":1,\"104\":1,\"105\":1,\"106\":3,\"108\":3,\"109\":5}}],[\"code\",{\"1\":{\"9\":1,\"15\":1,\"19\":1,\"26\":1,\"93\":1,\"96\":1}}],[\"collaborate\",{\"1\":{\"2\":1}}],[\"c\",{\"1\":{\"12\":20,\"15\":1,\"18\":1,\"20\":2,\"25\":2,\"51\":1,\"68\":2,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"75\":9,\"79\":4,\"80\":1,\"81\":3,\"82\":1},\"2\":{\"7\":1,\"8\":1,\"10\":1,\"11\":1,\"13\":1,\"14\":1,\"16\":1,\"17\":1,\"23\":1,\"24\":1,\"37\":1,\"38\":1,\"49\":1,\"50\":1,\"58\":1,\"59\":1,\"65\":1,\"66\":1,\"73\":1,\"74\":1,\"76\":1,\"77\":1,\"83\":1,\"84\":1,\"89\":1,\"90\":1}}],[\"currently\",{\"1\":{\"2\":2}}],[\"current\",{\"0\":{\"2\":1},\"1\":{\"28\":9}}],[\"language\",{\"0\":{\"114\":1}}],[\"languages\",{\"0\":{\"3\":1}}],[\"large\",{\"1\":{\"101\":1}}],[\"last\",{\"1\":{\"43\":5,\"45\":6,\"47\":11}}],[\"library\",{\"0\":{\"115\":1}}],[\"li\",{\"1\":{\"95\":1,\"96\":4,\"97\":3}}],[\"linux\",{\"1\":{\"75\":1}}],[\"line\",{\"1\":{\"15\":4}}],[\"list\",{\"1\":{\"40\":4,\"43\":5,\"44\":7,\"45\":6,\"46\":7,\"47\":55}}],[\"let\",{\"1\":{\"93\":1,\"94\":1,\"95\":2,\"96\":4,\"97\":4,\"109\":1}}],[\"length\",{\"1\":{\"9\":2,\"109\":2}}],[\"len\",{\"1\":{\"9\":4,\"15\":3,\"22\":3}}],[\"left\",{\"1\":{\"9\":15,\"26\":1}}],[\"learning\",{\"1\":{\"2\":1}}],[\"learn\",{\"1\":{\"1\":1,\"2\":1}}],[\"loading\",{\"1\":{\"108\":1}}],[\"log\",{\"1\":{\"94\":2,\"95\":2,\"96\":4,\"97\":2,\"104\":1,\"105\":1,\"106\":1,\"107\":2,\"108\":2,\"109\":1}}],[\"long\",{\"1\":{\"36\":3,\"79\":1}}],[\"lot\",{\"1\":{\"2\":1}}],[\"looking\",{\"1\":{\"2\":1}}],[\"🥅\",{\"1\":{\"2\":1}}],[\"📚\",{\"1\":{\"2\":1}}],[\"🔭\",{\"1\":{\"2\":1}}],[\"wrapbuffer\",{\"1\":{\"109\":2}}],[\"width\",{\"1\":{\"80\":2,\"105\":1}}],[\"window\",{\"1\":{\"75\":1,\"94\":2,\"95\":2,\"96\":4,\"97\":2,\"104\":2,\"105\":2,\"106\":5,\"107\":2,\"108\":3,\"109\":1}}],[\"with\",{\"1\":{\"34\":1,\"35\":1,\"36\":1}}],[\"world\",{\"1\":{\"72\":1,\"75\":1}}],[\"working\",{\"1\":{\"2\":1}}],[\"while\",{\"1\":{\"9\":2,\"28\":1,\"34\":1,\"35\":1,\"36\":1,\"43\":1,\"44\":1,\"45\":1,\"46\":1,\"47\":4,\"79\":1}}],[\"web\",{\"1\":{\"2\":1,\"108\":1}}],[\"then\",{\"1\":{\"107\":1}}],[\"there\",{\"0\":{\"1\":1}}],[\"this\",{\"1\":{\"97\":1}}],[\"training\",{\"0\":{\"112\":1}}],[\"true\",{\"1\":{\"94\":1,\"106\":1}}],[\"trying\",{\"1\":{\"1\":1}}],[\"typedarrray\",{\"1\":{\"109\":3}}],[\"typedef\",{\"1\":{\"26\":1,\"40\":3,\"47\":2,\"48\":1,\"55\":2,\"56\":1,\"63\":2,\"64\":1,\"79\":1}}],[\"typescript\",{\"1\":{\"109\":1}}],[\"types\",{\"1\":{\"106\":1}}],[\"type=\",{\"1\":{\"104\":1,\"108\":1}}],[\"type\",{\"1\":{\"104\":1}}],[\"typeof\",{\"1\":{\"94\":1,\"97\":1}}],[\"temp\",{\"1\":{\"55\":4}}],[\"t\",{\"1\":{\"15\":2,\"26\":1,\"27\":1}}],[\"target\",{\"1\":{\"9\":6,\"104\":1,\"108\":2}}],[\"top++\",{\"1\":{\"34\":1,\"35\":1,\"36\":2}}],[\"top\",{\"1\":{\"34\":5,\"35\":5,\"36\":6,\"63\":1,\"64\":1}}],[\"tools\",{\"0\":{\"4\":1}}],[\"to\",{\"1\":{\"1\":1,\"2\":1,\"12\":2,\"55\":1}}],[\"multiple=\",{\"1\":{\"104\":1}}],[\"multiple\",{\"1\":{\"104\":2,\"106\":1}}],[\"ming\",{\"1\":{\"95\":1,\"96\":4,\"97\":3}}],[\"mian\",{\"1\":{\"75\":1}}],[\"mid\",{\"1\":{\"9\":13}}],[\"memory\",{\"1\":{\"42\":1,\"47\":1}}],[\"message\",{\"1\":{\"12\":3}}],[\"malloc\",{\"1\":{\"27\":1,\"42\":6,\"45\":1,\"47\":2,\"55\":2,\"56\":2,\"63\":2,\"64\":2}}],[\"main\",{\"0\":{\"75\":1},\"1\":{\"9\":1,\"12\":2,\"15\":3,\"22\":1,\"40\":2,\"47\":1,\"56\":1,\"63\":1,\"64\":1,\"75\":19,\"82\":2}}],[\"mynum\",{\"1\":{\"93\":4}}],[\"my\",{\"0\":{\"2\":1}}],[\"more\",{\"1\":{\"1\":1}}],[\"m\",{\"0\":{\"1\":1},\"1\":{\"1\":1,\"2\":3,\"81\":3}}],[\"image\",{\"1\":{\"106\":1,\"107\":1}}],[\"images\",{\"1\":{\"106\":1}}],[\"id=\",{\"1\":{\"104\":1,\"105\":1,\"106\":1,\"108\":1}}],[\"isarray\",{\"1\":{\"97\":1}}],[\"is\",{\"1\":{\"15\":7,\"55\":1,\"56\":2,\"63\":1,\"64\":2}}],[\"i++\",{\"1\":{\"12\":1,\"15\":7,\"47\":1,\"64\":1,\"82\":1,\"109\":1}}],[\"if\",{\"1\":{\"9\":4,\"12\":2,\"15\":9,\"27\":1,\"28\":2,\"30\":3,\"31\":3,\"32\":3,\"34\":1,\"35\":1,\"36\":2,\"42\":1,\"43\":1,\"44\":1,\"45\":3,\"47\":6,\"55\":5,\"56\":4,\"63\":3,\"64\":4,\"79\":1,\"82\":2,\"97\":2}}],[\"instanceof\",{\"1\":{\"94\":2}}],[\"input\",{\"0\":{\"104\":1},\"1\":{\"85\":1,\"104\":1}}],[\"inline\",{\"1\":{\"79\":1}}],[\"in\",{\"1\":{\"31\":3,\"35\":1,\"97\":1}}],[\"index\",{\"1\":{\"15\":6}}],[\"include\",{\"1\":{\"9\":1,\"12\":2,\"15\":3,\"22\":1,\"40\":2,\"47\":3,\"55\":1,\"56\":1,\"63\":2,\"64\":2,\"75\":1}}],[\"int8array\",{\"1\":{\"109\":1}}],[\"int\",{\"1\":{\"9\":13,\"12\":7,\"15\":30,\"19\":2,\"20\":16,\"22\":3,\"26\":1,\"27\":1,\"28\":1,\"34\":1,\"35\":1,\"36\":1,\"40\":5,\"42\":1,\"44\":1,\"47\":6,\"48\":1,\"55\":4,\"56\":11,\"63\":4,\"64\":10,\"68\":3,\"69\":1,\"70\":1,\"71\":3,\"72\":2,\"75\":6,\"79\":2,\"80\":5,\"81\":5,\"82\":7}}],[\"i\",{\"0\":{\"1\":1,\"86\":1},\"1\":{\"1\":1,\"2\":3,\"12\":4,\"15\":30,\"47\":3,\"57\":1,\"64\":3,\"82\":11,\"109\":4}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
