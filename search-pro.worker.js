const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,u=Array.from(n.keys());this.set=t,this._type=s,this._path=u.length>0?[{node:n,keys:u}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ut=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const u=t.length+1,o=u+s,i=new Uint8Array(o*u).fill(s+1);for(let r=0;r<u;++r)i[r]=r;for(let r=1;r<o;++r)i[r*u]=r;return R(e,t,s,n,i,1,u,""),n},R=(e,t,s,n,u,o,i,r)=>{const d=o*i;t:for(const l of e.keys())if(l===F){const a=u[d-1];a<=s&&n.set(r,[e.get(l),a])}else{let a=o;for(let h=0;h<l.length;++h,++a){const m=l[h],p=i*a,f=p-i;let c=u[p];const g=Math.max(0,a-s-1),_=Math.min(i-1,a+s);for(let y=g;y<_;++y){const b=m!==t[y],z=u[f+y]+ +b,A=u[f+y+1]+1,w=u[p+y]+1,L=u[p+y+1]=Math.min(z,A,w);L<c&&(c=L)}if(c>s)continue t}R(e.get(l),t,s,n,u,a,i,r+l)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[u,o]=M(n);for(const i of u.keys())if(i!==F&&i.startsWith(o)){const r=new Map;return r.set(i.slice(o.length),u.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ut(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,O(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);let u=n.get(F);return u===void 0&&n.set(F,u=s()),u}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,u]of t)s.set(n,u);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},O=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const o of e.keys())if(o!==F&&t[n]===o[0]){const i=Math.min(s-n,o.length);let r=1;for(;r<i&&t[n+r]===o[r];)++r;const d=e.get(o);if(r===o.length)e=d;else{const l=new Map;l.set(o.slice(r),d),e.set(t.slice(n,n+r),l),e.delete(o),e=l}n+=r;continue t}const u=new Map;return e.set(t.slice(n),u),u}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)W(n);else if(s.size===1){const[u,o]=s.entries().next().value;q(n,u,o)}}},W=e=>{if(e.length===0)return;const[t,s]=M(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,u]=t.entries().next().value;n!==F&&q(e.slice(0,-1),n,u)}},q=(e,t,s)=>{if(e.length===0)return;const[n,u]=M(e);n.set(u+t,s),n.delete(u)},M=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",$="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},N=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:u,terms:o,match:i}=t.get(s);n.score=n.score+u,n.match=Object.assign(n.match,i),P(n.terms,o)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const u=e.get(n);if(u==null)continue;const{score:o,terms:i,match:r}=t.get(n);P(u.terms,i),s.set(n,{score:u.score+o,terms:u.terms,match:Object.assign(u.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,u,o)=>{const{k:i,b:r,d}=o;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/u)))},ft=e=>(t,s,n)=>{const u=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,o=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:u,prefix:o}},H=(e,t,s,n)=>{for(const u of Object.keys(e._fieldIds))if(e._fieldIds[u]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${u}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const u=e._index.fetch(n,ht),o=u.get(t);o==null||o.get(s)==null?H(e,s,t,n):o.get(s)<=1?o.size<=1?u.delete(t):o.delete(s):o.set(s,o.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:$,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,u,o,i,r,d=new Map)=>{if(u==null)return d;for(const l of Object.keys(o)){const a=o[l],h=e._fieldIds[l],m=u.get(h);if(m==null)continue;let p=m.size;const f=e._avgFieldLength[h];for(const c of m.keys()){if(!e._documentIds.has(c)){gt(e,h,c,s),p-=1;continue}const g=i?i(e._documentIds.get(c),s,e._storedFields.get(c)):1;if(!g)continue;const _=m.get(c),y=e._fieldLength.get(c)[h],b=at(_,p,e._documentCount,y,f,r),z=n*a*g*b,A=d.get(c);if(A){A.score+=z,lt(A.terms,t);const w=G(A.match,s);w?w.push(l):A.match[s]=[l]}else d.set(c,{score:z,terms:[t],match:{[s]:[l]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},u=(n.fields||e._options.fields).reduce((c,g)=>({...c,[g]:G(n.boost,g)||1}),{}),{boostDocument:o,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:l,prefix:a}={...J.weights,...i},h=e._index.get(t.term),m=B(e,t.term,t.term,1,h,u,o,d);let p,f;if(t.prefix&&(p=e._index.atPrefix(t.term)),t.fuzzy){const c=t.fuzzy===!0?.2:t.fuzzy,g=c<1?Math.min(r,Math.round(t.term.length*c)):c;g&&(f=e._index.fuzzyGet(t.term,g))}if(p)for(const[c,g]of p){const _=c.length-t.term.length;if(!_)continue;f?.delete(c);const y=a*c.length/(c.length+.3*_);B(e,t.term,c,y,g,u,o,d,m)}if(f)for(const c of f.keys()){const[g,_]=f.get(c);if(!_)continue;const y=l*c.length/(c.length+_);B(e,t.term,c,y,g,u,o,d,m)}return m},X=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(m=>X(e,m,a));return Y(h,a.combineWith)}const{tokenize:n,processTerm:u,searchOptions:o}=e._options,i={tokenize:n,processTerm:u,...o,...s},{tokenize:r,processTerm:d}=i,l=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(ft(i)).map(a=>At(e,a,i));return Y(l,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),u=[];for(const[o,{score:i,terms:r,match:d}]of n){const l=r.length,a={id:e._documentIds.get(o),score:i*l,terms:Object.keys(d),match:d};Object.assign(a,e._storedFields.get(o)),(s.filter==null||s.filter(a))&&u.push(a)}return u.sort(N),u},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:o,terms:i}of K(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=o,d.count+=1):n.set(r,{score:o,terms:i,count:1})}const u=[];for(const[o,{score:i,terms:r,count:d}]of n)u.push({suggestion:o,terms:r,score:i/d});return u.sort(N),u};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const u={};for(const[o,i]of n)u[o]=Object.fromEntries(i);t.push([s,u])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:u,fieldLength:o,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:l},a)=>{if(l!==1&&l!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=k(n),h._idToShortId=new Map,h._fieldIds=u,h._fieldLength=k(o),h._avgFieldLength=i,h._storedFields=k(r),h._dirtCount=d||0,h._index=new C;for(const[m,p]of h._documentIds)h._idToShortId.set(p,m);for(const[m,p]of e){const f=new Map;for(const c of Object.keys(p)){let g=p[c];l===1&&(g=g.ds),f.set(parseInt(c,10),k(g))}h._index.set(m,f)}return h},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),u=[];let o=0,i=0;const r=(l,a=!1)=>{let h="";i===0?h=l.length>20?`… ${l.slice(-20)}`:l:a?h=l.length+i>100?`${l.slice(0,100-i)}… `:l:h=l.length>20?`${l.slice(0,20)} … ${l.slice(-20)}`:l,h&&u.push(h),i+=h.length,a||(u.push(["mark",t]),i+=t.length,i>=100&&u.push(" …"))};let d=s.indexOf(n,o);if(d===-1)return null;for(;d>=0;){const l=d+n.length;if(r(e.slice(o,d)),o=l,i>100)break;d=s.indexOf(n,o)}return i<100&&r(e.slice(o),!0),u},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(u=>{const{id:o,terms:i,score:r}=u,d=o.includes("@"),l=o.includes("#"),[a,h]=o.split(/[#@]/),m=i.sort((f,c)=>f.length-c.length).filter((f,c)=>i.slice(c+1).every(g=>!g.includes(f))),{contents:p}=n[a]??={title:"",contents:[]};if(d)p.push([{type:"customField",key:a,index:h,display:m.map(f=>u.c.map(c=>j(c,f))).flat().filter(f=>f!==null)},r]);else{const f=m.map(c=>j(u.h,c)).filter(c=>c!==null);if(f.length&&p.push([{type:l?"heading":"title",key:a,...l&&{anchor:h},display:f},r]),"t"in u)for(const c of u.t){const g=m.map(_=>j(c,_)).filter(_=>_!==null);g.length&&p.push([{type:"text",key:a,...l&&{anchor:h},display:g},r])}}}),Q(n).sort(([,u],[,o])=>"max"==="total"?xt(u,o):kt(u,o)).map(([u,{title:o,contents:i}])=>{if(!o){const r=it(t,u);r&&(o=r.h)}return{title:o,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":28,\"nextId\":28,\"documentIds\":{\"0\":\"v-3e214e9b\",\"1\":\"v-3e214e9b#hi-there-i-m-zequanr\",\"2\":\"v-3e214e9b#my-current-status\",\"3\":\"v-3e214e9b#languages\",\"4\":\"v-3e214e9b#frameworks-and-tools\",\"5\":\"v-3e214e9b#github-overview\",\"6\":\"v-7f500abe\",\"7\":\"v-7f500abe#js-数据类型\",\"8\":\"v-7f500abe#基本数据类型\",\"9\":\"v-7f500abe#引用数据类型\",\"10\":\"v-7f500abe#浅拷贝与深拷贝\",\"11\":\"v-7f500abe#浅拷贝\",\"12\":\"v-7f500abe#深拷贝\",\"13\":\"v-7f500abe@0\",\"14\":\"v-7f500abe@1\",\"15\":\"v-1350cfe0\",\"16\":\"v-1350cfe0#blob\",\"17\":\"v-1350cfe0#file\",\"18\":\"v-1350cfe0#前端获取文件的几种情况\",\"19\":\"v-1350cfe0#input-上传\",\"20\":\"v-1350cfe0#文件拖放\",\"21\":\"v-1350cfe0#showopenfilepicker-api\",\"22\":\"v-1350cfe0#请求远端\",\"23\":\"v-1350cfe0#filereader\",\"24\":\"v-1350cfe0#arraybuffer\",\"25\":\"v-1350cfe0@0\",\"26\":\"v-1350cfe0@1\",\"27\":\"v-22142b7f\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[5,10],\"2\":[4,27],\"3\":[2],\"4\":[4],\"5\":[3],\"6\":[2],\"7\":[2,9],\"8\":[1,32],\"9\":[1,28],\"10\":[1,30],\"11\":[1,38],\"12\":[1,66],\"13\":[null,null,1],\"14\":[null,null,1],\"15\":[2],\"16\":[1,16],\"17\":[1,35],\"18\":[1],\"19\":[2,35],\"20\":[1,52],\"21\":[2,46],\"22\":[1,23],\"23\":[1,128],\"24\":[1,62],\"25\":[null,null,1],\"26\":[null,null,1],\"27\":[1]},\"averageFieldLength\":[1.783296703296703,31.02877492877493,0.19753086419753088],\"storedFields\":{\"0\":{\"h\":\"关于我\"},\"1\":{\"h\":\"Hi there, I'm ZEQUANR\",\"t\":[\"I'm trying to learn more and become better \"]},\"2\":{\"h\":\"My current status:\",\"t\":[\"🔭 I’m currently working on Full-Stack Web Development\",\"📚 I’m currently learning Go\",\"🥅 2024 Goals: I’m looking to collaborate on opensource and group projects and Learn a lot.\"]},\"3\":{\"h\":\"Languages:\"},\"4\":{\"h\":\"Frameworks and Tools:\"},\"5\":{\"h\":\"Github Overview:\"},\"6\":{\"h\":\"深拷贝&浅拷贝\"},\"7\":{\"h\":\"JS 数据类型\",\"t\":[\"JavaScript 是一种动态类型的语言，这意味着变量可以在程序执行期间更改其数据类型。JavaScript 提供了多种数据类型，可以大致分为两类：基本数据类型（也称为原始值）和引用数据类型。\"]},\"8\":{\"h\":\"基本数据类型\",\"t\":[\"基本数据类型直接存储在栈内存中，它们的值是不可变的，这是因为当我们想从新给基础类型赋值来“改变”它们的值时，实际上是创建了一个新的基本数据类型实例，并将其分配给当前的变量名中。\",\"这样的好处在于，基本数据类型的值不可变，所以在代码中传递这些值时不需要担心它们被意外地修改。这有助于编写无副作用的纯函数，并提高程序的可预测性和稳定性。\",\"let myNum = 42 // 创建一个数值变量 myNum = 43 // 不是改变原来的数值，而是创建一个新的数值并重新分配给 myNum \",\"在 code - 1 中，myNum 变量最初存储的是整数 42，然后通过重新赋值将其改为 43。实际上，这是创建了两个不同的 Number 实例，而不是直接改变了原始数值的值。\"]},\"9\":{\"h\":\"引用数据类型\",\"t\":[\"引用数据类型存储在堆内存中，它们的值是可以改变的，值得注意的是 引用数据类型都是以 object 的基础上派生的，所以除了 null 类型以外，所有的引用类型都是 typeof 运算符返回结果为 object 的对象。\",\"如果你需要区分具体的引用类型，可以使用 instanceof 操作符或者检查构造函数名称。\",\"let arr = [] window.console.log(arr instanceof Array) // true window.console.log(arr.constructor.name) // Array \"]},\"10\":{\"h\":\"浅拷贝与深拷贝\",\"t\":[\"在 JavaScript 中，深拷贝和浅拷贝一般情况都是在引用数据类型的基础上所讨论的，它们是两种不同的复制对象的方式，区别就在于复制的深度以及对原始对象和副本之间关系的影响。\",\"这主要是因为在引用类型中，当我们将变量赋值给另一个变量时，实际上是将它们的引用地址复制了一份。这样，当我们对其中一个变量进行修改时，另一个变量也会受到影响。因此，为了避免这种情况的发生，所以我们通常需要使用拷贝的手段来创建一个新的副本。\",\"let objA = { name: \\\"Li Ming\\\", age: 18 } let objB = objA objA.name = \\\"Xiao Hua\\\" window.console.log(objA) // { name: \\\"Xiao Hua\\\", age: 18 } window.console.log(objB) // { name: \\\"Xiao Hua\\\", age: 18 } \"]},\"11\":{\"h\":\"浅拷贝\",\"t\":[\"浅拷贝只复制了对象的第一层属性值，而不复制其内部的引用。当对象包含其他对象或数组作为属性时，浅拷贝只会创建这些嵌套对象或数组的引用副本，而不是实际的对象或数组本身。因此，如果修改了原对象中的嵌套对象或数组，那么这个修改也会反映到浅拷贝后的副本上，因为它们共享相同的引用。\",\"let objA = { name: \\\"Li Ming\\\", score: [80, 60, 90] } let objB = { ...objA } objA.name = \\\"Xiao Hua\\\" objA.score[0] = 100 window.console.log(objA) // { name: \\\"Xiao Hua\\\", score: [100, 60, 90] } window.console.log(objB) // { name: \\\"Li Ming\\\", score: [100, 60, 90] } \",\"值得注意的是在 code - 5 中，我们修改了原对象中嵌套的数组，但这个修改没有反映到浅拷贝后的副本上，这是因为我们相当于重写了一个数组，如果重写的话，那么他相当于在堆内存中重新开辟了一块空间这样修改之后的这个数组与之前修改的数组会分别处在两个不同地址的内存空间中且他们互不影响，同理此种情况也适用于对象与函数。\",\"let objA = { name: \\\"Li Ming\\\", score: [80, 60, 90] } let objB = { ...objA } objA.name = \\\"Xiao Hua\\\" objA.score = [100, 60, 90] window.console.log(objA) // { name: \\\"Xiao Hua\\\", score: [100, 60, 90] } window.console.log(objB) // { name: \\\"Li Ming\\\", score: [80, 60, 90] } \"]},\"12\":{\"h\":\"深拷贝\",\"t\":[\"深拷贝会递归地复制整个对象及其所有嵌套的对象和数组。它会在内存中为每个被复制的对象分配新的空间，并将所有的属性值都复制过去。这意味着即使原对象中的嵌套对象或数组发生了变化，也不会影响到深拷贝后的副本，因为它们各自拥有独立的内存空间。\",\"实现深拷贝的方法有很多种，只要达到它们各自拥有独立的内存空间且互不干扰，例如使用 JSON.stringify 方法将对象转换为 JSON 字符串，然后使用 JSON.parse 方法将 JSON 字符串解析为新的对象，这样也可以实现深拷贝。但是，这种方法有一些局限性，例如它不能处理函数和 undefined。\",\"let objA = { name: \\\"Li Ming\\\", score: [80, 60, 90], select: function () { return this.name }, age: undefined, } let objB = JSON.parse(JSON.stringify(objA)) window.console.log(objA) // { name: \\\"Li Ming\\\", score: [80, 60, 90], select: ƒ, age: undefined } window.console.log(objB) // { name: \\\"Li Ming\\\", score: [80, 60, 90] } \",\"我们也可以手动去实现一个深拷贝，实现该方法通常需要递归地复制对象的所有属性，并创建任何嵌套对象或数组的新副本。\",\"function deepCopy(obj) { // 对于非对象和null值，直接返回 if (obj === null || typeof obj !== \\\"object\\\") return obj // 根据obj的类型来决定新创建对象的类型 let copy = Array.isArray(obj) ? [] : {} for (let key in obj) { if (obj.hasOwnProperty(key)) { // 递归调用deepCopy处理每个属性 copy[key] = deepCopy(obj[key]) } } return copy } \"]},\"13\":{\"c\":[\"JavaScript\"]},\"14\":{\"c\":[\"JavaScript\"]},\"15\":{\"h\":\"Blob 类型\"},\"16\":{\"h\":\"Blob\",\"t\":[\"Blob 是 JavaScript 中的一个对象，其全称为 binary large object（二进制大对象），用于表示一个不可变、原始数据的类文件对象，它本身是不能直接读写所存储的数据，需要借助图 1 中来对它的数据以不同形式的格式进行读取操作。\"]},\"17\":{\"h\":\"File\",\"t\":[\"File 对象中存在于浏览器环境中，在 node.js 环境中不存在，并且 Blob 的属性和方法都可以应用于 File 对象上，对此我们可以将 File 对象看作是特殊类型的 Blob，且可以用在任意的 Blob 类型的 context 中,比如: FileReader, URL.createObjectURL, createImageBitmap, 及 XMLHttpRequest.send 都能处理 Blob 和 File 对象。\",\"从图 2 可以看出 File 对象相比于 Blob 对象多包含了一些文件属性，File 原型中可以了解 File 是继承自 Blob。\"]},\"18\":{\"h\":\"前端获取文件的几种情况\"},\"19\":{\"h\":\"input 上传\",\"t\":[\"创建 <input> 元素并在其上绑定 onchange 事件，在通过用户点击上传后获取 FileList 对象，其中 input 标签中 type 是用来决定用户的输入类型，multiple 是用来确定是否可以同时上传多个文件。\",\"<input id=\\\"cake\\\" type=\\\"file\\\" multiple=\\\"multiple\\\" /> \",\"const selectElement = window.document.getElementById(\\\"cake\\\") selectElement.onchange = (event) => { window.console.log(event.target.files) } \"]},\"20\":{\"h\":\"文件拖放\",\"t\":[\"创建一个 <div> 标签或者创建其他任意一种标签，通过绑定 ondragover 与 ondrop 事件来完成将浏览器之外的文件拖拽到浏览器窗口中，并将它放在一个成为拖放区域的特殊区域中，也就是之前所创建的 <div> 标签中。\",\"ondragover：当元素或选中的文本被拖到一个可释放目标上时触发（每 100 毫秒触发一次）。\",\"ondrop：当元素或选中的文本在可释放目标上被释放时触发。\",\"<div id=\\\"cake\\\"></div> \",\"const selectElement = window.document.getElementById(\\\"cake\\\") selectElement.ondragover = (event) => { event.preventDefault() } selectElement.ondrop = (event) => { event.preventDefault() window.console.log(event.dataTransfer.files) } \",\"##cake { width: 200px; height: 200px; border: 1px solid black; } \",\"值得注意的是在 ondragover 与 ondrop 事件中均调用 preventDefault() 来阻止对这个事件的其他处理过程（如触点事件或指针事件更或者是放置文件时将文件显示在浏览器窗口中），但此事件还是会继续传播，除非碰到事件监听器调用 stopPropagation() 或 stopImmediatePropagation() 才停止传播。\"]},\"21\":{\"h\":\"showOpenFilePicker API\",\"t\":[\"通过 window.showOpenFilePicker() 方法，该方法用于显示一个文件选择器，以允许用户选择一个或多个文件并返回这些文件的句柄。\",\"<button id=\\\"cake\\\">点击上传文件</button> \",\"const selectElement = window.document.getElementById(\\\"cake\\\") selectElement.onclick = async () => { const pickerOpts = { types: [ { description: \\\"Images\\\", accept: { \\\"image/*\\\": [\\\".png\\\", \\\".gif\\\", \\\".jpeg\\\", \\\".jpg\\\"], }, }, ], excludeAcceptAllOption: true, multiple: false, } const [fileHandle] = await window.showOpenFilePicker(pickerOpts) window.console.log(fileHandle) } \",\"值得注意的是 window.showOpenFilePicker() API 较新，使用时需注意此项功能仅在一些支持的浏览器的安全上下文（HTTPS）中可用，在将其用于生产之前，需仔细检查浏览器兼容性。\"]},\"22\":{\"h\":\"请求远端\",\"t\":[\"通过 fetch 或 axios 等获取远端文件，这也是我们最常用到的。\",\"fetch(\\\"../src/assets/image/cake.png\\\") .then(async (responce) => { window.console.log(await responce.blob()) }) .catch((err) => { window.console.log(err) }) \"]},\"23\":{\"h\":\"FileReader\",\"t\":[\"FileReader 对象允许 Web 应用程序异步读取存储在用户计算机上的文件（但不能用于从文件系统中按路径名简单地读取文件）或原始数据缓冲区的内容，使用 File 或 Blob 对象指定要读取的文件或数据。 简单来说 FileReader 是一个异步 API，它允许接受 File 或 Blob 对象，并根据我们的要求读取成我们想要的文件或数据类型。\",\"FileReader 对象可以使用 FileReader 构造函数来创建，并从图 5 中分别可以看到 FileReader 对象所提供的属性与事件处理。\",\"const fr = new FileReader() window.console.log(fr) \",\"FileReader 对象属性如下：\",\"error（只读）：表示在读取文件时发生的错误；\",\"readyState（只读）：表示 FileReader 状态的数字，取值如下：0（EMPTY）还没有加载任何数据、1（LOADING）数据正在被加载、2（DONE）已完成全部的读取请求。\",\"result（只读）：文件的内容，该属性仅在读取操作完成后才有效，数据的格式取决于使用哪个方法来启动读取操作。\",\"FileReader 对象事件处理如下：\",\"onabort：该事件在读取操作被中断时触发。\",\"onerror：该事件在读取操作发生错误时触发。\",\"onload：该事件在读取操作完成时触发。\",\"onloadstart：该事件在读取操作开始时触发。\",\"onloadend：该事件在读取操作结束时（要么成功，要么失败）触发。\",\"onprogress：该事件在读取 Blob 时触发，当上传大文件时，可以用该事件来监控文件的读取进度。\",\"回归正文，在图 4 中可以看到 FileReader 对象可以将 File 或 Blob 输出成不同的数据格式，所以可以把 FileReader 对象看成一个工具，该工具提供了一些读取方法，这关乎着 result 属性最后所呈现的文件内容，FileReader 对象提供了以下方法来加载文件：\",\"readAsArrayBuffer: 读取指定 Blob 中的内容，完成之后，result 属性中保存的将是被读取文件的 ArrayBuffer 数据对象。\",\"readAsBinaryString: 读取指定 Blob 中的内容，完成之后，result 属性中将包含所读取文件的原始二进制数据。\",\"readAsDataURL: 读取指定 Blob 中的内容，完成之后，result 属性中将包含一个 data: URL 格式的 Base64 字符串以表示所读取文件的内容。\",\"readAsText: 读取指定 Blob 中的内容，完成之后，result 属性中将包含一个字符串以表示所读取的文件内容。\",\"以 readAsDataURL 方法为例，首先创建一个 FileReader 对象，当文件上传成功时，使用该方法读取 File 对象，当读取操作完成时打印读取结果。\",\"<input id=\\\"cake\\\" type=\\\"file\\\" /> \",\"const selectElement = window.document.getElementById(\\\"cake\\\") const fr = new FileReader() fr.onload = (e) => { window.console.log(e.target.result) } selectElement.onchange = (event) => { fr.readAsDataURL(event.target.files[0]) } \",\"如果此时打印 FileReader 对象我们就可以看见 readyState 状态为已完成、 onload 事件为我们刚刚定义的方法、 result 内容为 readAsDataURL 方法启动的读取结果。\"]},\"24\":{\"h\":\"ArrayBuffer\",\"t\":[\"ArrayBuffer 对象用来表示通用的、固定长度的原始二进制数据缓冲区，ArrayBuffer 的内容不能直接操作，只能通过 DataView 对象或 TypedArrray 对象来访问，这些对象用于读取和写入缓冲区内容。 TypedArrray 视图与 DataView 视图的区别主要是字节序，前者的数组成员都是同一个数据类型，后者的数组成员可以是不同的数据类型。\",\"TypedArrray 只是一个概念，实际使用的是那图 7 中的 9 个对象。\",\"DataView 可以自定义格式和字节序，更像是 TypeScript 中的元祖。\",\"Blob 相较于 ArrayBuffer 它作为一个整体文件，更适合用于文件传输，当需要对二进制数据进行操作时（例如修改文件中某一段数据时）就可以使用 ArrayBuffer 来完成。\",\"const Hello = [72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100] const buffer = new ArrayBuffer(Hello.length) const wrapBuffer = new Int8Array(buffer) for (let i = 0; i < Hello.length; i++) { wrapBuffer[i] = Hello[i] } const blob = new Blob([buffer]) const reader = new FileReader() reader.readAsText(blob) window.console.log(reader) \"]},\"25\":{\"c\":[\"JavaScript\"]},\"26\":{\"c\":[\"JavaScript\"]},\"27\":{\"h\":\"Basic\"}},\"dirtCount\":0,\"index\":[[\"32\",{\"1\":{\"24\":1}}],[\"来完成\",{\"1\":{\"24\":1}}],[\"来阻止对这个事件的其他处理过程\",{\"1\":{\"20\":1}}],[\"就可以使用\",{\"1\":{\"24\":1}}],[\"更适合用于文件传输\",{\"1\":{\"24\":1}}],[\"更像是\",{\"1\":{\"24\":1}}],[\"相较于\",{\"1\":{\"24\":1}}],[\"个对象\",{\"1\":{\"24\":1}}],[\"9\",{\"1\":{\"24\":1}}],[\"90\",{\"1\":{\"11\":7,\"12\":3}}],[\"72\",{\"1\":{\"24\":1}}],[\"7\",{\"1\":{\"24\":1}}],[\"后者的数组成员可以是不同的数据类型\",{\"1\":{\"24\":1}}],[\"前者的数组成员都是同一个数据类型\",{\"1\":{\"24\":1}}],[\"前端获取文件的几种情况\",{\"0\":{\"18\":1}}],[\"视图的区别主要是字节序\",{\"1\":{\"24\":1}}],[\"视图与\",{\"1\":{\"24\":1}}],[\"固定长度的原始二进制数据缓冲区\",{\"1\":{\"24\":1}}],[\"内容为\",{\"1\":{\"23\":1}}],[\"状态为已完成\",{\"1\":{\"23\":1}}],[\"状态的数字\",{\"1\":{\"23\":1}}],[\"首先创建一个\",{\"1\":{\"23\":1}}],[\"以\",{\"1\":{\"23\":1}}],[\"以允许用户选择一个或多个文件并返回这些文件的句柄\",{\"1\":{\"21\":1}}],[\"格式的\",{\"1\":{\"23\":1}}],[\"属性中将包含一个字符串以表示所读取的文件内容\",{\"1\":{\"23\":1}}],[\"属性中将包含一个\",{\"1\":{\"23\":1}}],[\"属性中将包含所读取文件的原始二进制数据\",{\"1\":{\"23\":1}}],[\"属性中保存的将是被读取文件的\",{\"1\":{\"23\":1}}],[\"属性最后所呈现的文件内容\",{\"1\":{\"23\":1}}],[\"完成之后\",{\"1\":{\"23\":4}}],[\"读取指定\",{\"1\":{\"23\":4}}],[\"输出成不同的数据格式\",{\"1\":{\"23\":1}}],[\"回归正文\",{\"1\":{\"23\":1}}],[\"时触发\",{\"1\":{\"23\":1}}],[\"触发\",{\"1\":{\"23\":1}}],[\"要么失败\",{\"1\":{\"23\":1}}],[\"要么成功\",{\"1\":{\"23\":1}}],[\"该工具提供了一些读取方法\",{\"1\":{\"23\":1}}],[\"该事件在读取\",{\"1\":{\"23\":1}}],[\"该事件在读取操作结束时\",{\"1\":{\"23\":1}}],[\"该事件在读取操作开始时触发\",{\"1\":{\"23\":1}}],[\"该事件在读取操作完成时触发\",{\"1\":{\"23\":1}}],[\"该事件在读取操作发生错误时触发\",{\"1\":{\"23\":1}}],[\"该事件在读取操作被中断时触发\",{\"1\":{\"23\":1}}],[\"该属性仅在读取操作完成后才有效\",{\"1\":{\"23\":1}}],[\"该方法用于显示一个文件选择器\",{\"1\":{\"21\":1}}],[\"文件的内容\",{\"1\":{\"23\":1}}],[\"文件拖放\",{\"0\":{\"20\":1}}],[\"已完成全部的读取请求\",{\"1\":{\"23\":1}}],[\"数据对象\",{\"1\":{\"23\":1}}],[\"数据的格式取决于使用哪个方法来启动读取操作\",{\"1\":{\"23\":1}}],[\"数据正在被加载\",{\"1\":{\"23\":1}}],[\"数据类型\",{\"0\":{\"7\":1}}],[\"还没有加载任何数据\",{\"1\":{\"23\":1}}],[\"取值如下\",{\"1\":{\"23\":1}}],[\"表示\",{\"1\":{\"23\":1}}],[\"表示在读取文件时发生的错误\",{\"1\":{\"23\":1}}],[\"只是一个概念\",{\"1\":{\"24\":1}}],[\"只能通过\",{\"1\":{\"24\":1}}],[\"只读\",{\"1\":{\"23\":3}}],[\"只要达到它们各自拥有独立的内存空间且互不干扰\",{\"1\":{\"12\":1}}],[\"构造函数来创建\",{\"1\":{\"23\":1}}],[\"简单来说\",{\"1\":{\"23\":1}}],[\"使用该方法读取\",{\"1\":{\"23\":1}}],[\"使用\",{\"1\":{\"23\":1}}],[\"使用时需注意此项功能仅在一些支持的浏览器的安全上下文\",{\"1\":{\"21\":1}}],[\"应用程序异步读取存储在用户计算机上的文件\",{\"1\":{\"23\":1}}],[\"reader\",{\"1\":{\"24\":3}}],[\"readastext\",{\"1\":{\"23\":1,\"24\":1}}],[\"readasdataurl\",{\"1\":{\"23\":4}}],[\"readasbinarystring\",{\"1\":{\"23\":1}}],[\"readasarraybuffer\",{\"1\":{\"23\":1}}],[\"readystate\",{\"1\":{\"23\":2}}],[\"result\",{\"1\":{\"23\":8}}],[\"responce\",{\"1\":{\"22\":2}}],[\"return\",{\"1\":{\"12\":3}}],[\"等获取远端文件\",{\"1\":{\"22\":1}}],[\"请求远端\",{\"0\":{\"22\":1}}],[\"需仔细检查浏览器兼容性\",{\"1\":{\"21\":1}}],[\"需要借助图\",{\"1\":{\"16\":1}}],[\"较新\",{\"1\":{\"21\":1}}],[\"e\",{\"1\":{\"23\":2}}],[\"empty\",{\"1\":{\"23\":1}}],[\"error\",{\"1\":{\"23\":1}}],[\"err\",{\"1\":{\"22\":2}}],[\"excludeacceptalloption\",{\"1\":{\"21\":1}}],[\"event\",{\"1\":{\"19\":2,\"20\":5,\"23\":2}}],[\"方法启动的读取结果\",{\"1\":{\"23\":1}}],[\"方法为例\",{\"1\":{\"23\":1}}],[\"方法\",{\"1\":{\"21\":1}}],[\"方法将\",{\"1\":{\"12\":1}}],[\"方法将对象转换为\",{\"1\":{\"12\":1}}],[\"通过\",{\"1\":{\"21\":1,\"22\":1}}],[\"通过绑定\",{\"1\":{\"20\":1}}],[\"才停止传播\",{\"1\":{\"20\":1}}],[\"或原始数据缓冲区的内容\",{\"1\":{\"23\":1}}],[\"或\",{\"1\":{\"20\":1,\"22\":1,\"23\":3}}],[\"除非碰到事件监听器调用\",{\"1\":{\"20\":1}}],[\"如触点事件或指针事件更或者是放置文件时将文件显示在浏览器窗口中\",{\"1\":{\"20\":1}}],[\"如果此时打印\",{\"1\":{\"23\":1}}],[\"如果重写的话\",{\"1\":{\"11\":1}}],[\"如果修改了原对象中的嵌套对象或数组\",{\"1\":{\"11\":1}}],[\"如果你需要区分具体的引用类型\",{\"1\":{\"9\":1}}],[\"毫秒触发一次\",{\"1\":{\"20\":1}}],[\"每\",{\"1\":{\"20\":1}}],[\"与\",{\"1\":{\"20\":2}}],[\"标签或者创建其他任意一种标签\",{\"1\":{\"20\":1}}],[\"标签中\",{\"1\":{\"19\":1,\"20\":1}}],[\"<\",{\"1\":{\"24\":1}}],[\"<button\",{\"1\":{\"21\":1}}],[\"<div\",{\"1\":{\"20\":1}}],[\"<div>\",{\"1\":{\"20\":2}}],[\"<input\",{\"1\":{\"19\":1,\"23\":1}}],[\"<input>\",{\"1\":{\"19\":1}}],[\"dataview\",{\"1\":{\"24\":3}}],[\"data\",{\"1\":{\"23\":1}}],[\"datatransfer\",{\"1\":{\"20\":1}}],[\"done\",{\"1\":{\"23\":1}}],[\"document\",{\"1\":{\"19\":1,\"20\":1,\"21\":1,\"23\":1}}],[\"div>\",{\"1\":{\"20\":1}}],[\"description\",{\"1\":{\"21\":1}}],[\"deepcopy\",{\"1\":{\"12\":2}}],[\"development\",{\"1\":{\"2\":1}}],[\">点击上传文件<\",{\"1\":{\"21\":1}}],[\"><\",{\"1\":{\"20\":1}}],[\">\",{\"1\":{\"19\":1,\"23\":1}}],[\"其中\",{\"1\":{\"19\":1}}],[\"其全称为\",{\"1\":{\"16\":1}}],[\"事件为我们刚刚定义的方法\",{\"1\":{\"23\":1}}],[\"事件中均调用\",{\"1\":{\"20\":1}}],[\"事件来完成将浏览器之外的文件拖拽到浏览器窗口中\",{\"1\":{\"20\":1}}],[\"事件\",{\"1\":{\"19\":1}}],[\"元素并在其上绑定\",{\"1\":{\"19\":1}}],[\"创建一个\",{\"1\":{\"20\":1}}],[\"创建一个数值变量\",{\"1\":{\"8\":1}}],[\"创建\",{\"1\":{\"19\":1}}],[\"上传\",{\"0\":{\"19\":1}}],[\"原型中可以了解\",{\"1\":{\"17\":1}}],[\"原始数据的类文件对象\",{\"1\":{\"16\":1}}],[\"200px\",{\"1\":{\"20\":2}}],[\"2024\",{\"1\":{\"2\":1}}],[\"2\",{\"1\":{\"17\":1,\"23\":1}}],[\"从图\",{\"1\":{\"17\":1}}],[\"和\",{\"1\":{\"17\":1}}],[\"和引用数据类型\",{\"1\":{\"7\":1}}],[\"都能处理\",{\"1\":{\"17\":1}}],[\"xmlhttprequest\",{\"1\":{\"17\":1}}],[\"xiao\",{\"1\":{\"10\":3,\"11\":4}}],[\"及\",{\"1\":{\"17\":1}}],[\"url\",{\"1\":{\"17\":1,\"23\":1}}],[\"undefined\",{\"1\":{\"12\":3}}],[\"比如\",{\"1\":{\"17\":1}}],[\"且可以用在任意的\",{\"1\":{\"17\":1}}],[\"环境中不存在\",{\"1\":{\"17\":1}}],[\"对此我们可以将\",{\"1\":{\"17\":1}}],[\"对象来访问\",{\"1\":{\"24\":1}}],[\"对象或\",{\"1\":{\"24\":1}}],[\"对象用来表示通用的\",{\"1\":{\"24\":1}}],[\"对象我们就可以看见\",{\"1\":{\"23\":1}}],[\"对象提供了以下方法来加载文件\",{\"1\":{\"23\":1}}],[\"对象看成一个工具\",{\"1\":{\"23\":1}}],[\"对象看作是特殊类型的\",{\"1\":{\"17\":1}}],[\"对象可以将\",{\"1\":{\"23\":1}}],[\"对象可以使用\",{\"1\":{\"23\":1}}],[\"对象事件处理如下\",{\"1\":{\"23\":1}}],[\"对象属性如下\",{\"1\":{\"23\":1}}],[\"对象所提供的属性与事件处理\",{\"1\":{\"23\":1}}],[\"对象指定要读取的文件或数据\",{\"1\":{\"23\":1}}],[\"对象允许\",{\"1\":{\"23\":1}}],[\"对象多包含了一些文件属性\",{\"1\":{\"17\":1}}],[\"对象相比于\",{\"1\":{\"17\":1}}],[\"对象\",{\"1\":{\"17\":1,\"19\":1,\"23\":3}}],[\"对象上\",{\"1\":{\"17\":1}}],[\"对象中存在于浏览器环境中\",{\"1\":{\"17\":1}}],[\"对于非对象和null值\",{\"1\":{\"12\":1}}],[\"用于表示一个不可变\",{\"1\":{\"16\":1}}],[\"二进制大对象\",{\"1\":{\"16\":1}}],[\"是一个异步\",{\"1\":{\"23\":1}}],[\"是一种动态类型的语言\",{\"1\":{\"7\":1}}],[\"是用来确定是否可以同时上传多个文件\",{\"1\":{\"19\":1}}],[\"是用来决定用户的输入类型\",{\"1\":{\"19\":1}}],[\"是继承自\",{\"1\":{\"17\":1}}],[\"是\",{\"1\":{\"16\":1}}],[\"类型的\",{\"1\":{\"17\":1}}],[\"类型\",{\"0\":{\"15\":1}}],[\"类型以外\",{\"1\":{\"9\":1}}],[\"basic\",{\"0\":{\"27\":1}}],[\"base64\",{\"1\":{\"23\":1}}],[\"buffer\",{\"1\":{\"24\":3}}],[\"button>\",{\"1\":{\"21\":1}}],[\"black\",{\"1\":{\"20\":1}}],[\"blob\",{\"0\":{\"15\":1,\"16\":1},\"1\":{\"16\":1,\"17\":6,\"22\":1,\"23\":8,\"24\":4}}],[\"border\",{\"1\":{\"20\":1}}],[\"binary\",{\"1\":{\"16\":1}}],[\"better\",{\"1\":{\"1\":1}}],[\"become\",{\"1\":{\"1\":1}}],[\"递归调用deepcopy处理每个属性\",{\"1\":{\"12\":1}}],[\"key\",{\"1\":{\"12\":4}}],[\"根据obj的类型来决定新创建对象的类型\",{\"1\":{\"12\":1}}],[\"||\",{\"1\":{\"12\":1}}],[\"直接返回\",{\"1\":{\"12\":1}}],[\"我们也可以手动去实现一个深拷贝\",{\"1\":{\"12\":1}}],[\"我们修改了原对象中嵌套的数组\",{\"1\":{\"11\":1}}],[\"ƒ\",{\"1\":{\"12\":1}}],[\"例如修改文件中某一段数据时\",{\"1\":{\"24\":1}}],[\"例如它不能处理函数和\",{\"1\":{\"12\":1}}],[\"例如使用\",{\"1\":{\"12\":1}}],[\"但不能用于从文件系统中按路径名简单地读取文件\",{\"1\":{\"23\":1}}],[\"但此事件还是会继续传播\",{\"1\":{\"20\":1}}],[\"但是\",{\"1\":{\"12\":1}}],[\"但这个修改没有反映到浅拷贝后的副本上\",{\"1\":{\"11\":1}}],[\"png\",{\"1\":{\"21\":1,\"22\":1}}],[\"pickeropts\",{\"1\":{\"21\":2}}],[\"preventdefault\",{\"1\":{\"20\":3}}],[\"projects\",{\"1\":{\"2\":1}}],[\"parse\",{\"1\":{\"12\":2}}],[\"然后使用\",{\"1\":{\"12\":1}}],[\"然后通过重新赋值将其改为\",{\"1\":{\"8\":1}}],[\"字符串以表示所读取文件的内容\",{\"1\":{\"23\":1}}],[\"字符串解析为新的对象\",{\"1\":{\"12\":1}}],[\"字符串\",{\"1\":{\"12\":1}}],[\"也就是之前所创建的\",{\"1\":{\"20\":1}}],[\"也不会影响到深拷贝后的副本\",{\"1\":{\"12\":1}}],[\"也称为原始值\",{\"1\":{\"7\":1}}],[\"它作为一个整体文件\",{\"1\":{\"24\":1}}],[\"它允许接受\",{\"1\":{\"23\":1}}],[\"它本身是不能直接读写所存储的数据\",{\"1\":{\"16\":1}}],[\"它会在内存中为每个被复制的对象分配新的空间\",{\"1\":{\"12\":1}}],[\"它们是两种不同的复制对象的方式\",{\"1\":{\"10\":1}}],[\"它们的值是可以改变的\",{\"1\":{\"9\":1}}],[\"它们的值是不可变的\",{\"1\":{\"8\":1}}],[\"它们的值时\",{\"1\":{\"8\":1}}],[\"同理此种情况也适用于对象与函数\",{\"1\":{\"11\":1}}],[\"那么他相当于在堆内存中重新开辟了一块空间这样修改之后的这个数组与之前修改的数组会分别处在两个不同地址的内存空间中且他们互不影响\",{\"1\":{\"11\":1}}],[\"那么这个修改也会反映到浅拷贝后的副本上\",{\"1\":{\"11\":1}}],[\"5\",{\"1\":{\"11\":1,\"23\":1}}],[\"0\",{\"1\":{\"11\":1,\"23\":2,\"24\":1}}],[\"60\",{\"1\":{\"11\":7,\"12\":3}}],[\"80\",{\"1\":{\"11\":3,\"12\":3}}],[\"src\",{\"1\":{\"22\":1}}],[\"showopenfilepicker\",{\"0\":{\"21\":1},\"1\":{\"21\":3}}],[\"solid\",{\"1\":{\"20\":1}}],[\"send\",{\"1\":{\"17\":1}}],[\"selectelement\",{\"1\":{\"19\":2,\"20\":3,\"21\":2,\"23\":2}}],[\"select\",{\"1\":{\"12\":2}}],[\"stopimmediatepropagation\",{\"1\":{\"20\":1}}],[\"stoppropagation\",{\"1\":{\"20\":1}}],[\"stringify\",{\"1\":{\"12\":2}}],[\"stack\",{\"1\":{\"2\":1}}],[\"status\",{\"0\":{\"2\":1}}],[\"score\",{\"1\":{\"11\":8,\"12\":3}}],[\"因为它们各自拥有独立的内存空间\",{\"1\":{\"12\":1}}],[\"因为它们共享相同的引用\",{\"1\":{\"11\":1}}],[\"因此\",{\"1\":{\"10\":1,\"11\":1}}],[\"当需要对二进制数据进行操作时\",{\"1\":{\"24\":1}}],[\"当读取操作完成时打印读取结果\",{\"1\":{\"23\":1}}],[\"当文件上传成功时\",{\"1\":{\"23\":1}}],[\"当上传大文件时\",{\"1\":{\"23\":1}}],[\"当元素或选中的文本在可释放目标上被释放时触发\",{\"1\":{\"20\":1}}],[\"当元素或选中的文本被拖到一个可释放目标上时触发\",{\"1\":{\"20\":1}}],[\"当对象包含其他对象或数组作为属性时\",{\"1\":{\"11\":1}}],[\"当我们对其中一个变量进行修改时\",{\"1\":{\"10\":1}}],[\"当我们将变量赋值给另一个变量时\",{\"1\":{\"10\":1}}],[\"hello\",{\"1\":{\"24\":4}}],[\"height\",{\"1\":{\"20\":1}}],[\"https\",{\"1\":{\"21\":1}}],[\"hasownproperty\",{\"1\":{\"12\":1}}],[\"hua\",{\"1\":{\"10\":3,\"11\":4}}],[\"hi\",{\"0\":{\"1\":1}}],[\"为了避免这种情况的发生\",{\"1\":{\"10\":1}}],[\"另一个变量也会受到影响\",{\"1\":{\"10\":1}}],[\"区别就在于复制的深度以及对原始对象和副本之间关系的影响\",{\"1\":{\"10\":1}}],[\"new\",{\"1\":{\"23\":2,\"24\":4}}],[\"node\",{\"1\":{\"17\":1}}],[\"name\",{\"1\":{\"9\":1,\"10\":4,\"11\":8,\"12\":4}}],[\"null\",{\"1\":{\"9\":1,\"12\":1}}],[\"number\",{\"1\":{\"8\":1}}],[\"操作符或者检查构造函数名称\",{\"1\":{\"9\":1}}],[\"可以自定义格式和字节序\",{\"1\":{\"24\":1}}],[\"可以用该事件来监控文件的读取进度\",{\"1\":{\"23\":1}}],[\"可以看出\",{\"1\":{\"17\":1}}],[\"可以使用\",{\"1\":{\"9\":1}}],[\"可以大致分为两类\",{\"1\":{\"7\":1}}],[\"的内容不能直接操作\",{\"1\":{\"24\":1}}],[\"的属性和方法都可以应用于\",{\"1\":{\"17\":1}}],[\"的对象\",{\"1\":{\"9\":1}}],[\"的基础上派生的\",{\"1\":{\"9\":1}}],[\"运算符返回结果为\",{\"1\":{\"9\":1}}],[\"所有的引用类型都是\",{\"1\":{\"9\":1}}],[\"所以可以把\",{\"1\":{\"23\":1}}],[\"所以我们通常需要使用拷贝的手段来创建一个新的副本\",{\"1\":{\"10\":1}}],[\"所以除了\",{\"1\":{\"9\":1}}],[\"所以在代码中传递这些值时不需要担心它们被意外地修改\",{\"1\":{\"8\":1}}],[\"值得注意的是在\",{\"1\":{\"11\":1,\"20\":1}}],[\"值得注意的是\",{\"1\":{\"9\":1,\"21\":1}}],[\"引用数据类型都是以\",{\"1\":{\"9\":1}}],[\"引用数据类型存储在堆内存中\",{\"1\":{\"9\":1}}],[\"引用数据类型\",{\"0\":{\"9\":1}}],[\"而不是实际的对象或数组本身\",{\"1\":{\"11\":1}}],[\"而不是直接改变了原始数值的值\",{\"1\":{\"8\":1}}],[\"而不复制其内部的引用\",{\"1\":{\"11\":1}}],[\"而是创建一个新的数值并重新分配给\",{\"1\":{\"8\":1}}],[\"实际使用的是那图\",{\"1\":{\"24\":1}}],[\"实际上是将它们的引用地址复制了一份\",{\"1\":{\"10\":1}}],[\"实际上是创建了一个新的基本数据类型实例\",{\"1\":{\"8\":1}}],[\"实际上\",{\"1\":{\"8\":1}}],[\"实现该方法通常需要递归地复制对象的所有属性\",{\"1\":{\"12\":1}}],[\"实现深拷贝的方法有很多种\",{\"1\":{\"12\":1}}],[\"实例\",{\"1\":{\"8\":1}}],[\"变量最初存储的是整数\",{\"1\":{\"8\":1}}],[\"中的元祖\",{\"1\":{\"24\":1}}],[\"中的\",{\"1\":{\"24\":1}}],[\"中的内容\",{\"1\":{\"23\":4}}],[\"中的一个对象\",{\"1\":{\"16\":1}}],[\"中可以看到\",{\"1\":{\"23\":1}}],[\"中可用\",{\"1\":{\"21\":1}}],[\"中分别可以看到\",{\"1\":{\"23\":1}}],[\"中来对它的数据以不同形式的格式进行读取操作\",{\"1\":{\"16\":1}}],[\"中\",{\"1\":{\"8\":1,\"10\":1,\"11\":1,\"17\":1}}],[\"114\",{\"1\":{\"24\":1}}],[\"119\",{\"1\":{\"24\":1}}],[\"111\",{\"1\":{\"24\":2}}],[\"108\",{\"1\":{\"24\":3}}],[\"101\",{\"1\":{\"24\":1}}],[\"100\",{\"1\":{\"11\":5,\"20\":1,\"24\":1}}],[\"1px\",{\"1\":{\"20\":1}}],[\"18\",{\"1\":{\"10\":3}}],[\"1\",{\"1\":{\"8\":1,\"16\":1,\"23\":1}}],[\"在图\",{\"1\":{\"23\":1}}],[\"在将其用于生产之前\",{\"1\":{\"21\":1}}],[\"在通过用户点击上传后获取\",{\"1\":{\"19\":1}}],[\"在\",{\"1\":{\"8\":1,\"10\":1,\"17\":1}}],[\"不是改变原来的数值\",{\"1\":{\"8\":1}}],[\"4\",{\"1\":{\"23\":1}}],[\"43\",{\"1\":{\"8\":2}}],[\"42\",{\"1\":{\"8\":2}}],[\"=>\",{\"1\":{\"19\":1,\"20\":2,\"21\":1,\"22\":2,\"23\":2}}],[\"==\",{\"1\":{\"12\":1}}],[\"===\",{\"1\":{\"12\":1}}],[\"=\",{\"1\":{\"8\":2,\"9\":1,\"10\":3,\"11\":8,\"12\":4,\"19\":2,\"20\":3,\"21\":4,\"23\":5,\"24\":7}}],[\"并从图\",{\"1\":{\"23\":1}}],[\"并根据我们的要求读取成我们想要的文件或数据类型\",{\"1\":{\"23\":1}}],[\"并且\",{\"1\":{\"17\":1}}],[\"并创建任何嵌套对象或数组的新副本\",{\"1\":{\"12\":1}}],[\"并将它放在一个成为拖放区域的特殊区域中\",{\"1\":{\"20\":1}}],[\"并将所有的属性值都复制过去\",{\"1\":{\"12\":1}}],[\"并将其分配给当前的变量名中\",{\"1\":{\"8\":1}}],[\"并提高程序的可预测性和稳定性\",{\"1\":{\"8\":1}}],[\"改变\",{\"1\":{\"8\":1}}],[\"这些对象用于读取和写入缓冲区内容\",{\"1\":{\"24\":1}}],[\"这关乎着\",{\"1\":{\"23\":1}}],[\"这也是我们最常用到的\",{\"1\":{\"22\":1}}],[\"这种方法有一些局限性\",{\"1\":{\"12\":1}}],[\"这意味着即使原对象中的嵌套对象或数组发生了变化\",{\"1\":{\"12\":1}}],[\"这意味着变量可以在程序执行期间更改其数据类型\",{\"1\":{\"7\":1}}],[\"这样也可以实现深拷贝\",{\"1\":{\"12\":1}}],[\"这样\",{\"1\":{\"10\":1}}],[\"这样的好处在于\",{\"1\":{\"8\":1}}],[\"这主要是因为在引用类型中\",{\"1\":{\"10\":1}}],[\"这是因为我们相当于重写了一个数组\",{\"1\":{\"11\":1}}],[\"这是因为当我们想从新给基础类型赋值来\",{\"1\":{\"8\":1}}],[\"这是创建了两个不同的\",{\"1\":{\"8\":1}}],[\"这有助于编写无副作用的纯函数\",{\"1\":{\"8\":1}}],[\"基本数据类型的值不可变\",{\"1\":{\"8\":1}}],[\"基本数据类型直接存储在栈内存中\",{\"1\":{\"8\":1}}],[\"基本数据类型\",{\"0\":{\"8\":1},\"1\":{\"7\":1}}],[\"提供了多种数据类型\",{\"1\":{\"7\":1}}],[\"jpg\",{\"1\":{\"21\":1}}],[\"jpeg\",{\"1\":{\"21\":1}}],[\"javascript\",{\"1\":{\"7\":2,\"10\":1,\"16\":1},\"2\":{\"13\":1,\"14\":1,\"25\":1,\"26\":1}}],[\"json\",{\"1\":{\"12\":6}}],[\"js\",{\"0\":{\"7\":1},\"1\":{\"17\":1}}],[\"浅拷贝只会创建这些嵌套对象或数组的引用副本\",{\"1\":{\"11\":1}}],[\"浅拷贝只复制了对象的第一层属性值\",{\"1\":{\"11\":1}}],[\"浅拷贝与深拷贝\",{\"0\":{\"10\":1}}],[\"浅拷贝\",{\"0\":{\"6\":1,\"11\":1}}],[\"深拷贝会递归地复制整个对象及其所有嵌套的对象和数组\",{\"1\":{\"12\":1}}],[\"深拷贝和浅拷贝一般情况都是在引用数据类型的基础上所讨论的\",{\"1\":{\"10\":1}}],[\"深拷贝\",{\"0\":{\"6\":1,\"12\":1}}],[\"fr\",{\"1\":{\"23\":5}}],[\"frameworks\",{\"0\":{\"4\":1}}],[\"fetch\",{\"1\":{\"22\":2}}],[\"false\",{\"1\":{\"21\":1}}],[\"filehandle\",{\"1\":{\"21\":2}}],[\"files\",{\"1\":{\"19\":1,\"20\":1,\"23\":1}}],[\"filelist\",{\"1\":{\"19\":1}}],[\"filereader\",{\"0\":{\"23\":1},\"1\":{\"17\":1,\"23\":15,\"24\":1}}],[\"file\",{\"0\":{\"17\":1},\"1\":{\"17\":7,\"19\":1,\"23\":5}}],[\"for\",{\"1\":{\"12\":1,\"24\":1}}],[\"function\",{\"1\":{\"12\":2}}],[\"full\",{\"1\":{\"2\":1}}],[\"assets\",{\"1\":{\"22\":1}}],[\"async\",{\"1\":{\"21\":1,\"22\":1}}],[\"axios\",{\"1\":{\"22\":1}}],[\"await\",{\"1\":{\"21\":1,\"22\":1}}],[\"accept\",{\"1\":{\"21\":1}}],[\"api\",{\"0\":{\"21\":1},\"1\":{\"21\":1,\"23\":1}}],[\"age\",{\"1\":{\"10\":3,\"12\":2}}],[\"arraybuffer\",{\"0\":{\"24\":1},\"1\":{\"23\":1,\"24\":5}}],[\"array\",{\"1\":{\"9\":2,\"12\":1}}],[\"arr\",{\"1\":{\"9\":3}}],[\"a\",{\"1\":{\"2\":1}}],[\"and\",{\"0\":{\"4\":1},\"1\":{\"1\":1,\"2\":2}}],[\"gif\",{\"1\":{\"21\":1}}],[\"github\",{\"0\":{\"5\":1}}],[\"getelementbyid\",{\"1\":{\"19\":1,\"20\":1,\"21\":1,\"23\":1}}],[\"group\",{\"1\":{\"2\":1}}],[\"goals\",{\"1\":{\"2\":1}}],[\"go\",{\"1\":{\"2\":1}}],[\"obj\",{\"1\":{\"12\":8}}],[\"objb\",{\"1\":{\"10\":2,\"11\":4,\"12\":2}}],[\"obja\",{\"1\":{\"10\":4,\"11\":10,\"12\":3}}],[\"object\",{\"1\":{\"9\":2,\"12\":1,\"16\":1}}],[\"overview\",{\"0\":{\"5\":1}}],[\"opensource\",{\"1\":{\"2\":1}}],[\"onprogress\",{\"1\":{\"23\":1}}],[\"onloadend\",{\"1\":{\"23\":1}}],[\"onloadstart\",{\"1\":{\"23\":1}}],[\"onload\",{\"1\":{\"23\":3}}],[\"onerror\",{\"1\":{\"23\":1}}],[\"onabort\",{\"1\":{\"23\":1}}],[\"onclick\",{\"1\":{\"21\":1}}],[\"onchange\",{\"1\":{\"19\":2,\"23\":1}}],[\"ondrop\",{\"1\":{\"20\":4}}],[\"ondragover\",{\"1\":{\"20\":4}}],[\"on\",{\"1\":{\"2\":2}}],[\"catch\",{\"1\":{\"22\":1}}],[\"cake\",{\"1\":{\"19\":2,\"20\":3,\"21\":2,\"22\":1,\"23\":2}}],[\"createimagebitmap\",{\"1\":{\"17\":1}}],[\"createobjecturl\",{\"1\":{\"17\":1}}],[\"context\",{\"1\":{\"17\":1}}],[\"const\",{\"1\":{\"19\":1,\"20\":1,\"21\":3,\"23\":3,\"24\":5}}],[\"constructor\",{\"1\":{\"9\":1}}],[\"console\",{\"1\":{\"9\":2,\"10\":2,\"11\":4,\"12\":2,\"19\":1,\"20\":1,\"21\":1,\"22\":2,\"23\":2,\"24\":1}}],[\"copy\",{\"1\":{\"12\":3}}],[\"code\",{\"1\":{\"8\":1,\"11\":1}}],[\"collaborate\",{\"1\":{\"2\":1}}],[\"currently\",{\"1\":{\"2\":2}}],[\"current\",{\"0\":{\"2\":1}}],[\"large\",{\"1\":{\"16\":1}}],[\"languages\",{\"0\":{\"3\":1}}],[\"li\",{\"1\":{\"10\":1,\"11\":4,\"12\":3}}],[\"length\",{\"1\":{\"24\":2}}],[\"let\",{\"1\":{\"8\":1,\"9\":1,\"10\":2,\"11\":4,\"12\":4,\"24\":1}}],[\"learning\",{\"1\":{\"2\":1}}],[\"learn\",{\"1\":{\"1\":1,\"2\":1}}],[\"loading\",{\"1\":{\"23\":1}}],[\"log\",{\"1\":{\"9\":2,\"10\":2,\"11\":4,\"12\":2,\"19\":1,\"20\":1,\"21\":1,\"22\":2,\"23\":2,\"24\":1}}],[\"lot\",{\"1\":{\"2\":1}}],[\"looking\",{\"1\":{\"2\":1}}],[\"🥅\",{\"1\":{\"2\":1}}],[\"📚\",{\"1\":{\"2\":1}}],[\"🔭\",{\"1\":{\"2\":1}}],[\"wrapbuffer\",{\"1\":{\"24\":2}}],[\"width\",{\"1\":{\"20\":1}}],[\"window\",{\"1\":{\"9\":2,\"10\":2,\"11\":4,\"12\":2,\"19\":2,\"20\":2,\"21\":5,\"22\":2,\"23\":3,\"24\":1}}],[\"web\",{\"1\":{\"2\":1,\"23\":1}}],[\"working\",{\"1\":{\"2\":1}}],[\"target\",{\"1\":{\"19\":1,\"23\":2}}],[\"typedarrray\",{\"1\":{\"24\":3}}],[\"typescript\",{\"1\":{\"24\":1}}],[\"types\",{\"1\":{\"21\":1}}],[\"type=\",{\"1\":{\"19\":1,\"23\":1}}],[\"type\",{\"1\":{\"19\":1}}],[\"typeof\",{\"1\":{\"9\":1,\"12\":1}}],[\"then\",{\"1\":{\"22\":1}}],[\"there\",{\"0\":{\"1\":1}}],[\"this\",{\"1\":{\"12\":1}}],[\"true\",{\"1\":{\"9\":1,\"21\":1}}],[\"trying\",{\"1\":{\"1\":1}}],[\"tools\",{\"0\":{\"4\":1}}],[\"to\",{\"1\":{\"1\":1,\"2\":1}}],[\"zequanr\",{\"0\":{\"1\":1}}],[\"multiple=\",{\"1\":{\"19\":1}}],[\"multiple\",{\"1\":{\"19\":2,\"21\":1}}],[\"ming\",{\"1\":{\"10\":1,\"11\":4,\"12\":3}}],[\"mynum\",{\"1\":{\"8\":4}}],[\"my\",{\"0\":{\"2\":1}}],[\"more\",{\"1\":{\"1\":1}}],[\"m\",{\"0\":{\"1\":1},\"1\":{\"1\":1,\"2\":3}}],[\"i++\",{\"1\":{\"24\":1}}],[\"image\",{\"1\":{\"21\":1,\"22\":1}}],[\"images\",{\"1\":{\"21\":1}}],[\"id=\",{\"1\":{\"19\":1,\"20\":1,\"21\":1,\"23\":1}}],[\"int8array\",{\"1\":{\"24\":1}}],[\"input\",{\"0\":{\"19\":1},\"1\":{\"19\":1}}],[\"in\",{\"1\":{\"12\":1}}],[\"instanceof\",{\"1\":{\"9\":2}}],[\"isarray\",{\"1\":{\"12\":1}}],[\"if\",{\"1\":{\"12\":2}}],[\"i\",{\"0\":{\"1\":1},\"1\":{\"1\":1,\"2\":3,\"24\":4}}],[\"关于我\",{\"0\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
