const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,u=Array.from(n.keys());this.set=t,this._type=s,this._path=u.length>0?[{node:n,keys:u}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ut=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const u=t.length+1,o=u+s,i=new Uint8Array(o*u).fill(s+1);for(let r=0;r<u;++r)i[r]=r;for(let r=1;r<o;++r)i[r*u]=r;return R(e,t,s,n,i,1,u,""),n},R=(e,t,s,n,u,o,i,r)=>{const d=o*i;t:for(const l of e.keys())if(l===F){const a=u[d-1];a<=s&&n.set(r,[e.get(l),a])}else{let a=o;for(let h=0;h<l.length;++h,++a){const m=l[h],p=i*a,f=p-i;let c=u[p];const g=Math.max(0,a-s-1),_=Math.min(i-1,a+s);for(let y=g;y<_;++y){const b=m!==t[y],z=u[f+y]+ +b,A=u[f+y+1]+1,w=u[p+y]+1,L=u[p+y+1]=Math.min(z,A,w);L<c&&(c=L)}if(c>s)continue t}R(e.get(l),t,s,n,u,a,i,r+l)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[u,o]=M(n);for(const i of u.keys())if(i!==F&&i.startsWith(o)){const r=new Map;return r.set(i.slice(o.length),u.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ut(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,O(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);let u=n.get(F);return u===void 0&&n.set(F,u=s()),u}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,u]of t)s.set(n,u);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},O=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const o of e.keys())if(o!==F&&t[n]===o[0]){const i=Math.min(s-n,o.length);let r=1;for(;r<i&&t[n+r]===o[r];)++r;const d=e.get(o);if(r===o.length)e=d;else{const l=new Map;l.set(o.slice(r),d),e.set(t.slice(n,n+r),l),e.delete(o),e=l}n+=r;continue t}const u=new Map;return e.set(t.slice(n),u),u}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)W(n);else if(s.size===1){const[u,o]=s.entries().next().value;q(n,u,o)}}},W=e=>{if(e.length===0)return;const[t,s]=M(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,u]=t.entries().next().value;n!==F&&q(e.slice(0,-1),n,u)}},q=(e,t,s)=>{if(e.length===0)return;const[n,u]=M(e);n.set(u+t,s),n.delete(u)},M=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",$="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},N=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:u,terms:o,match:i}=t.get(s);n.score=n.score+u,n.match=Object.assign(n.match,i),P(n.terms,o)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const u=e.get(n);if(u==null)continue;const{score:o,terms:i,match:r}=t.get(n);P(u.terms,i),s.set(n,{score:u.score+o,terms:u.terms,match:Object.assign(u.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,u,o)=>{const{k:i,b:r,d}=o;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/u)))},ft=e=>(t,s,n)=>{const u=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,o=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:u,prefix:o}},H=(e,t,s,n)=>{for(const u of Object.keys(e._fieldIds))if(e._fieldIds[u]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${u}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const u=e._index.fetch(n,ht),o=u.get(t);o==null||o.get(s)==null?H(e,s,t,n):o.get(s)<=1?o.size<=1?u.delete(t):o.delete(s):o.set(s,o.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:$,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,u,o,i,r,d=new Map)=>{if(u==null)return d;for(const l of Object.keys(o)){const a=o[l],h=e._fieldIds[l],m=u.get(h);if(m==null)continue;let p=m.size;const f=e._avgFieldLength[h];for(const c of m.keys()){if(!e._documentIds.has(c)){gt(e,h,c,s),p-=1;continue}const g=i?i(e._documentIds.get(c),s,e._storedFields.get(c)):1;if(!g)continue;const _=m.get(c),y=e._fieldLength.get(c)[h],b=at(_,p,e._documentCount,y,f,r),z=n*a*g*b,A=d.get(c);if(A){A.score+=z,lt(A.terms,t);const w=G(A.match,s);w?w.push(l):A.match[s]=[l]}else d.set(c,{score:z,terms:[t],match:{[s]:[l]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},u=(n.fields||e._options.fields).reduce((c,g)=>({...c,[g]:G(n.boost,g)||1}),{}),{boostDocument:o,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:l,prefix:a}={...J.weights,...i},h=e._index.get(t.term),m=B(e,t.term,t.term,1,h,u,o,d);let p,f;if(t.prefix&&(p=e._index.atPrefix(t.term)),t.fuzzy){const c=t.fuzzy===!0?.2:t.fuzzy,g=c<1?Math.min(r,Math.round(t.term.length*c)):c;g&&(f=e._index.fuzzyGet(t.term,g))}if(p)for(const[c,g]of p){const _=c.length-t.term.length;if(!_)continue;f?.delete(c);const y=a*c.length/(c.length+.3*_);B(e,t.term,c,y,g,u,o,d,m)}if(f)for(const c of f.keys()){const[g,_]=f.get(c);if(!_)continue;const y=l*c.length/(c.length+_);B(e,t.term,c,y,g,u,o,d,m)}return m},X=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(m=>X(e,m,a));return Y(h,a.combineWith)}const{tokenize:n,processTerm:u,searchOptions:o}=e._options,i={tokenize:n,processTerm:u,...o,...s},{tokenize:r,processTerm:d}=i,l=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(ft(i)).map(a=>At(e,a,i));return Y(l,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),u=[];for(const[o,{score:i,terms:r,match:d}]of n){const l=r.length,a={id:e._documentIds.get(o),score:i*l,terms:Object.keys(d),match:d};Object.assign(a,e._storedFields.get(o)),(s.filter==null||s.filter(a))&&u.push(a)}return u.sort(N),u},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:o,terms:i}of K(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=o,d.count+=1):n.set(r,{score:o,terms:i,count:1})}const u=[];for(const[o,{score:i,terms:r,count:d}]of n)u.push({suggestion:o,terms:r,score:i/d});return u.sort(N),u};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const u={};for(const[o,i]of n)u[o]=Object.fromEntries(i);t.push([s,u])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:u,fieldLength:o,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:l},a)=>{if(l!==1&&l!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=k(n),h._idToShortId=new Map,h._fieldIds=u,h._fieldLength=k(o),h._avgFieldLength=i,h._storedFields=k(r),h._dirtCount=d||0,h._index=new C;for(const[m,p]of h._documentIds)h._idToShortId.set(p,m);for(const[m,p]of e){const f=new Map;for(const c of Object.keys(p)){let g=p[c];l===1&&(g=g.ds),f.set(parseInt(c,10),k(g))}h._index.set(m,f)}return h},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),u=[];let o=0,i=0;const r=(l,a=!1)=>{let h="";i===0?h=l.length>20?`… ${l.slice(-20)}`:l:a?h=l.length+i>100?`${l.slice(0,100-i)}… `:l:h=l.length>20?`${l.slice(0,20)} … ${l.slice(-20)}`:l,h&&u.push(h),i+=h.length,a||(u.push(["mark",t]),i+=t.length,i>=100&&u.push(" …"))};let d=s.indexOf(n,o);if(d===-1)return null;for(;d>=0;){const l=d+n.length;if(r(e.slice(o,d)),o=l,i>100)break;d=s.indexOf(n,o)}return i<100&&r(e.slice(o),!0),u},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(u=>{const{id:o,terms:i,score:r}=u,d=o.includes("@"),l=o.includes("#"),[a,h]=o.split(/[#@]/),m=i.sort((f,c)=>f.length-c.length).filter((f,c)=>i.slice(c+1).every(g=>!g.includes(f))),{contents:p}=n[a]??={title:"",contents:[]};if(d)p.push([{type:"customField",key:a,index:h,display:m.map(f=>u.c.map(c=>j(c,f))).flat().filter(f=>f!==null)},r]);else{const f=m.map(c=>j(u.h,c)).filter(c=>c!==null);if(f.length&&p.push([{type:l?"heading":"title",key:a,...l&&{anchor:h},display:f},r]),"t"in u)for(const c of u.t){const g=m.map(_=>j(c,_)).filter(_=>_!==null);g.length&&p.push([{type:"text",key:a,...l&&{anchor:h},display:g},r])}}}),Q(n).sort(([,u],[,o])=>"max"==="total"?xt(u,o):kt(u,o)).map(([u,{title:o,contents:i}])=>{if(!o){const r=it(t,u);r&&(o=r.h)}return{title:o,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":78,\"nextId\":78,\"documentIds\":{\"0\":\"v-3e214e9b\",\"1\":\"v-3e214e9b#hi-there-i-m-zequanr\",\"2\":\"v-3e214e9b#my-current-status\",\"3\":\"v-3e214e9b#languages\",\"4\":\"v-3e214e9b#frameworks-and-tools\",\"5\":\"v-3e214e9b#github-overview\",\"6\":\"v-7c1d41a1\",\"7\":\"v-7c1d41a1#声明数组\",\"8\":\"v-7c1d41a1#数组初始化\",\"9\":\"v-7c1d41a1#访问数组元素\",\"10\":\"v-7c1d41a1#计算数组长度\",\"11\":\"v-7c1d41a1@0\",\"12\":\"v-7c1d41a1@1\",\"13\":\"v-49cda705\",\"14\":\"v-49cda705#数据结构\",\"15\":\"v-49cda705#创建节点\",\"16\":\"v-49cda705#查询节点\",\"17\":\"v-49cda705#遍历节点-递归方法\",\"18\":\"v-49cda705#前序\",\"19\":\"v-49cda705#中序\",\"20\":\"v-49cda705#后序\",\"21\":\"v-49cda705#遍历节点-非递归方法\",\"22\":\"v-49cda705#前序-1\",\"23\":\"v-49cda705#中序-1\",\"24\":\"v-49cda705#后序-1\",\"25\":\"v-49cda705@0\",\"26\":\"v-49cda705@1\",\"27\":\"v-558cfeed\",\"28\":\"v-558cfeed#链表的结构定义\",\"29\":\"v-558cfeed#链表的常用操作\",\"30\":\"v-558cfeed#创建节点\",\"31\":\"v-558cfeed#插入节点\",\"32\":\"v-558cfeed#查找节点\",\"33\":\"v-558cfeed#删除节点\",\"34\":\"v-558cfeed#打印节点\",\"35\":\"v-558cfeed#完整代码\",\"36\":\"v-558cfeed#常见链表类型\",\"37\":\"v-558cfeed@0\",\"38\":\"v-558cfeed@1\",\"39\":\"v-d0e11c2e\",\"40\":\"v-d0e11c2e#队列的概念\",\"41\":\"v-d0e11c2e#队列的常用操作\",\"42\":\"v-d0e11c2e#队列的实现\",\"43\":\"v-d0e11c2e#基于链表实现\",\"44\":\"v-d0e11c2e#基于数组实现\",\"45\":\"v-d0e11c2e#为什么要用模运算\",\"46\":\"v-d0e11c2e@0\",\"47\":\"v-d0e11c2e@1\",\"48\":\"v-ca2e115c\",\"49\":\"v-ca2e115c#栈的常用操作\",\"50\":\"v-ca2e115c#栈的实现\",\"51\":\"v-ca2e115c#基于链表实现\",\"52\":\"v-ca2e115c#基于数组实现\",\"53\":\"v-ca2e115c@0\",\"54\":\"v-ca2e115c@1\",\"55\":\"v-7f500abe\",\"56\":\"v-7f500abe#js-数据类型\",\"57\":\"v-7f500abe#基本数据类型\",\"58\":\"v-7f500abe#引用数据类型\",\"59\":\"v-7f500abe#浅拷贝与深拷贝\",\"60\":\"v-7f500abe#浅拷贝\",\"61\":\"v-7f500abe#深拷贝\",\"62\":\"v-7f500abe@0\",\"63\":\"v-7f500abe@1\",\"64\":\"v-1350cfe0\",\"65\":\"v-1350cfe0#blob\",\"66\":\"v-1350cfe0#file\",\"67\":\"v-1350cfe0#前端获取文件的几种情况\",\"68\":\"v-1350cfe0#input-上传\",\"69\":\"v-1350cfe0#文件拖放\",\"70\":\"v-1350cfe0#showopenfilepicker-api\",\"71\":\"v-1350cfe0#请求远端\",\"72\":\"v-1350cfe0#filereader\",\"73\":\"v-1350cfe0#arraybuffer\",\"74\":\"v-1350cfe0@0\",\"75\":\"v-1350cfe0@1\",\"76\":\"v-7e4580cb\",\"77\":\"v-22142b7f\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[5,10],\"2\":[4,27],\"3\":[2],\"4\":[4],\"5\":[3],\"6\":[1,7],\"7\":[1,27],\"8\":[1,63],\"9\":[1,18],\"10\":[1,30],\"11\":[null,null,1],\"12\":[null,null,2],\"13\":[1,24],\"14\":[1,19],\"15\":[1,17],\"16\":[1,21],\"17\":[2],\"18\":[1,17],\"19\":[1,17],\"20\":[1,17],\"21\":[2],\"22\":[1,29],\"23\":[1,29],\"24\":[1,33],\"25\":[null,null,1],\"26\":[null,null,2],\"27\":[1,21],\"28\":[1,61],\"29\":[1],\"30\":[1,47],\"31\":[1,21],\"32\":[1,24],\"33\":[1,28],\"34\":[1,15],\"35\":[1,90],\"36\":[1,39],\"37\":[null,null,1],\"38\":[null,null,2],\"39\":[1,12],\"40\":[1,6],\"41\":[1,11],\"42\":[1,6],\"43\":[1,67],\"44\":[1,66],\"45\":[1,15],\"46\":[null,null,1],\"47\":[null,null,2],\"48\":[1,10],\"49\":[1,9],\"50\":[1,13],\"51\":[1,56],\"52\":[1,55],\"53\":[null,null,1],\"54\":[null,null,2],\"55\":[2],\"56\":[2,9],\"57\":[1,32],\"58\":[1,28],\"59\":[1,30],\"60\":[1,38],\"61\":[1,66],\"62\":[null,null,1],\"63\":[null,null,1],\"64\":[2],\"65\":[1,16],\"66\":[1,35],\"67\":[1],\"68\":[2,35],\"69\":[1,52],\"70\":[2,46],\"71\":[1,23],\"72\":[1,128],\"73\":[1,62],\"74\":[null,null,1],\"75\":[null,null,1],\"76\":[2],\"77\":[1]},\"averageFieldLength\":[1.3704247428905616,28.930404707013775,0.5004173381564049],\"storedFields\":{\"0\":{\"h\":\"关于我\"},\"1\":{\"h\":\"Hi there, I'm ZEQUANR\",\"t\":[\"I'm trying to learn more and become better \"]},\"2\":{\"h\":\"My current status:\",\"t\":[\"🔭 I’m currently working on Full-Stack Web Development\",\"📚 I’m currently learning Go\",\"🥅 2024 Goals: I’m looking to collaborate on opensource and group projects and Learn a lot.\"]},\"3\":{\"h\":\"Languages:\"},\"4\":{\"h\":\"Frameworks and Tools:\"},\"5\":{\"h\":\"Github Overview:\"},\"6\":{\"h\":\"数组\",\"t\":[\"在 C 语言中，数组是将其相同类型元素存储在连续的内存空间中，数组通过变量名后加方括号表示，方括号里面是数组的元素数量。\"]},\"7\":{\"h\":\"声明数组\",\"t\":[\"数组通过变量名后加方括号表示，方括号里面是数组的元素数量，也就是: 类型 + 变量名称 + [一个正值的长度]， 在 code - 1 中声明了名为 array 长度为 100 元素类型为 int 的数组。\",\"int array[100]; \",\"数组中的元素是从 0 开始编号，所以数组 array[100] 就是从第 0 号元素一直到第 99 号元素，最后一个元素的编号会比数组长度小 1。\"]},\"8\":{\"h\":\"数组初始化\",\"t\":[\"数组在声明时，可以使用大括号，同时对每一个元素赋值，但大括号里面的值不能多于数组的长度，否则编译时会报错。\",\"int array[6] = { 1, 2, 3, 4, 5, 6 }; int array[6] = { 1, 2, 3, 4, 5, 6, 7 }; // 报错 \",\"如果大括号里面的值，少于数组的元素数量，那么未赋值的元素自动初始化为 0，如果要将整个数组的每一个元素都设置为零，最简单的写法就是下面这样。\",\"int array[5] = { 1, 2, 3 }; // 等同于 int array[5] = { 1, 2, 3, 0, 0 }; int array[5] = { 0 }; // 等同于 int array[5] = { 0, 0, 0, 0, 0 }; // 100 个 0 \",\"但要注意！使用大括号赋值时，必须在数组声明时赋值，否则编译时会报错，其原因在于是，C 语言规定，数组变量一旦声明，就不得修改变量指向的地址，同样的原因，数组赋值之后，再用大括号修改值，也是不允许的。\",\"int array[6]; array = { 1, 2, 3, 4, 5, 6 }; // 报错 int array[6] = { 1, 2, 3, 4, 5, 6 }; array = { 6, 5, 4, 3, 2, 1 }; // 报错 \",\"数组初始化时，可以指定为哪些位置的元素赋值，因为是制定的元素赋值，所以可以不按照顺序任意赋值，并且指定位置的赋值与顺序赋值，可以结合使用，但不建议这样做，会增加读代码的难度。\",\"int array[12] = { [2] = 22, [9] = 99, [11] = 122 }; // 等同于 int array[12] = { 0, 0, 22, 0, 0, 0, 0, 0, 0, 99, 0, 122 }; int array[12] = { [9] = 22, [2] = 99, [11] = 122 }; // 等同于 int array[12] = { 0, 0, 99, 0, 0, 0, 0, 0, 0, 22, 0, 122 }; int array[12] = { 1, 2, 3, [2] = 22, [9] = 99, [2] = 44, 88, [11] = 122 }; // 等同于 int array[] = { 1, 2, 44, 88, 0, 0, 0, 0, 0, 99, 0, 122 } \",\"C 语言允许省略方括号里面的数组元素数量，这时将根据大括号里面的值的数量，自动确定数组的长度，省略成员数量时，如果同时采用指定位置的赋值，那么数组长度将是最大的指定位置再加 1。\",\"int a[] = { 1, 2, 3 }; // 数组长度为 3 int a[] = { [9] = 12 } // 数组长度为 10 \"]},\"9\":{\"h\":\"访问数组元素\",\"t\":[\"上面示例中，数组 array 只有 100 个元素，因此 array[100] 这个位置是不存在的，但是！引用这个位置并不会报错，会正常运行，使得紧跟在 array 后面的那块内存区域被赋值，而那实际上是其他变量的区域，因此不知不觉就更改了其他变量的值，这很容易引发错误，而且难以发现。\"]},\"10\":{\"h\":\"计算数组长度\",\"t\":[\"计算数组长度可以使用 sizeof 函数，sizeof 可以获得数据类型或变量在内存中所占的字节数，同样，用 sizeof 也可以获得整个数组在内存中所占的字节数，因为数组中每个元素的类型都是一样的，在内存中所占的字节数都是相同的，所以总的字节数除以一个元素所占的字节数就是数组的长度。\",\"#include <stdio.h> int main() { int array[] = { 1, 2, 3, 4, 5, 6 }; int len = sizeof(array) / sizeof(array[0]); printf(\\\"len = %d\\\\n\\\", len); return 0; } \"]},\"11\":{\"c\":[\"C\"]},\"12\":{\"c\":[\"C\",\"数据结构\"]},\"13\":{\"h\":\"二叉树\",\"t\":[\"二叉树是计算机科学中一种基本且广泛应用的数据结构，它以独特的分层结构和高效的查找性能，在解决各种问题时展现出强大的功能。在 C 语言中，通过使用指针可以方便地构建和操作二叉树结构。本文将详细介绍 C 语言中二叉树的基本概念、实现方法以及常见操作。\",\"二叉树是一种每个节点最多有两个子节点的树形数据结构，这两个子节点分别称为左子节点和右子节点。二叉树既可以为空，也可以由一个根节点及两棵分别作为其左右子树的二叉树构成。根据节点间的关系和附加条件，二叉树有多种变体，如完全二叉树、满二叉树、平衡二叉树（如 AVL 树和红黑树）以及特殊的二叉搜索树等。\"]},\"14\":{\"h\":\"数据结构\",\"t\":[\"首先我们先来看一下二叉树的数据结构，从 code - 1 中我们可以看到它主要是由两部分组成，分别为指向左右两边的指针，与用于存储数据的数据域，其中从指针中我们不难发现每个节点最多有两个分支，且顺序不能随意颠倒。\",\"typedef struct node { struct node *left; struct node *right; int value; } node_t, *node_ptr; \"]},\"15\":{\"h\":\"创建节点\",\"t\":[\"node_ptr create(int val) { node_ptr p_node = (node_ptr)malloc(sizeof(node_t)); if (p_node != NULL) { p_node->left = NULL; p_node->right = NULL; p_node->value = val; } return p_node; } \"]},\"16\":{\"h\":\"查询节点\",\"t\":[\"node_ptr find(node_ptr root, int val) { node_ptr current = root; while (current != NULL) { if (current->value == val) { goto finish; } if (current->value > val) { current = current->left; } else { current = current->right; } } finish: return current; } \"]},\"17\":{\"h\":\"遍历节点-递归方法\"},\"18\":{\"h\":\"前序\",\"t\":[\"void pre_order(node_ptr root) { if (root == NULL) { return; } printf(\\\"%d \\\", root->value); if (root->left != NULL) { pre_order(root->left); } if (root->right != NULL) { pre_order(root->right); } } \"]},\"19\":{\"h\":\"中序\",\"t\":[\"void in_order(node_ptr root) { if (root == NULL) { return; } if (root->left != NULL) { in_order(root->left); } printf(\\\"%d \\\", root->value); if (root->right != NULL) { in_order(root->right); } } \"]},\"20\":{\"h\":\"后序\",\"t\":[\"void post_order(node_ptr root) { if (root == NULL) { return; } if (root->left != NULL) { post_order(root->left); } if (root->right != NULL) { post_order(root->right); } printf(\\\"%d \\\", root->value); } \"]},\"21\":{\"h\":\"遍历节点-非递归方法\"},\"22\":{\"h\":\"前序\",\"t\":[\"#define SIZE (64) node_ptr stack[SIZE] = { NULL }; int top = -1; void pre_order_with_stack(node_ptr root) { while (root != NULL || top >= 0) { if (root != NULL) { top++; stack[top] = root; printf(\\\"%d \\\", root->val); root = root->left; } else { root = stack[top]; top--; root = root->right; } } } \"]},\"23\":{\"h\":\"中序\",\"t\":[\"#define SIZE (64) node_ptr stack[SIZE] = { NULL }; int top = -1; void in_order_with_stack(node_ptr root) { while (root != NULL || top >= 0) { if (root != NULL) { top++; stack[top] = root; root = root->left; } else { root = stack[top]; top--; printf(\\\"%d \\\", root->val); root = root->right; } } } \"]},\"24\":{\"h\":\"后序\",\"t\":[\"#define SIZE (64) node_ptr stack[SIZE] = { NULL }; int top = -1; void post_order_with_stack(node_ptr root) { while (root != NULL || top >= 0) { if (root != NULL) { top++; stack[top] = root; root = root->left; } else { root = stack[top]; top--; if (((long)root & 0x1) == 1) { root = (node_ptr)((long)root - 1); printf(\\\"%d \\\", root->val); root = NULL; } else { top++; stack[top] = (node_ptr)((long)root | 0x1); root = root->right; } } } } \"]},\"25\":{\"c\":[\"C\"]},\"26\":{\"c\":[\"C\",\"数据结构\"]},\"27\":{\"h\":\"链表\",\"t\":[\"链表是一种线性数据结构，其中的每一个元素都是一个节点，其中每一个节点都通过指针相连接，指针记录了下一个节点的内存地址，通过它可以从当前节点访问到下一个节点。\",\"要知道计算机中的内存空间是所有程序的公共资源，在一个复杂的系统运行环境下，空闲的内存空间可能散落在内存各处，我们知道，存储数组的内存空间必须是连续的，而当数组非常大时，内存可能无法提供如此大的连续空间，此时链表的灵活性优势就体现出来了。\",\"链表中的每个节点由两部分构成，一是本身存储的数据信息（数据域），二是指向后续节点的指针（指针域）这两部分信息组成的存储结构称之为链表的“节点”\"]},\"28\":{\"h\":\"链表的结构定义\",\"t\":[\"从图 2 中可以看出分散存储是链表最显著的特征，但为了能够保持节点之间的顺序关系，每个节点在存储数据的同时都要配置一个指针，用于指向它的直接后继元素。\",\"#include <stddef.h> // 链表节点结构体定义 typedef struct Node { int value; // 节点数据域 struct Node* next; // 节点指针域，指向下一个节点的地址 } Node, *P_Node; int main() { P_Node head = NULL; // 初始化链表 return 0; } \",\"链表的首个节点被称为“头节点”，头节点通常包含指向下一个节点的指针。对于单链表来说，头结点是整个链表的入口，通过它可以遍历链表中的其他所有节点。如果链表为空，则头结点不存在，或者它的指针指向 NULL。 链表还拥有一个头指针，永远指向链表中第一个节点的位置，也就是链表中的“头节点”。\",\"头指针与头节点的区别：\",\"头指针只声明没有分配存储空间。\",\"头节点进行了声明并分配了一个结点大小的实际物理内存。\",\"在链表的实现中，有时人们会定义两个结构体，一个用于表示链表节点，另一个用于表示整个链表。这样做的原因主要是为了更好地管理链表的状态和提供更清晰的数据封装。\",\"#include <stddef.h> // 链表节点结构体定义 typedef struct Node { int value; // 节点数据域 struct Node* next; // 节点指针域，指向下一个节点的地址 } Node, *P_Node; // 链表结构体定义 typedef struct List { P_Node head; // 链表头结点 int size; // 链表大小（节点数量） } List; int main() { List list = { .head = NULL }; // 初始化链表 return 0; } \",\"从以上代码中可以看出，链表节点 Node 除了包含值，还需额外保存一个指针，因此在相同数据量下，链表比数组占用更多的内存空间。\"]},\"29\":{\"h\":\"链表的常用操作\"},\"30\":{\"h\":\"创建节点\",\"t\":[\"创建链表节点一般情况下需要使用 malloc 方法，该方法返回一个指针。如果分配内存成功，返回可用内存的起始地址，如果失败，则返回 NULL。需要注意的是 malloc 返回的指针类型是通用指针类型 void * 需要根据程序需要进行强制类型转换。**每个使用 malloc 分配的内存可以确保是地址连续的内存空间。多次使用 malloc 分配内存时，不能确保每个独立内存的起始地址是连续的。**使用 malloc 方法得到的内存不会执行内存清零操作，由于动态内存区可被重复使用，因此，程序作者一定要对内存进行初始化操作。\",\"// 创建新节点函数 P_Node create_node(int val) { P_Node new_node = (P_Node)malloc(sizeof(Node)); // 分配内存空间 if (new_node == NULL) { printf(\\\"Memory allocation failed.\\\\n\\\"); return NULL; } new_node->value = val; // 初始化数据域 new_node->next = NULL; // 初始化指针域 return new_node; } \"]},\"31\":{\"h\":\"插入节点\",\"t\":[\"// 在链表末尾添加节点函数 void append_node(List *list, P_Node node) { if (list->head == NULL) { // 如果链表为空，则将节点设为头节点 list->head = node; return; } P_Node last = list->head; while (last->next != NULL) { last = last->next; } last->next = node; // 将节点添加到链表末尾 } \"]},\"32\":{\"h\":\"查找节点\",\"t\":[\"// 查找链表中的第一个具有给定值 val 的节点（如果没有则返回 NULL） P_Node search_node(List list, int val) { while (list.head != NULL) { if (list.head->value == val) { return list.head; // 找到了返回与给定值相同的节点 } list.head = list.head->next; } return NULL; // 如果没有找到，则返回 NULL } \"]},\"33\":{\"h\":\"删除节点\",\"t\":[\"void delete_node(List *list, P_Node node) { if (list->head == NULL) { // 如果链表为空，则无需删除 return; } if (list->head == node) { // 如果要删除的节点是链表中第一个节点 list->head = node->next; // 直接修改链表头指向下一个节点 node->next = NULL; // 清除已删除节点的 next，使其与链表彻底隔离 free(node); // 释放 malloc 函数申请的空间 return; } P_Node last = list->head; while (last->next != NULL) { if (last->next == node) { last->next = node->next; node->next = NULL; free(node); return; } last = last->next; } } \"]},\"34\":{\"h\":\"打印节点\",\"t\":[\"void print_list(List list) { while (list.head != NULL) { printf(\\\"%d-->\\\", list.head->value); list.head = list.head->next; } printf(\\\"NULL\\\\n\\\"); } \"]},\"35\":{\"h\":\"完整代码\",\"t\":[\"#include <stddef.h> #include <stdlib.h> #include <stdio.h> // 链表节点结构体定义 typedef struct Node { int value; // 节点数据域 struct Node* next; // 节点指针域，指向下一个节点的地址 } Node, *P_Node; // 链表结构体定义 typedef struct List { P_Node head; // 链表头结点 int size; // 链表大小（节点数量） } List; P_Node create_node(int val) { P_Node new_node = (P_Node)malloc(sizeof(Node)); // 分配内存空间 if (new_node == NULL) { printf(\\\"Memory allocation failed.\\\\n\\\"); return NULL; } new_node->value = val; // 初始化数据域 new_node->next = NULL; // 初始化指针域 return new_node; } void append_node(List *list, P_Node node) { if (list->head == NULL) { // 如果链表为空，则将节点设为头节点 list->head = node; return; } P_Node last = list->head; while (last->next != NULL) { last = last->next; } last->next = node; // 将节点添加到链表末尾 } // 查找链表中的第一个具有给定值 val 的节点（如果没有则返回 NULL） P_Node search_node(List list, int val) { while (list.head != NULL) { if (list.head->value == val) { return list.head; // 找到了返回与给定值相同的节点 } list.head = list.head->next; } return NULL; // 如果没有找到，则返回 NULL } void delete_node(List *list, P_Node node) { if (list->head == NULL) { // 如果链表为空，则无需删除 return; } if (list->head == node) { // 如果要删除的节点是链表中第一个节点 list->head = node->next; // 直接修改链表头指向下一个节点 node->next = NULL; // 清除已删除节点的 next，使其与链表彻底隔离 free(node); // 释放 malloc 函数申请的空间 return; } P_Node last = list->head; while (last->next != NULL) { if (last->next == node) { last->next = node->next; node->next = NULL; free(node); return; } last = last->next; } } void print_list(List list) { while (list.head != NULL) { printf(\\\"%d-->\\\", list.head->value); list.head = list.head->next; } printf(\\\"NULL\\\\n\\\"); } int main() { List list = { .head = NULL, .size = 10 }; // 初始化链表 for (int i = 0; i < list.size; i++) { append_node(&list, create_node(i)); } print_list(list); delete_node(&list, search_node(list, 0)); delete_node(&list, search_node(list, 1)); delete_node(&list, search_node(list, 2)); delete_node(&list, search_node(list, 3)); delete_node(&list, search_node(list, 4)); delete_node(&list, search_node(list, 5)); delete_node(&list, search_node(list, 6)); delete_node(&list, search_node(list, 7)); delete_node(&list, search_node(list, 8)); delete_node(&list, search_node(list, 9)); print_list(list); return 0; } \"]},\"36\":{\"h\":\"常见链表类型\",\"t\":[\"常见的链表类型包括三种：\",\"单向链表：即前面介绍的普通链表。单向链表的节点包含值和指向下一节点的引用两项数据。我们将首个节点称为头节点，将最后一个节点称为尾节点，尾节点指向空 NULL 。\",\"环形链表：如果我们令单向链表的尾节点指向头节点（首尾相接），则得到一个环形链表。在环形链表中，任意节点都可以视作头节点。\",\"双向链表：与单向链表相比，双向链表记录了两个方向的引用。双向链表的节点定义同时包含指向后继节点（下一个节点）和前驱节点（上一个节点）的引用（指针）。相较于单向链表，双向链表更具灵活性，可以朝两个方向遍历链表，但相应地也需要占用更多的内存空间。\",\"typedef struct Node { int data; // 节点数据域 struct Node* next; // 节点指针域，指向下一个节点的地址 struct Node* prev; // 节点指针域，指向上一个节点的地址 } Node; \"]},\"37\":{\"c\":[\"C\"]},\"38\":{\"c\":[\"C\",\"数据结构\"]},\"39\":{\"h\":\"队列\",\"t\":[\"在计算机科学中，数据结构是软件开发的基础，它们负责组织和存储数据以优化算法性能。其中，队列是一种基础且广泛应用的线性数据结构，尤其在多任务处理、消息传递、操作系统调度等领域具有重要作用。本文将重点探讨如何在 C 语言中实现并操作队列。\"]},\"40\":{\"h\":\"队列的概念\",\"t\":[\"队列（queue）遵循先进先出的原则，就像现实生活中排队等待服务的情景一样，最先到达的元素最先离开。\"]},\"41\":{\"h\":\"队列的常用操作\",\"t\":[\"我们将队列头部称为“队首”，尾部称为“队尾”，队列有两个主要的操作：“入队”与“出队”，将把元素加入队尾的操作称为“入队”，删除队首元素的操作称为“出队”。\"]},\"42\":{\"h\":\"队列的实现\",\"t\":[\"为了实现队列，我们需要一种数据结构，可以在一端添加元素，并在另一端删除元素，链表和数组都符合要求。\"]},\"43\":{\"h\":\"基于链表实现\",\"t\":[\"我们可以将链表的“头节点”和“尾节点”分别视为“队首”和“队尾”，规定队尾仅可添加节点，队首仅可删除节点。\",\"#include <stdlib.h> typedef struct Node { int data; struct Node *next; } Node, *P_Node; typedef struct Queue { P_Node front; // 队头指针 P_Node rear; // 队尾指针 int size; } Queue, *P_Queue; P_Queue create_queue() { P_Queue queue = (P_Queue)malloc(sizeof(Queue)); if (queue != NULL) { queue->front = NULL; queue->rear = NULL; queue->size = 0; } return queue; } P_Node create_node(int value) { P_Node node = (P_Node)malloc(sizeof(Node)); if (node != NULL) { node->data = value; node->next = NULL; } return node; } \",\"入队操作：将要入队的节点插入到当前队列尾节点的后面，最后将尾节点变更为当前将要入队的节点。\",\"void push(P_Queue queue, int value) { P_Node node = create_node(value); if (node == NULL) { printf(\\\"Failed to allocate node\\\\n\\\"); return; } if (queue->front == NULL) { // 当队列中没有节点时，头节点与尾节点均指向将要入队的节点 queue->front = queue->rear = node; } else { // 将要入队的节点插入到当前队列尾节点的后面 queue->rear->next = node; // 更换尾节点的指向，保证队列的尾节点总是指向实际的最后一个节点。 queue->rear = node; } queue->size++; } \",\"出队操作：将当前队列头节点变更为头节点后下一个节点。\",\"void pop(P_Queue queue) { if (queue->size == 0 && queue->front == NULL) { printf(\\\"Queue is null\\\\n\\\"); return; } P_Node temp = queue->front; printf(\\\"%d\\\\n\\\", temp->data); queue->front = temp->next; queue->size--; free(temp); } \"]},\"44\":{\"h\":\"基于数组实现\",\"t\":[\"在数组中删除首元素时需要对当前数组进行遍历以确定首元素所在位置，这会导致出队操作效率较低。然而，我们可以采用以下巧妙方法来避免这个问题。 我们可以使用一个变量 front 指向队首元素的索引，并维护一个变量 size 用于记录队列长度。定义 rear = front + size ，这个公式计算出的 rear 指向队尾元素之后的下一个位置，基于此设计，数组中包含元素的有效区间为 [front, rear - 1]。\",\"#include <stdlib.h> typedef struct Queue { int *nums; int front; int size; int cap; } Queue, *P_Queue; P_Queue create_queue(int cap) { P_Queue queue = (P_Queue)malloc(sizeof(Queue)); if (queue != NULL) { queue->cap = cap; queue->nums = (int*)malloc(sizeof(int) * queue->cap); if (queue->nums == NULL) { return NULL; } queue->front = queue->size = 0; } return queue; } int main() { return 0; } \",\"入队操作：将要入队的元素赋值给 rear 索引处，并将 size 增加 1 。\",\"void push(P_Queue queue, int val) { if (queue->size == queue->cap) { printf(\\\"Queue is full\\\\n\\\"); return; } // 将输入元素赋值给 rear 索引处 int rear = (queue->front + queue->size) % queue->cap; queue->nums[rear] = val; // 并将 size 增加 1 queue->size++; } \",\"出队操作：只需将 front 增加 1 ，并将 size 减少 1 。\",\"void pop(P_Queue queue) { if (queue->size == 0) { printf(\\\"Queue is empty\\\\n\\\"); return; } int elem = queue->nums[queue->front]; printf(\\\"%d\\\\n\\\", elem); // 将 front 增加 1 queue->front = (queue->front + 1) % queue->cap; // 将 size 减少 1 queue->size--; } \"]},\"45\":{\"h\":\"为什么要用模运算\",\"t\":[\"模运算对于处理循环序列非常有用，例如，在当前数组或链表的索引循环中，通过使用模运算可以让索引值始终保持在有效范围内。例如，当你有一个长度为 n 的数组时，计算下标 i % n 可以确保下标总是在 0 到（n - 1）之间。\"]},\"46\":{\"c\":[\"C\"]},\"47\":{\"c\":[\"C\",\"数据结构\"]},\"48\":{\"h\":\"栈\",\"t\":[\"栈是一种遵循先入后出的逻辑的线性数据结构。我们可以将栈类比为桌面上的一摞盘子，如果想取出底部的盘子，则需要先将上面的盘子依次移走。我们将盘子替换为各种类型的元素（如整数、字符、对象等），就得到了栈这种数据结构。\"]},\"49\":{\"h\":\"栈的常用操作\",\"t\":[\"我们把堆叠元素的顶部称为“栈顶”，底部称为“栈底”。将把元素添加到栈顶的操作叫作“入栈”，删除栈顶元素的操作叫作“出栈”。\"]},\"50\":{\"h\":\"栈的实现\",\"t\":[\"为了深入了解栈的运行机制，我们来尝试自己实现一个栈。栈遵循先入后出的原则，因此我们只能在栈顶添加或删除元素。然而，数组和链表都可以在任意位置添加和删除元素，因此栈可以视为一种受限制的数组或链表。换句话说，我们可以“屏蔽”数组或链表的部分无关操作，使其对外表现的逻辑符合栈的特性。\"]},\"51\":{\"h\":\"基于链表实现\",\"t\":[\"使用链表实现栈时，我们可以将链表的头节点视为栈顶，尾节点视为栈底。对于入栈操作，我们只需将元素插入链表头部，这种节点插入方法被称为“头插法”。而对于出栈操作，只需将头节点从链表中删除即可。\",\"#include <stdlib.h> #include <stdio.h> typedef struct Node { int value; struct Node* next; } Node, *P_Node; typedef struct Stack { P_Node top; int size; } Stack, *P_Stack; // 构造函数 P_Stack create_stack() { P_Stack stack = (P_Stack)malloc(sizeof(Stack)); if (stack != NULL) { stack->top = NULL; stack->size = 0; } return stack; } // 入栈 void push(P_Stack stack, int val) { P_Node node = (P_Node)malloc(sizeof(Node)); if (node != NULL) { node->next = stack->top; node->value = val; stack->top = node; stack->size++; } } // 出栈 void pop(P_Stack stack) { if (stack->size == 0) { printf(\\\"stack is empty\\\\n\\\"); return; } P_Node node = stack->top; stack->top = stack->top->next; printf(\\\"%d\\\\n\\\", node->value); free(node); stack->size--; } int main() { P_Stack stack = create_stack(); push(stack, 1); push(stack, 2); pop(stack); pop(stack); pop(stack); return 0; } \"]},\"52\":{\"h\":\"基于数组实现\",\"t\":[\"使用数组实现栈时，我们可以将数组的尾部作为栈顶。入栈与出栈操作分别对应在数组尾部添加元素与删除元素。\",\"#include <stdlib.h> #include <stdio.h> typedef struct Stack { int capacity; // 栈的容量 int top; // 栈顶元素的索引 int* array; // 存储栈元素的数组 } Stack, *P_Stack; // 构造函数 P_Stack create_stack(int cap) { P_Stack stack = (P_Stack)malloc(sizeof(Stack)); if (stack != NULL) { stack->capacity = cap; stack->top = -1; stack->array = (int*)malloc(sizeof(int) * stack->capacity); if (stack->array == NULL) { return NULL; } } return stack; } // 入栈 void push(P_Stack stack, int val) { if (stack->top == stack->capacity - 1) { printf(\\\"stack is full\\\\n\\\"); return; } stack->top++; stack->array[stack->top] = val; } // 出栈 void pop(P_Stack stack) { if (stack->top == - 1) { printf(\\\"stack is empty\\\\n\\\"); return; } int data = stack->array[stack->top]; stack->top--; printf(\\\"%d\\\\n\\\", data); } int main() { P_Stack stack = create_stack(10); for (int i = 0; i <= 10; i++) { push(stack, i); } pop(stack); pop(stack); pop(stack); return 0; } \"]},\"53\":{\"c\":[\"C\"]},\"54\":{\"c\":[\"C\",\"数据结构\"]},\"55\":{\"h\":\"深拷贝&浅拷贝\"},\"56\":{\"h\":\"JS 数据类型\",\"t\":[\"JavaScript 是一种动态类型的语言，这意味着变量可以在程序执行期间更改其数据类型。JavaScript 提供了多种数据类型，可以大致分为两类：基本数据类型（也称为原始值）和引用数据类型。\"]},\"57\":{\"h\":\"基本数据类型\",\"t\":[\"基本数据类型直接存储在栈内存中，它们的值是不可变的，这是因为当我们想从新给基础类型赋值来“改变”它们的值时，实际上是创建了一个新的基本数据类型实例，并将其分配给当前的变量名中。\",\"这样的好处在于，基本数据类型的值不可变，所以在代码中传递这些值时不需要担心它们被意外地修改。这有助于编写无副作用的纯函数，并提高程序的可预测性和稳定性。\",\"let myNum = 42 // 创建一个数值变量 myNum = 43 // 不是改变原来的数值，而是创建一个新的数值并重新分配给 myNum \",\"在 code - 1 中，myNum 变量最初存储的是整数 42，然后通过重新赋值将其改为 43。实际上，这是创建了两个不同的 Number 实例，而不是直接改变了原始数值的值。\"]},\"58\":{\"h\":\"引用数据类型\",\"t\":[\"引用数据类型存储在堆内存中，它们的值是可以改变的，值得注意的是 引用数据类型都是以 object 的基础上派生的，所以除了 null 类型以外，所有的引用类型都是 typeof 运算符返回结果为 object 的对象。\",\"如果你需要区分具体的引用类型，可以使用 instanceof 操作符或者检查构造函数名称。\",\"let arr = [] window.console.log(arr instanceof Array) // true window.console.log(arr.constructor.name) // Array \"]},\"59\":{\"h\":\"浅拷贝与深拷贝\",\"t\":[\"在 JavaScript 中，深拷贝和浅拷贝一般情况都是在引用数据类型的基础上所讨论的，它们是两种不同的复制对象的方式，区别就在于复制的深度以及对原始对象和副本之间关系的影响。\",\"这主要是因为在引用类型中，当我们将变量赋值给另一个变量时，实际上是将它们的引用地址复制了一份。这样，当我们对其中一个变量进行修改时，另一个变量也会受到影响。因此，为了避免这种情况的发生，所以我们通常需要使用拷贝的手段来创建一个新的副本。\",\"let objA = { name: \\\"Li Ming\\\", age: 18 } let objB = objA objA.name = \\\"Xiao Hua\\\" window.console.log(objA) // { name: \\\"Xiao Hua\\\", age: 18 } window.console.log(objB) // { name: \\\"Xiao Hua\\\", age: 18 } \"]},\"60\":{\"h\":\"浅拷贝\",\"t\":[\"浅拷贝只复制了对象的第一层属性值，而不复制其内部的引用。当对象包含其他对象或数组作为属性时，浅拷贝只会创建这些嵌套对象或数组的引用副本，而不是实际的对象或数组本身。因此，如果修改了原对象中的嵌套对象或数组，那么这个修改也会反映到浅拷贝后的副本上，因为它们共享相同的引用。\",\"let objA = { name: \\\"Li Ming\\\", score: [80, 60, 90] } let objB = { ...objA } objA.name = \\\"Xiao Hua\\\" objA.score[0] = 100 window.console.log(objA) // { name: \\\"Xiao Hua\\\", score: [100, 60, 90] } window.console.log(objB) // { name: \\\"Li Ming\\\", score: [100, 60, 90] } \",\"值得注意的是在 code - 5 中，我们修改了原对象中嵌套的数组，但这个修改没有反映到浅拷贝后的副本上，这是因为我们相当于重写了一个数组，如果重写的话，那么他相当于在堆内存中重新开辟了一块空间这样修改之后的这个数组与之前修改的数组会分别处在两个不同地址的内存空间中且他们互不影响，同理此种情况也适用于对象与函数。\",\"let objA = { name: \\\"Li Ming\\\", score: [80, 60, 90] } let objB = { ...objA } objA.name = \\\"Xiao Hua\\\" objA.score = [100, 60, 90] window.console.log(objA) // { name: \\\"Xiao Hua\\\", score: [100, 60, 90] } window.console.log(objB) // { name: \\\"Li Ming\\\", score: [80, 60, 90] } \"]},\"61\":{\"h\":\"深拷贝\",\"t\":[\"深拷贝会递归地复制整个对象及其所有嵌套的对象和数组。它会在内存中为每个被复制的对象分配新的空间，并将所有的属性值都复制过去。这意味着即使原对象中的嵌套对象或数组发生了变化，也不会影响到深拷贝后的副本，因为它们各自拥有独立的内存空间。\",\"实现深拷贝的方法有很多种，只要达到它们各自拥有独立的内存空间且互不干扰，例如使用 JSON.stringify 方法将对象转换为 JSON 字符串，然后使用 JSON.parse 方法将 JSON 字符串解析为新的对象，这样也可以实现深拷贝。但是，这种方法有一些局限性，例如它不能处理函数和 undefined。\",\"let objA = { name: \\\"Li Ming\\\", score: [80, 60, 90], select: function () { return this.name }, age: undefined, } let objB = JSON.parse(JSON.stringify(objA)) window.console.log(objA) // { name: \\\"Li Ming\\\", score: [80, 60, 90], select: ƒ, age: undefined } window.console.log(objB) // { name: \\\"Li Ming\\\", score: [80, 60, 90] } \",\"我们也可以手动去实现一个深拷贝，实现该方法通常需要递归地复制对象的所有属性，并创建任何嵌套对象或数组的新副本。\",\"function deepCopy(obj) { // 对于非对象和null值，直接返回 if (obj === null || typeof obj !== \\\"object\\\") return obj // 根据obj的类型来决定新创建对象的类型 let copy = Array.isArray(obj) ? [] : {} for (let key in obj) { if (obj.hasOwnProperty(key)) { // 递归调用deepCopy处理每个属性 copy[key] = deepCopy(obj[key]) } } return copy } \"]},\"62\":{\"c\":[\"JavaScript\"]},\"63\":{\"c\":[\"JavaScript\"]},\"64\":{\"h\":\"Blob 类型\"},\"65\":{\"h\":\"Blob\",\"t\":[\"Blob 是 JavaScript 中的一个对象，其全称为 binary large object（二进制大对象），用于表示一个不可变、原始数据的类文件对象，它本身是不能直接读写所存储的数据，需要借助图 1 中来对它的数据以不同形式的格式进行读取操作。\"]},\"66\":{\"h\":\"File\",\"t\":[\"File 对象中存在于浏览器环境中，在 node.js 环境中不存在，并且 Blob 的属性和方法都可以应用于 File 对象上，对此我们可以将 File 对象看作是特殊类型的 Blob，且可以用在任意的 Blob 类型的 context 中,比如: FileReader, URL.createObjectURL, createImageBitmap, 及 XMLHttpRequest.send 都能处理 Blob 和 File 对象。\",\"从图 2 可以看出 File 对象相比于 Blob 对象多包含了一些文件属性，File 原型中可以了解 File 是继承自 Blob。\"]},\"67\":{\"h\":\"前端获取文件的几种情况\"},\"68\":{\"h\":\"input 上传\",\"t\":[\"创建 <input> 元素并在其上绑定 onchange 事件，在通过用户点击上传后获取 FileList 对象，其中 input 标签中 type 是用来决定用户的输入类型，multiple 是用来确定是否可以同时上传多个文件。\",\"<input id=\\\"cake\\\" type=\\\"file\\\" multiple=\\\"multiple\\\" /> \",\"const selectElement = window.document.getElementById(\\\"cake\\\") selectElement.onchange = (event) => { window.console.log(event.target.files) } \"]},\"69\":{\"h\":\"文件拖放\",\"t\":[\"创建一个 <div> 标签或者创建其他任意一种标签，通过绑定 ondragover 与 ondrop 事件来完成将浏览器之外的文件拖拽到浏览器窗口中，并将它放在一个成为拖放区域的特殊区域中，也就是之前所创建的 <div> 标签中。\",\"ondragover：当元素或选中的文本被拖到一个可释放目标上时触发（每 100 毫秒触发一次）。\",\"ondrop：当元素或选中的文本在可释放目标上被释放时触发。\",\"<div id=\\\"cake\\\"></div> \",\"const selectElement = window.document.getElementById(\\\"cake\\\") selectElement.ondragover = (event) => { event.preventDefault() } selectElement.ondrop = (event) => { event.preventDefault() window.console.log(event.dataTransfer.files) } \",\"##cake { width: 200px; height: 200px; border: 1px solid black; } \",\"值得注意的是在 ondragover 与 ondrop 事件中均调用 preventDefault() 来阻止对这个事件的其他处理过程（如触点事件或指针事件更或者是放置文件时将文件显示在浏览器窗口中），但此事件还是会继续传播，除非碰到事件监听器调用 stopPropagation() 或 stopImmediatePropagation() 才停止传播。\"]},\"70\":{\"h\":\"showOpenFilePicker API\",\"t\":[\"通过 window.showOpenFilePicker() 方法，该方法用于显示一个文件选择器，以允许用户选择一个或多个文件并返回这些文件的句柄。\",\"<button id=\\\"cake\\\">点击上传文件</button> \",\"const selectElement = window.document.getElementById(\\\"cake\\\") selectElement.onclick = async () => { const pickerOpts = { types: [ { description: \\\"Images\\\", accept: { \\\"image/*\\\": [\\\".png\\\", \\\".gif\\\", \\\".jpeg\\\", \\\".jpg\\\"], }, }, ], excludeAcceptAllOption: true, multiple: false, } const [fileHandle] = await window.showOpenFilePicker(pickerOpts) window.console.log(fileHandle) } \",\"值得注意的是 window.showOpenFilePicker() API 较新，使用时需注意此项功能仅在一些支持的浏览器的安全上下文（HTTPS）中可用，在将其用于生产之前，需仔细检查浏览器兼容性。\"]},\"71\":{\"h\":\"请求远端\",\"t\":[\"通过 fetch 或 axios 等获取远端文件，这也是我们最常用到的。\",\"fetch(\\\"../src/assets/image/cake.png\\\") .then(async (responce) => { window.console.log(await responce.blob()) }) .catch((err) => { window.console.log(err) }) \"]},\"72\":{\"h\":\"FileReader\",\"t\":[\"FileReader 对象允许 Web 应用程序异步读取存储在用户计算机上的文件（但不能用于从文件系统中按路径名简单地读取文件）或原始数据缓冲区的内容，使用 File 或 Blob 对象指定要读取的文件或数据。 简单来说 FileReader 是一个异步 API，它允许接受 File 或 Blob 对象，并根据我们的要求读取成我们想要的文件或数据类型。\",\"FileReader 对象可以使用 FileReader 构造函数来创建，并从图 5 中分别可以看到 FileReader 对象所提供的属性与事件处理。\",\"const fr = new FileReader() window.console.log(fr) \",\"FileReader 对象属性如下：\",\"error（只读）：表示在读取文件时发生的错误；\",\"readyState（只读）：表示 FileReader 状态的数字，取值如下：0（EMPTY）还没有加载任何数据、1（LOADING）数据正在被加载、2（DONE）已完成全部的读取请求。\",\"result（只读）：文件的内容，该属性仅在读取操作完成后才有效，数据的格式取决于使用哪个方法来启动读取操作。\",\"FileReader 对象事件处理如下：\",\"onabort：该事件在读取操作被中断时触发。\",\"onerror：该事件在读取操作发生错误时触发。\",\"onload：该事件在读取操作完成时触发。\",\"onloadstart：该事件在读取操作开始时触发。\",\"onloadend：该事件在读取操作结束时（要么成功，要么失败）触发。\",\"onprogress：该事件在读取 Blob 时触发，当上传大文件时，可以用该事件来监控文件的读取进度。\",\"回归正文，在图 4 中可以看到 FileReader 对象可以将 File 或 Blob 输出成不同的数据格式，所以可以把 FileReader 对象看成一个工具，该工具提供了一些读取方法，这关乎着 result 属性最后所呈现的文件内容，FileReader 对象提供了以下方法来加载文件：\",\"readAsArrayBuffer: 读取指定 Blob 中的内容，完成之后，result 属性中保存的将是被读取文件的 ArrayBuffer 数据对象。\",\"readAsBinaryString: 读取指定 Blob 中的内容，完成之后，result 属性中将包含所读取文件的原始二进制数据。\",\"readAsDataURL: 读取指定 Blob 中的内容，完成之后，result 属性中将包含一个 data: URL 格式的 Base64 字符串以表示所读取文件的内容。\",\"readAsText: 读取指定 Blob 中的内容，完成之后，result 属性中将包含一个字符串以表示所读取的文件内容。\",\"以 readAsDataURL 方法为例，首先创建一个 FileReader 对象，当文件上传成功时，使用该方法读取 File 对象，当读取操作完成时打印读取结果。\",\"<input id=\\\"cake\\\" type=\\\"file\\\" /> \",\"const selectElement = window.document.getElementById(\\\"cake\\\") const fr = new FileReader() fr.onload = (e) => { window.console.log(e.target.result) } selectElement.onchange = (event) => { fr.readAsDataURL(event.target.files[0]) } \",\"如果此时打印 FileReader 对象我们就可以看见 readyState 状态为已完成、 onload 事件为我们刚刚定义的方法、 result 内容为 readAsDataURL 方法启动的读取结果。\"]},\"73\":{\"h\":\"ArrayBuffer\",\"t\":[\"ArrayBuffer 对象用来表示通用的、固定长度的原始二进制数据缓冲区，ArrayBuffer 的内容不能直接操作，只能通过 DataView 对象或 TypedArrray 对象来访问，这些对象用于读取和写入缓冲区内容。 TypedArrray 视图与 DataView 视图的区别主要是字节序，前者的数组成员都是同一个数据类型，后者的数组成员可以是不同的数据类型。\",\"TypedArrray 只是一个概念，实际使用的是那图 7 中的 9 个对象。\",\"DataView 可以自定义格式和字节序，更像是 TypeScript 中的元祖。\",\"Blob 相较于 ArrayBuffer 它作为一个整体文件，更适合用于文件传输，当需要对二进制数据进行操作时（例如修改文件中某一段数据时）就可以使用 ArrayBuffer 来完成。\",\"const Hello = [72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100] const buffer = new ArrayBuffer(Hello.length) const wrapBuffer = new Int8Array(buffer) for (let i = 0; i < Hello.length; i++) { wrapBuffer[i] = Hello[i] } const blob = new Blob([buffer]) const reader = new FileReader() reader.readAsText(blob) window.console.log(reader) \"]},\"74\":{\"c\":[\"JavaScript\"]},\"75\":{\"c\":[\"JavaScript\"]},\"76\":{\"h\":\"Data Structure\"},\"77\":{\"h\":\"Basic\"}},\"dirtCount\":0,\"index\":[[\"来完成\",{\"1\":{\"73\":1}}],[\"来阻止对这个事件的其他处理过程\",{\"1\":{\"69\":1}}],[\"相较于\",{\"1\":{\"73\":1}}],[\"相较于单向链表\",{\"1\":{\"36\":1}}],[\"更适合用于文件传输\",{\"1\":{\"73\":1}}],[\"更像是\",{\"1\":{\"73\":1}}],[\"更换尾节点的指向\",{\"1\":{\"43\":1}}],[\"视图的区别主要是字节序\",{\"1\":{\"73\":1}}],[\"视图与\",{\"1\":{\"73\":1}}],[\"固定长度的原始二进制数据缓冲区\",{\"1\":{\"73\":1}}],[\"内容为\",{\"1\":{\"72\":1}}],[\"内存可能无法提供如此大的连续空间\",{\"1\":{\"27\":1}}],[\"状态为已完成\",{\"1\":{\"72\":1}}],[\"状态的数字\",{\"1\":{\"72\":1}}],[\"格式的\",{\"1\":{\"72\":1}}],[\"属性中将包含一个字符串以表示所读取的文件内容\",{\"1\":{\"72\":1}}],[\"属性中将包含一个\",{\"1\":{\"72\":1}}],[\"属性中将包含所读取文件的原始二进制数据\",{\"1\":{\"72\":1}}],[\"属性中保存的将是被读取文件的\",{\"1\":{\"72\":1}}],[\"属性最后所呈现的文件内容\",{\"1\":{\"72\":1}}],[\"完成之后\",{\"1\":{\"72\":4}}],[\"完整代码\",{\"0\":{\"35\":1}}],[\"读取指定\",{\"1\":{\"72\":4}}],[\"输出成不同的数据格式\",{\"1\":{\"72\":1}}],[\"回归正文\",{\"1\":{\"72\":1}}],[\"时触发\",{\"1\":{\"72\":1}}],[\"触发\",{\"1\":{\"72\":1}}],[\"要么失败\",{\"1\":{\"72\":1}}],[\"要么成功\",{\"1\":{\"72\":1}}],[\"要知道计算机中的内存空间是所有程序的公共资源\",{\"1\":{\"27\":1}}],[\"该工具提供了一些读取方法\",{\"1\":{\"72\":1}}],[\"该事件在读取\",{\"1\":{\"72\":1}}],[\"该事件在读取操作结束时\",{\"1\":{\"72\":1}}],[\"该事件在读取操作开始时触发\",{\"1\":{\"72\":1}}],[\"该事件在读取操作完成时触发\",{\"1\":{\"72\":1}}],[\"该事件在读取操作发生错误时触发\",{\"1\":{\"72\":1}}],[\"该事件在读取操作被中断时触发\",{\"1\":{\"72\":1}}],[\"该属性仅在读取操作完成后才有效\",{\"1\":{\"72\":1}}],[\"该方法用于显示一个文件选择器\",{\"1\":{\"70\":1}}],[\"该方法返回一个指针\",{\"1\":{\"30\":1}}],[\"文件的内容\",{\"1\":{\"72\":1}}],[\"文件拖放\",{\"0\":{\"69\":1}}],[\"已完成全部的读取请求\",{\"1\":{\"72\":1}}],[\"还没有加载任何数据\",{\"1\":{\"72\":1}}],[\"还需额外保存一个指针\",{\"1\":{\"28\":1}}],[\"取值如下\",{\"1\":{\"72\":1}}],[\"表示\",{\"1\":{\"72\":1}}],[\"表示在读取文件时发生的错误\",{\"1\":{\"72\":1}}],[\"简单来说\",{\"1\":{\"72\":1}}],[\"应用程序异步读取存储在用户计算机上的文件\",{\"1\":{\"72\":1}}],[\"等获取远端文件\",{\"1\":{\"71\":1}}],[\"等同于\",{\"1\":{\"8\":5}}],[\"请求远端\",{\"0\":{\"71\":1}}],[\"需仔细检查浏览器兼容性\",{\"1\":{\"70\":1}}],[\"需要借助图\",{\"1\":{\"65\":1}}],[\"需要根据程序需要进行强制类型转换\",{\"1\":{\"30\":1}}],[\"需要注意的是\",{\"1\":{\"30\":1}}],[\"较新\",{\"1\":{\"70\":1}}],[\"以\",{\"1\":{\"72\":1}}],[\"以允许用户选择一个或多个文件并返回这些文件的句柄\",{\"1\":{\"70\":1}}],[\"以及特殊的二叉搜索树等\",{\"1\":{\"13\":1}}],[\"才停止传播\",{\"1\":{\"69\":1}}],[\"或原始数据缓冲区的内容\",{\"1\":{\"72\":1}}],[\"或\",{\"1\":{\"69\":1,\"71\":1,\"72\":3}}],[\"或者它的指针指向\",{\"1\":{\"28\":1}}],[\"除非碰到事件监听器调用\",{\"1\":{\"69\":1}}],[\"除了包含值\",{\"1\":{\"28\":1}}],[\"毫秒触发一次\",{\"1\":{\"69\":1}}],[\"每\",{\"1\":{\"69\":1}}],[\"每个使用\",{\"1\":{\"30\":1}}],[\"每个节点在存储数据的同时都要配置一个指针\",{\"1\":{\"28\":1}}],[\"标签或者创建其他任意一种标签\",{\"1\":{\"69\":1}}],[\"标签中\",{\"1\":{\"68\":1,\"69\":1}}],[\"事件为我们刚刚定义的方法\",{\"1\":{\"72\":1}}],[\"事件中均调用\",{\"1\":{\"69\":1}}],[\"事件来完成将浏览器之外的文件拖拽到浏览器窗口中\",{\"1\":{\"69\":1}}],[\"事件\",{\"1\":{\"68\":1}}],[\"元素并在其上绑定\",{\"1\":{\"68\":1}}],[\"元素类型为\",{\"1\":{\"7\":1}}],[\"前者的数组成员都是同一个数据类型\",{\"1\":{\"73\":1}}],[\"前端获取文件的几种情况\",{\"0\":{\"67\":1}}],[\"前序\",{\"0\":{\"18\":1,\"22\":1}}],[\"原型中可以了解\",{\"1\":{\"66\":1}}],[\"原始数据的类文件对象\",{\"1\":{\"65\":1}}],[\"都能处理\",{\"1\":{\"66\":1}}],[\"xmlhttprequest\",{\"1\":{\"66\":1}}],[\"xiao\",{\"1\":{\"59\":3,\"60\":4}}],[\"及\",{\"1\":{\"66\":1}}],[\"url\",{\"1\":{\"66\":1,\"72\":1}}],[\"undefined\",{\"1\":{\"61\":3}}],[\"比如\",{\"1\":{\"66\":1}}],[\"且可以用在任意的\",{\"1\":{\"66\":1}}],[\"且顺序不能随意颠倒\",{\"1\":{\"14\":1}}],[\"环境中不存在\",{\"1\":{\"66\":1}}],[\"环形链表\",{\"1\":{\"36\":1}}],[\"是一个异步\",{\"1\":{\"72\":1}}],[\"是一种动态类型的语言\",{\"1\":{\"56\":1}}],[\"是用来确定是否可以同时上传多个文件\",{\"1\":{\"68\":1}}],[\"是用来决定用户的输入类型\",{\"1\":{\"68\":1}}],[\"是继承自\",{\"1\":{\"66\":1}}],[\"是\",{\"1\":{\"65\":1}}],[\"basic\",{\"0\":{\"77\":1}}],[\"base64\",{\"1\":{\"72\":1}}],[\"buffer\",{\"1\":{\"73\":3}}],[\"button>\",{\"1\":{\"70\":1}}],[\"black\",{\"1\":{\"69\":1}}],[\"blob\",{\"0\":{\"64\":1,\"65\":1},\"1\":{\"65\":1,\"66\":6,\"71\":1,\"72\":8,\"73\":4}}],[\"border\",{\"1\":{\"69\":1}}],[\"binary\",{\"1\":{\"65\":1}}],[\"better\",{\"1\":{\"1\":1}}],[\"become\",{\"1\":{\"1\":1}}],[\"递归调用deepcopy处理每个属性\",{\"1\":{\"61\":1}}],[\"递归方法\",{\"0\":{\"17\":1}}],[\"key\",{\"1\":{\"61\":4}}],[\"根据obj的类型来决定新创建对象的类型\",{\"1\":{\"61\":1}}],[\"根据节点间的关系和附加条件\",{\"1\":{\"13\":1}}],[\"直接返回\",{\"1\":{\"61\":1}}],[\"直接修改链表头指向下一个节点\",{\"1\":{\"33\":1,\"35\":1}}],[\"ƒ\",{\"1\":{\"61\":1}}],[\"另一个变量也会受到影响\",{\"1\":{\"59\":1}}],[\"另一个用于表示整个链表\",{\"1\":{\"28\":1}}],[\"区别就在于复制的深度以及对原始对象和副本之间关系的影响\",{\"1\":{\"59\":1}}],[\"操作符或者检查构造函数名称\",{\"1\":{\"58\":1}}],[\"操作系统调度等领域具有重要作用\",{\"1\":{\"39\":1}}],[\"运算符返回结果为\",{\"1\":{\"58\":1}}],[\"所有的引用类型都是\",{\"1\":{\"58\":1}}],[\"所以可以把\",{\"1\":{\"72\":1}}],[\"所以可以不按照顺序任意赋值\",{\"1\":{\"8\":1}}],[\"所以我们通常需要使用拷贝的手段来创建一个新的副本\",{\"1\":{\"59\":1}}],[\"所以除了\",{\"1\":{\"58\":1}}],[\"所以在代码中传递这些值时不需要担心它们被意外地修改\",{\"1\":{\"57\":1}}],[\"所以总的字节数除以一个元素所占的字节数就是数组的长度\",{\"1\":{\"10\":1}}],[\"所以数组\",{\"1\":{\"7\":1}}],[\"值得注意的是在\",{\"1\":{\"60\":1,\"69\":1}}],[\"值得注意的是\",{\"1\":{\"58\":1,\"70\":1}}],[\"引用数据类型都是以\",{\"1\":{\"58\":1}}],[\"引用数据类型存储在堆内存中\",{\"1\":{\"58\":1}}],[\"引用数据类型\",{\"0\":{\"58\":1}}],[\"引用这个位置并不会报错\",{\"1\":{\"9\":1}}],[\"然后使用\",{\"1\":{\"61\":1}}],[\"然后通过重新赋值将其改为\",{\"1\":{\"57\":1}}],[\"然而\",{\"1\":{\"44\":1,\"50\":1}}],[\"变量最初存储的是整数\",{\"1\":{\"57\":1}}],[\"变量名称\",{\"1\":{\"7\":1}}],[\"不是改变原来的数值\",{\"1\":{\"57\":1}}],[\"不能确保每个独立内存的起始地址是连续的\",{\"1\":{\"30\":1}}],[\"实际使用的是那图\",{\"1\":{\"73\":1}}],[\"实际上是将它们的引用地址复制了一份\",{\"1\":{\"59\":1}}],[\"实际上是创建了一个新的基本数据类型实例\",{\"1\":{\"57\":1}}],[\"实际上\",{\"1\":{\"57\":1}}],[\"实现该方法通常需要递归地复制对象的所有属性\",{\"1\":{\"61\":1}}],[\"实现深拷贝的方法有很多种\",{\"1\":{\"61\":1}}],[\"实现方法以及常见操作\",{\"1\":{\"13\":1}}],[\"实例\",{\"1\":{\"57\":1}}],[\"改变\",{\"1\":{\"57\":1}}],[\"基本数据类型的值不可变\",{\"1\":{\"57\":1}}],[\"基本数据类型直接存储在栈内存中\",{\"1\":{\"57\":1}}],[\"基本数据类型\",{\"0\":{\"57\":1},\"1\":{\"56\":1}}],[\"基于此设计\",{\"1\":{\"44\":1}}],[\"基于数组实现\",{\"0\":{\"44\":1,\"52\":1}}],[\"基于链表实现\",{\"0\":{\"43\":1,\"51\":1}}],[\"提供了多种数据类型\",{\"1\":{\"56\":1}}],[\"jpg\",{\"1\":{\"70\":1}}],[\"jpeg\",{\"1\":{\"70\":1}}],[\"javascript\",{\"1\":{\"56\":2,\"59\":1,\"65\":1},\"2\":{\"62\":1,\"63\":1,\"74\":1,\"75\":1}}],[\"json\",{\"1\":{\"61\":6}}],[\"js\",{\"0\":{\"56\":1},\"1\":{\"66\":1}}],[\"浅拷贝只会创建这些嵌套对象或数组的引用副本\",{\"1\":{\"60\":1}}],[\"浅拷贝只复制了对象的第一层属性值\",{\"1\":{\"60\":1}}],[\"浅拷贝与深拷贝\",{\"0\":{\"59\":1}}],[\"浅拷贝\",{\"0\":{\"55\":1,\"60\":1}}],[\"深拷贝会递归地复制整个对象及其所有嵌套的对象和数组\",{\"1\":{\"61\":1}}],[\"深拷贝和浅拷贝一般情况都是在引用数据类型的基础上所讨论的\",{\"1\":{\"59\":1}}],[\"深拷贝\",{\"0\":{\"55\":1,\"61\":1}}],[\"存储栈元素的数组\",{\"1\":{\"52\":1}}],[\"存储数组的内存空间必须是连续的\",{\"1\":{\"27\":1}}],[\"构造函数来创建\",{\"1\":{\"72\":1}}],[\"构造函数\",{\"1\":{\"51\":1,\"52\":1}}],[\"屏蔽\",{\"1\":{\"50\":1}}],[\"换句话说\",{\"1\":{\"50\":1}}],[\"出栈\",{\"1\":{\"49\":1,\"51\":1,\"52\":1}}],[\"出队操作\",{\"1\":{\"43\":1,\"44\":1}}],[\"出队\",{\"1\":{\"41\":2}}],[\"入栈与出栈操作分别对应在数组尾部添加元素与删除元素\",{\"1\":{\"52\":1}}],[\"入栈\",{\"1\":{\"49\":1,\"51\":1,\"52\":1}}],[\"入队操作\",{\"1\":{\"43\":1,\"44\":1}}],[\"入队\",{\"1\":{\"41\":2}}],[\"底部称为\",{\"1\":{\"49\":1}}],[\"对此我们可以将\",{\"1\":{\"66\":1}}],[\"对象来访问\",{\"1\":{\"73\":1}}],[\"对象或\",{\"1\":{\"73\":1}}],[\"对象用来表示通用的\",{\"1\":{\"73\":1}}],[\"对象我们就可以看见\",{\"1\":{\"72\":1}}],[\"对象提供了以下方法来加载文件\",{\"1\":{\"72\":1}}],[\"对象看成一个工具\",{\"1\":{\"72\":1}}],[\"对象看作是特殊类型的\",{\"1\":{\"66\":1}}],[\"对象可以将\",{\"1\":{\"72\":1}}],[\"对象可以使用\",{\"1\":{\"72\":1}}],[\"对象事件处理如下\",{\"1\":{\"72\":1}}],[\"对象属性如下\",{\"1\":{\"72\":1}}],[\"对象所提供的属性与事件处理\",{\"1\":{\"72\":1}}],[\"对象指定要读取的文件或数据\",{\"1\":{\"72\":1}}],[\"对象允许\",{\"1\":{\"72\":1}}],[\"对象多包含了一些文件属性\",{\"1\":{\"66\":1}}],[\"对象相比于\",{\"1\":{\"66\":1}}],[\"对象\",{\"1\":{\"66\":1,\"68\":1,\"72\":3}}],[\"对象上\",{\"1\":{\"66\":1}}],[\"对象中存在于浏览器环境中\",{\"1\":{\"66\":1}}],[\"对象等\",{\"1\":{\"48\":1}}],[\"对于非对象和null值\",{\"1\":{\"61\":1}}],[\"对于入栈操作\",{\"1\":{\"51\":1}}],[\"对于单链表来说\",{\"1\":{\"28\":1}}],[\"字符串以表示所读取文件的内容\",{\"1\":{\"72\":1}}],[\"字符串解析为新的对象\",{\"1\":{\"61\":1}}],[\"字符串\",{\"1\":{\"61\":1}}],[\"字符\",{\"1\":{\"48\":1}}],[\"栈遵循先入后出的原则\",{\"1\":{\"50\":1}}],[\"栈的容量\",{\"1\":{\"52\":1}}],[\"栈的实现\",{\"0\":{\"50\":1}}],[\"栈的常用操作\",{\"0\":{\"49\":1}}],[\"栈底\",{\"1\":{\"49\":1}}],[\"栈顶元素的索引\",{\"1\":{\"52\":1}}],[\"栈顶\",{\"1\":{\"49\":1}}],[\"栈是一种遵循先入后出的逻辑的线性数据结构\",{\"1\":{\"48\":1}}],[\"栈\",{\"0\":{\"48\":1}}],[\"之间\",{\"1\":{\"45\":1}}],[\"到\",{\"1\":{\"45\":1}}],[\"计算下标\",{\"1\":{\"45\":1}}],[\"计算数组长度可以使用\",{\"1\":{\"10\":1}}],[\"计算数组长度\",{\"0\":{\"10\":1}}],[\"当需要对二进制数据进行操作时\",{\"1\":{\"73\":1}}],[\"当读取操作完成时打印读取结果\",{\"1\":{\"72\":1}}],[\"当文件上传成功时\",{\"1\":{\"72\":1}}],[\"当上传大文件时\",{\"1\":{\"72\":1}}],[\"当元素或选中的文本在可释放目标上被释放时触发\",{\"1\":{\"69\":1}}],[\"当元素或选中的文本被拖到一个可释放目标上时触发\",{\"1\":{\"69\":1}}],[\"当对象包含其他对象或数组作为属性时\",{\"1\":{\"60\":1}}],[\"当我们对其中一个变量进行修改时\",{\"1\":{\"59\":1}}],[\"当我们将变量赋值给另一个变量时\",{\"1\":{\"59\":1}}],[\"当你有一个长度为\",{\"1\":{\"45\":1}}],[\"当队列中没有节点时\",{\"1\":{\"43\":1}}],[\"例如修改文件中某一段数据时\",{\"1\":{\"73\":1}}],[\"例如它不能处理函数和\",{\"1\":{\"61\":1}}],[\"例如使用\",{\"1\":{\"61\":1}}],[\"例如\",{\"1\":{\"45\":2}}],[\"模运算对于处理循环序列非常有用\",{\"1\":{\"45\":1}}],[\"为了避免这种情况的发生\",{\"1\":{\"59\":1}}],[\"为了深入了解栈的运行机制\",{\"1\":{\"50\":1}}],[\"为了实现队列\",{\"1\":{\"42\":1}}],[\"为什么要用模运算\",{\"0\":{\"45\":1}}],[\"e\",{\"1\":{\"72\":2}}],[\"error\",{\"1\":{\"72\":1}}],[\"err\",{\"1\":{\"71\":2}}],[\"excludeacceptalloption\",{\"1\":{\"70\":1}}],[\"event\",{\"1\":{\"68\":2,\"69\":5,\"72\":2}}],[\"elem\",{\"1\":{\"44\":2}}],[\"else\",{\"1\":{\"16\":1,\"22\":1,\"23\":1,\"24\":2,\"43\":1}}],[\"empty\",{\"1\":{\"44\":1,\"51\":1,\"52\":1,\"72\":1}}],[\"减少\",{\"1\":{\"44\":2}}],[\"只是一个概念\",{\"1\":{\"73\":1}}],[\"只能通过\",{\"1\":{\"73\":1}}],[\"只读\",{\"1\":{\"72\":3}}],[\"只要达到它们各自拥有独立的内存空间且互不干扰\",{\"1\":{\"61\":1}}],[\"只需将头节点从链表中删除即可\",{\"1\":{\"51\":1}}],[\"只需将\",{\"1\":{\"44\":1}}],[\"只有\",{\"1\":{\"9\":1}}],[\"增加\",{\"1\":{\"44\":4}}],[\"索引处\",{\"1\":{\"44\":2}}],[\"定义\",{\"1\":{\"44\":1}}],[\"保证队列的尾节点总是指向实际的最后一个节点\",{\"1\":{\"43\":1}}],[\"规定队尾仅可添加节点\",{\"1\":{\"43\":1}}],[\"和引用数据类型\",{\"1\":{\"56\":1}}],[\"和\",{\"1\":{\"43\":2,\"66\":1}}],[\"和前驱节点\",{\"1\":{\"36\":1}}],[\"并从图\",{\"1\":{\"72\":1}}],[\"并根据我们的要求读取成我们想要的文件或数据类型\",{\"1\":{\"72\":1}}],[\"并且\",{\"1\":{\"66\":1}}],[\"并且指定位置的赋值与顺序赋值\",{\"1\":{\"8\":1}}],[\"并创建任何嵌套对象或数组的新副本\",{\"1\":{\"61\":1}}],[\"并提高程序的可预测性和稳定性\",{\"1\":{\"57\":1}}],[\"并将它放在一个成为拖放区域的特殊区域中\",{\"1\":{\"69\":1}}],[\"并将所有的属性值都复制过去\",{\"1\":{\"61\":1}}],[\"并将其分配给当前的变量名中\",{\"1\":{\"57\":1}}],[\"并将\",{\"1\":{\"44\":3}}],[\"并维护一个变量\",{\"1\":{\"44\":1}}],[\"并在另一端删除元素\",{\"1\":{\"42\":1}}],[\"删除栈顶元素的操作叫作\",{\"1\":{\"49\":1}}],[\"删除队首元素的操作称为\",{\"1\":{\"41\":1}}],[\"删除节点\",{\"0\":{\"33\":1}}],[\"尾节点视为栈底\",{\"1\":{\"51\":1}}],[\"尾节点\",{\"1\":{\"43\":1}}],[\"尾节点指向空\",{\"1\":{\"36\":1}}],[\"尾部称为\",{\"1\":{\"41\":1}}],[\"队头指针\",{\"1\":{\"43\":1}}],[\"队尾指针\",{\"1\":{\"43\":1}}],[\"队尾\",{\"1\":{\"41\":1,\"43\":1}}],[\"队首仅可删除节点\",{\"1\":{\"43\":1}}],[\"队首\",{\"1\":{\"41\":1,\"43\":1}}],[\"队列有两个主要的操作\",{\"1\":{\"41\":1}}],[\"队列的实现\",{\"0\":{\"42\":1}}],[\"队列的常用操作\",{\"0\":{\"41\":1}}],[\"队列的概念\",{\"0\":{\"40\":1}}],[\"队列是一种基础且广泛应用的线性数据结构\",{\"1\":{\"39\":1}}],[\"队列\",{\"0\":{\"39\":1},\"1\":{\"40\":1}}],[\"遵循先进先出的原则\",{\"1\":{\"40\":1}}],[\"queue\",{\"1\":{\"40\":1,\"43\":30,\"44\":37}}],[\"本文将重点探讨如何在\",{\"1\":{\"39\":1}}],[\"本文将详细介绍\",{\"1\":{\"13\":1}}],[\"消息传递\",{\"1\":{\"39\":1}}],[\"尤其在多任务处理\",{\"1\":{\"39\":1}}],[\"它作为一个整体文件\",{\"1\":{\"73\":1}}],[\"它允许接受\",{\"1\":{\"72\":1}}],[\"它本身是不能直接读写所存储的数据\",{\"1\":{\"65\":1}}],[\"它会在内存中为每个被复制的对象分配新的空间\",{\"1\":{\"61\":1}}],[\"它们是两种不同的复制对象的方式\",{\"1\":{\"59\":1}}],[\"它们的值是可以改变的\",{\"1\":{\"58\":1}}],[\"它们的值是不可变的\",{\"1\":{\"57\":1}}],[\"它们的值时\",{\"1\":{\"57\":1}}],[\"它们负责组织和存储数据以优化算法性能\",{\"1\":{\"39\":1}}],[\"它以独特的分层结构和高效的查找性能\",{\"1\":{\"13\":1}}],[\"上传\",{\"0\":{\"68\":1}}],[\"上一个节点\",{\"1\":{\"36\":1}}],[\"上面示例中\",{\"1\":{\"9\":1}}],[\"下一个节点\",{\"1\":{\"36\":1}}],[\"与\",{\"1\":{\"41\":1,\"69\":2}}],[\"与单向链表相比\",{\"1\":{\"36\":1}}],[\"与用于存储数据的数据域\",{\"1\":{\"14\":1}}],[\"双向链表更具灵活性\",{\"1\":{\"36\":1}}],[\"双向链表的节点定义同时包含指向后继节点\",{\"1\":{\"36\":1}}],[\"双向链表记录了两个方向的引用\",{\"1\":{\"36\":1}}],[\"双向链表\",{\"1\":{\"36\":1}}],[\"任意节点都可以视作头节点\",{\"1\":{\"36\":1}}],[\"首先创建一个\",{\"1\":{\"72\":1}}],[\"首先我们先来看一下二叉树的数据结构\",{\"1\":{\"14\":1}}],[\"首尾相接\",{\"1\":{\"36\":1}}],[\"将把元素添加到栈顶的操作叫作\",{\"1\":{\"49\":1}}],[\"将把元素加入队尾的操作称为\",{\"1\":{\"41\":1}}],[\"将\",{\"1\":{\"44\":2}}],[\"将输入元素赋值给\",{\"1\":{\"44\":1}}],[\"将要入队的元素赋值给\",{\"1\":{\"44\":1}}],[\"将要入队的节点插入到当前队列尾节点的后面\",{\"1\":{\"43\":2}}],[\"将当前队列头节点变更为头节点后下一个节点\",{\"1\":{\"43\":1}}],[\"将最后一个节点称为尾节点\",{\"1\":{\"36\":1}}],[\"将节点添加到链表末尾\",{\"1\":{\"31\":1,\"35\":1}}],[\"我们也可以手动去实现一个深拷贝\",{\"1\":{\"61\":1}}],[\"我们修改了原对象中嵌套的数组\",{\"1\":{\"60\":1}}],[\"我们只需将元素插入链表头部\",{\"1\":{\"51\":1}}],[\"我们来尝试自己实现一个栈\",{\"1\":{\"50\":1}}],[\"我们把堆叠元素的顶部称为\",{\"1\":{\"49\":1}}],[\"我们可以\",{\"1\":{\"50\":1}}],[\"我们可以将数组的尾部作为栈顶\",{\"1\":{\"52\":1}}],[\"我们可以将栈类比为桌面上的一摞盘子\",{\"1\":{\"48\":1}}],[\"我们可以将链表的头节点视为栈顶\",{\"1\":{\"51\":1}}],[\"我们可以将链表的\",{\"1\":{\"43\":1}}],[\"我们可以使用一个变量\",{\"1\":{\"44\":1}}],[\"我们可以采用以下巧妙方法来避免这个问题\",{\"1\":{\"44\":1}}],[\"我们需要一种数据结构\",{\"1\":{\"42\":1}}],[\"我们将盘子替换为各种类型的元素\",{\"1\":{\"48\":1}}],[\"我们将队列头部称为\",{\"1\":{\"41\":1}}],[\"我们将首个节点称为头节点\",{\"1\":{\"36\":1}}],[\"我们知道\",{\"1\":{\"27\":1}}],[\"即前面介绍的普通链表\",{\"1\":{\"36\":1}}],[\"单向链表的节点包含值和指向下一节点的引用两项数据\",{\"1\":{\"36\":1}}],[\"单向链表\",{\"1\":{\"36\":1}}],[\"常见的链表类型包括三种\",{\"1\":{\"36\":1}}],[\"常见链表类型\",{\"0\":{\"36\":1}}],[\"80\",{\"1\":{\"60\":3,\"61\":3}}],[\"8\",{\"1\":{\"35\":1}}],[\"88\",{\"1\":{\"8\":2}}],[\"<button\",{\"1\":{\"70\":1}}],[\"<div\",{\"1\":{\"69\":1}}],[\"<div>\",{\"1\":{\"69\":2}}],[\"<input\",{\"1\":{\"68\":1,\"72\":1}}],[\"<input>\",{\"1\":{\"68\":1}}],[\"<=\",{\"1\":{\"52\":1}}],[\"<\",{\"1\":{\"35\":1,\"73\":1}}],[\"<stdlib\",{\"1\":{\"35\":1,\"43\":1,\"44\":1,\"51\":1,\"52\":1}}],[\"<stddef\",{\"1\":{\"28\":2,\"35\":1}}],[\"<stdio\",{\"1\":{\"10\":1,\"35\":1,\"51\":1,\"52\":1}}],[\"打印节点\",{\"0\":{\"34\":1}}],[\"释放\",{\"1\":{\"33\":1,\"35\":1}}],[\"清除已删除节点的\",{\"1\":{\"33\":1,\"35\":1}}],[\"找到了返回与给定值相同的节点\",{\"1\":{\"32\":1,\"35\":1}}],[\"的内容不能直接操作\",{\"1\":{\"73\":1}}],[\"的属性和方法都可以应用于\",{\"1\":{\"66\":1}}],[\"的对象\",{\"1\":{\"58\":1}}],[\"的基础上派生的\",{\"1\":{\"58\":1}}],[\"的引用\",{\"1\":{\"36\":1}}],[\"的节点\",{\"1\":{\"32\":1,\"35\":1}}],[\"的数组时\",{\"1\":{\"45\":1}}],[\"的数组\",{\"1\":{\"7\":1}}],[\"查找链表中的第一个具有给定值\",{\"1\":{\"32\":1,\"35\":1}}],[\"查找节点\",{\"0\":{\"32\":1}}],[\"查询节点\",{\"0\":{\"16\":1}}],[\"插入节点\",{\"0\":{\"31\":1}}],[\"初始化指针域\",{\"1\":{\"30\":1,\"35\":1}}],[\"初始化数据域\",{\"1\":{\"30\":1,\"35\":1}}],[\"初始化链表\",{\"1\":{\"28\":2,\"35\":1}}],[\"程序作者一定要对内存进行初始化操作\",{\"1\":{\"30\":1}}],[\"由于动态内存区可被重复使用\",{\"1\":{\"30\":1}}],[\"多次使用\",{\"1\":{\"30\":1}}],[\"分别视为\",{\"1\":{\"43\":1}}],[\"分别为指向左右两边的指针\",{\"1\":{\"14\":1}}],[\"分配内存空间\",{\"1\":{\"30\":1,\"35\":1}}],[\"分配内存时\",{\"1\":{\"30\":1}}],[\"分配的内存可以确保是地址连续的内存空间\",{\"1\":{\"30\":1}}],[\"返回的指针类型是通用指针类型\",{\"1\":{\"30\":1}}],[\"返回可用内存的起始地址\",{\"1\":{\"30\":1}}],[\"则需要先将上面的盘子依次移走\",{\"1\":{\"48\":1}}],[\"则得到一个环形链表\",{\"1\":{\"36\":1}}],[\"则无需删除\",{\"1\":{\"33\":1,\"35\":1}}],[\"则将节点设为头节点\",{\"1\":{\"31\":1,\"35\":1}}],[\"则返回\",{\"1\":{\"30\":1,\"32\":1,\"35\":1}}],[\"则头结点不存在\",{\"1\":{\"28\":1}}],[\"方法启动的读取结果\",{\"1\":{\"72\":1}}],[\"方法为例\",{\"1\":{\"72\":1}}],[\"方法将\",{\"1\":{\"61\":1}}],[\"方法将对象转换为\",{\"1\":{\"61\":1}}],[\"方法得到的内存不会执行内存清零操作\",{\"1\":{\"30\":1}}],[\"方法\",{\"1\":{\"30\":1,\"70\":1}}],[\"方括号里面是数组的元素数量\",{\"1\":{\"6\":1,\"7\":1}}],[\"创建一个\",{\"1\":{\"69\":1}}],[\"创建一个数值变量\",{\"1\":{\"57\":1}}],[\"创建\",{\"1\":{\"68\":1}}],[\"创建新节点函数\",{\"1\":{\"30\":1}}],[\"创建链表节点一般情况下需要使用\",{\"1\":{\"30\":1}}],[\"创建节点\",{\"0\":{\"15\":1,\"30\":1}}],[\"有时人们会定义两个结构体\",{\"1\":{\"28\":1}}],[\"永远指向链表中第一个节点的位置\",{\"1\":{\"28\":1}}],[\"头插法\",{\"1\":{\"51\":1}}],[\"头指针只声明没有分配存储空间\",{\"1\":{\"28\":1}}],[\"头指针与头节点的区别\",{\"1\":{\"28\":1}}],[\"头结点是整个链表的入口\",{\"1\":{\"28\":1}}],[\"头节点与尾节点均指向将要入队的节点\",{\"1\":{\"43\":1}}],[\"头节点进行了声明并分配了一个结点大小的实际物理内存\",{\"1\":{\"28\":1}}],[\"头节点通常包含指向下一个节点的指针\",{\"1\":{\"28\":1}}],[\"头节点\",{\"1\":{\"28\":2,\"43\":1}}],[\"指向队尾元素之后的下一个位置\",{\"1\":{\"44\":1}}],[\"指向队首元素的索引\",{\"1\":{\"44\":1}}],[\"指向上一个节点的地址\",{\"1\":{\"36\":1}}],[\"指向下一个节点的地址\",{\"1\":{\"28\":2,\"35\":1,\"36\":1}}],[\"指针\",{\"1\":{\"36\":1}}],[\"指针域\",{\"1\":{\"27\":1}}],[\"指针记录了下一个节点的内存地址\",{\"1\":{\"27\":1}}],[\"节点数量\",{\"1\":{\"28\":1,\"35\":1}}],[\"节点数据域\",{\"1\":{\"28\":2,\"35\":1,\"36\":1}}],[\"节点指针域\",{\"1\":{\"28\":2,\"35\":1,\"36\":2}}],[\"节点\",{\"1\":{\"27\":1}}],[\"二进制大对象\",{\"1\":{\"65\":1}}],[\"二是指向后续节点的指针\",{\"1\":{\"27\":1}}],[\"二叉树有多种变体\",{\"1\":{\"13\":1}}],[\"二叉树既可以为空\",{\"1\":{\"13\":1}}],[\"二叉树是一种每个节点最多有两个子节点的树形数据结构\",{\"1\":{\"13\":1}}],[\"二叉树是计算机科学中一种基本且广泛应用的数据结构\",{\"1\":{\"13\":1}}],[\"二叉树\",{\"0\":{\"13\":1}}],[\"一个用于表示链表节点\",{\"1\":{\"28\":1}}],[\"一个正值的长度\",{\"1\":{\"7\":1}}],[\"一是本身存储的数据信息\",{\"1\":{\"27\":1}}],[\"此时链表的灵活性优势就体现出来了\",{\"1\":{\"27\":1}}],[\"空闲的内存空间可能散落在内存各处\",{\"1\":{\"27\":1}}],[\"通过\",{\"1\":{\"70\":1,\"71\":1}}],[\"通过绑定\",{\"1\":{\"69\":1}}],[\"通过使用模运算可以让索引值始终保持在有效范围内\",{\"1\":{\"45\":1}}],[\"通过使用指针可以方便地构建和操作二叉树结构\",{\"1\":{\"13\":1}}],[\"通过它可以遍历链表中的其他所有节点\",{\"1\":{\"28\":1}}],[\"通过它可以从当前节点访问到下一个节点\",{\"1\":{\"27\":1}}],[\"链表和数组都符合要求\",{\"1\":{\"42\":1}}],[\"链表比数组占用更多的内存空间\",{\"1\":{\"28\":1}}],[\"链表节点\",{\"1\":{\"28\":1}}],[\"链表节点结构体定义\",{\"1\":{\"28\":2,\"35\":1}}],[\"链表大小\",{\"1\":{\"28\":1,\"35\":1}}],[\"链表头结点\",{\"1\":{\"28\":1,\"35\":1}}],[\"链表结构体定义\",{\"1\":{\"28\":1,\"35\":1}}],[\"链表还拥有一个头指针\",{\"1\":{\"28\":1}}],[\"链表的常用操作\",{\"0\":{\"29\":1}}],[\"链表的首个节点被称为\",{\"1\":{\"28\":1}}],[\"链表的结构定义\",{\"0\":{\"28\":1}}],[\"链表中的每个节点由两部分构成\",{\"1\":{\"27\":1}}],[\"链表是一种线性数据结构\",{\"1\":{\"27\":1}}],[\"链表\",{\"0\":{\"27\":1}}],[\"|\",{\"1\":{\"24\":1}}],[\"||\",{\"1\":{\"22\":1,\"23\":1,\"24\":1,\"61\":1}}],[\"非递归方法\",{\"0\":{\"21\":1}}],[\"后者的数组成员可以是不同的数据类型\",{\"1\":{\"73\":1}}],[\"后序\",{\"0\":{\"20\":1,\"24\":1}}],[\"后面的那块内存区域被赋值\",{\"1\":{\"9\":1}}],[\"void\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"22\":1,\"23\":1,\"24\":1,\"30\":1,\"31\":1,\"33\":1,\"34\":1,\"35\":3,\"43\":2,\"44\":2,\"51\":2,\"52\":2}}],[\"val\",{\"1\":{\"15\":2,\"16\":3,\"30\":2,\"32\":3,\"35\":5,\"44\":2,\"51\":2,\"52\":2}}],[\"value\",{\"1\":{\"14\":1,\"28\":2,\"35\":1,\"43\":4,\"51\":1}}],[\"遍历节点\",{\"0\":{\"17\":1,\"21\":1}}],[\">点击上传文件<\",{\"1\":{\"70\":1}}],[\"><\",{\"1\":{\"69\":1}}],[\">array\",{\"1\":{\"52\":4}}],[\">top++\",{\"1\":{\"52\":1}}],[\">top\",{\"1\":{\"51\":6,\"52\":6}}],[\">nums\",{\"1\":{\"44\":4}}],[\">next\",{\"1\":{\"30\":1,\"31\":3,\"32\":1,\"33\":8,\"34\":1,\"35\":14,\"43\":3,\"51\":2}}],[\">capacity\",{\"1\":{\"52\":3}}],[\">cap\",{\"1\":{\"44\":5}}],[\">data\",{\"1\":{\"43\":2}}],[\">size++\",{\"1\":{\"43\":1,\"44\":1,\"51\":1}}],[\">size\",{\"1\":{\"43\":3,\"44\":5,\"51\":3}}],[\">rear\",{\"1\":{\"43\":4}}],[\">right\",{\"1\":{\"15\":1,\"16\":1,\"18\":2,\"19\":2,\"20\":2,\"22\":1,\"23\":1,\"24\":1}}],[\">front\",{\"1\":{\"43\":6,\"44\":5}}],[\">head\",{\"1\":{\"31\":3,\"33\":4,\"35\":7}}],[\">val\",{\"1\":{\"22\":1,\"23\":1,\"24\":1}}],[\">value\",{\"1\":{\"15\":1,\"16\":2,\"18\":1,\"19\":1,\"20\":1,\"30\":1,\"32\":1,\"34\":1,\"35\":3,\"51\":2}}],[\">=\",{\"1\":{\"22\":1,\"23\":1,\"24\":1}}],[\">\",{\"1\":{\"16\":1,\"34\":1,\"35\":1,\"68\":1,\"72\":1}}],[\">left\",{\"1\":{\"15\":1,\"16\":1,\"18\":2,\"19\":2,\"20\":2,\"22\":1,\"23\":1,\"24\":1}}],[\"png\",{\"1\":{\"70\":1,\"71\":1}}],[\"pickeropts\",{\"1\":{\"70\":2}}],[\"parse\",{\"1\":{\"61\":2}}],[\"pop\",{\"1\":{\"43\":1,\"44\":1,\"51\":4,\"52\":4}}],[\"post\",{\"1\":{\"20\":3,\"24\":1}}],[\"push\",{\"1\":{\"43\":1,\"44\":1,\"51\":3,\"52\":2}}],[\"p\",{\"1\":{\"15\":6,\"28\":4,\"30\":3,\"31\":2,\"32\":1,\"33\":2,\"35\":10,\"43\":14,\"44\":6,\"51\":12,\"52\":7}}],[\"ptr\",{\"1\":{\"14\":1,\"15\":3,\"16\":3,\"18\":1,\"19\":1,\"20\":1,\"22\":2,\"23\":2,\"24\":4}}],[\"print\",{\"1\":{\"34\":1,\"35\":3}}],[\"printf\",{\"1\":{\"10\":1,\"18\":1,\"19\":1,\"20\":1,\"22\":1,\"23\":1,\"24\":1,\"30\":1,\"34\":2,\"35\":3,\"43\":3,\"44\":3,\"51\":2,\"52\":3}}],[\"preventdefault\",{\"1\":{\"69\":3}}],[\"prev\",{\"1\":{\"36\":1}}],[\"pre\",{\"1\":{\"18\":3,\"22\":1}}],[\"projects\",{\"1\":{\"2\":1}}],[\"result\",{\"1\":{\"72\":8}}],[\"responce\",{\"1\":{\"71\":2}}],[\"reader\",{\"1\":{\"73\":3}}],[\"readastext\",{\"1\":{\"72\":1,\"73\":1}}],[\"readasdataurl\",{\"1\":{\"72\":4}}],[\"readasbinarystring\",{\"1\":{\"72\":1}}],[\"readasarraybuffer\",{\"1\":{\"72\":1}}],[\"readystate\",{\"1\":{\"72\":2}}],[\"rear\",{\"1\":{\"43\":1,\"44\":7}}],[\"return\",{\"1\":{\"10\":1,\"15\":1,\"16\":1,\"18\":1,\"19\":1,\"20\":1,\"28\":2,\"30\":2,\"31\":1,\"32\":2,\"33\":3,\"35\":9,\"43\":4,\"44\":5,\"51\":3,\"52\":5,\"61\":3}}],[\"root\",{\"1\":{\"16\":2,\"18\":7,\"19\":7,\"20\":7,\"22\":10,\"23\":10,\"24\":15}}],[\"right\",{\"1\":{\"14\":1}}],[\"其全称为\",{\"1\":{\"65\":1}}],[\"其中\",{\"1\":{\"39\":1,\"68\":1}}],[\"其中每一个节点都通过指针相连接\",{\"1\":{\"27\":1}}],[\"其中的每一个元素都是一个节点\",{\"1\":{\"27\":1}}],[\"其中从指针中我们不难发现每个节点最多有两个分支\",{\"1\":{\"14\":1}}],[\"其原因在于是\",{\"1\":{\"8\":1}}],[\"中的元祖\",{\"1\":{\"73\":1}}],[\"中的\",{\"1\":{\"73\":1}}],[\"中的内容\",{\"1\":{\"72\":4}}],[\"中的一个对象\",{\"1\":{\"65\":1}}],[\"中分别可以看到\",{\"1\":{\"72\":1}}],[\"中可以看到\",{\"1\":{\"72\":1}}],[\"中可以看出分散存储是链表最显著的特征\",{\"1\":{\"28\":1}}],[\"中可用\",{\"1\":{\"70\":1}}],[\"中来对它的数据以不同形式的格式进行读取操作\",{\"1\":{\"65\":1}}],[\"中\",{\"1\":{\"57\":1,\"59\":1,\"60\":1,\"66\":1}}],[\"中序\",{\"0\":{\"19\":1,\"23\":1}}],[\"中我们可以看到它主要是由两部分组成\",{\"1\":{\"14\":1}}],[\"中声明了名为\",{\"1\":{\"7\":1}}],[\"从以上代码中可以看出\",{\"1\":{\"28\":1}}],[\"从图\",{\"1\":{\"28\":1,\"66\":1}}],[\"从\",{\"1\":{\"14\":1}}],[\"树和红黑树\",{\"1\":{\"13\":1}}],[\"平衡二叉树\",{\"1\":{\"13\":1}}],[\"满二叉树\",{\"1\":{\"13\":1}}],[\"如触点事件或指针事件更或者是放置文件时将文件显示在浏览器窗口中\",{\"1\":{\"69\":1}}],[\"如整数\",{\"1\":{\"48\":1}}],[\"如\",{\"1\":{\"13\":1}}],[\"如完全二叉树\",{\"1\":{\"13\":1}}],[\"如果此时打印\",{\"1\":{\"72\":1}}],[\"如果重写的话\",{\"1\":{\"60\":1}}],[\"如果修改了原对象中的嵌套对象或数组\",{\"1\":{\"60\":1}}],[\"如果你需要区分具体的引用类型\",{\"1\":{\"58\":1}}],[\"如果想取出底部的盘子\",{\"1\":{\"48\":1}}],[\"如果我们令单向链表的尾节点指向头节点\",{\"1\":{\"36\":1}}],[\"如果要删除的节点是链表中第一个节点\",{\"1\":{\"33\":1,\"35\":1}}],[\"如果要将整个数组的每一个元素都设置为零\",{\"1\":{\"8\":1}}],[\"如果没有找到\",{\"1\":{\"32\":1,\"35\":1}}],[\"如果没有则返回\",{\"1\":{\"32\":1,\"35\":1}}],[\"如果失败\",{\"1\":{\"30\":1}}],[\"如果分配内存成功\",{\"1\":{\"30\":1}}],[\"如果链表为空\",{\"1\":{\"28\":1,\"31\":1,\"33\":1,\"35\":2}}],[\"如果同时采用指定位置的赋值\",{\"1\":{\"8\":1}}],[\"如果大括号里面的值\",{\"1\":{\"8\":1}}],[\"数据对象\",{\"1\":{\"72\":1}}],[\"数据的格式取决于使用哪个方法来启动读取操作\",{\"1\":{\"72\":1}}],[\"数据正在被加载\",{\"1\":{\"72\":1}}],[\"数据类型\",{\"0\":{\"56\":1}}],[\"数据域\",{\"1\":{\"27\":1}}],[\"数据结构是软件开发的基础\",{\"1\":{\"39\":1}}],[\"数据结构\",{\"0\":{\"14\":1},\"2\":{\"12\":1,\"26\":1,\"38\":1,\"47\":1,\"54\":1}}],[\"数组或链表的部分无关操作\",{\"1\":{\"50\":1}}],[\"数组和链表都可以在任意位置添加和删除元素\",{\"1\":{\"50\":1}}],[\"数组中包含元素的有效区间为\",{\"1\":{\"44\":1}}],[\"数组中的元素是从\",{\"1\":{\"7\":1}}],[\"数组长度为\",{\"1\":{\"8\":2}}],[\"数组赋值之后\",{\"1\":{\"8\":1}}],[\"数组变量一旦声明\",{\"1\":{\"8\":1}}],[\"数组在声明时\",{\"1\":{\"8\":1}}],[\"数组初始化时\",{\"1\":{\"8\":1}}],[\"数组初始化\",{\"0\":{\"8\":1}}],[\"数组通过变量名后加方括号表示\",{\"1\":{\"6\":1,\"7\":1}}],[\"数组是将其相同类型元素存储在连续的内存空间中\",{\"1\":{\"6\":1}}],[\"数组\",{\"0\":{\"6\":1},\"1\":{\"9\":1}}],[\"name\",{\"1\":{\"58\":1,\"59\":4,\"60\":8,\"61\":4}}],[\"number\",{\"1\":{\"57\":1}}],[\"nums\",{\"1\":{\"44\":1}}],[\"null\",{\"1\":{\"15\":3,\"16\":1,\"18\":3,\"19\":3,\"20\":3,\"22\":3,\"23\":3,\"24\":4,\"28\":3,\"30\":4,\"31\":2,\"32\":4,\"33\":4,\"34\":2,\"35\":16,\"36\":1,\"43\":9,\"44\":3,\"51\":3,\"52\":3,\"58\":1,\"61\":1}}],[\"new\",{\"1\":{\"30\":5,\"35\":5,\"72\":2,\"73\":4}}],[\"next\",{\"1\":{\"28\":2,\"33\":1,\"35\":2,\"36\":1,\"43\":1,\"51\":1}}],[\"node\",{\"1\":{\"14\":5,\"15\":10,\"16\":3,\"18\":1,\"19\":1,\"20\":1,\"22\":2,\"23\":2,\"24\":4,\"28\":11,\"30\":10,\"31\":6,\"32\":2,\"33\":12,\"35\":57,\"36\":4,\"43\":25,\"51\":17,\"66\":1}}],[\"n\",{\"1\":{\"10\":1,\"30\":1,\"34\":1,\"35\":2,\"43\":3,\"44\":3,\"45\":3,\"51\":2,\"52\":3}}],[\"done\",{\"1\":{\"72\":1}}],[\"document\",{\"1\":{\"68\":1,\"69\":1,\"70\":1,\"72\":1}}],[\"div>\",{\"1\":{\"69\":1}}],[\"dataview\",{\"1\":{\"73\":3}}],[\"datatransfer\",{\"1\":{\"69\":1}}],[\"data\",{\"0\":{\"76\":1},\"1\":{\"36\":1,\"43\":1,\"52\":2,\"72\":1}}],[\"description\",{\"1\":{\"70\":1}}],[\"deepcopy\",{\"1\":{\"61\":2}}],[\"delete\",{\"1\":{\"33\":1,\"35\":11}}],[\"define\",{\"1\":{\"22\":1,\"23\":1,\"24\":1}}],[\"development\",{\"1\":{\"2\":1}}],[\"d\",{\"1\":{\"10\":1,\"18\":1,\"19\":1,\"20\":1,\"22\":1,\"23\":1,\"24\":1,\"34\":1,\"35\":1,\"43\":1,\"44\":1,\"51\":1,\"52\":1}}],[\"https\",{\"1\":{\"70\":1}}],[\"hello\",{\"1\":{\"73\":4}}],[\"height\",{\"1\":{\"69\":1}}],[\"head\",{\"1\":{\"28\":3,\"32\":5,\"34\":4,\"35\":11}}],[\"hasownproperty\",{\"1\":{\"61\":1}}],[\"hua\",{\"1\":{\"59\":3,\"60\":4}}],[\"h>\",{\"1\":{\"10\":1,\"28\":2,\"35\":3,\"43\":1,\"44\":1,\"51\":2,\"52\":2}}],[\"hi\",{\"0\":{\"1\":1}}],[\"用于表示一个不可变\",{\"1\":{\"65\":1}}],[\"用于记录队列长度\",{\"1\":{\"44\":1}}],[\"用于指向它的直接后继元素\",{\"1\":{\"28\":1}}],[\"用\",{\"1\":{\"10\":1}}],[\"函数申请的空间\",{\"1\":{\"33\":1,\"35\":1}}],[\"函数\",{\"1\":{\"10\":1}}],[\"src\",{\"1\":{\"71\":1}}],[\"showopenfilepicker\",{\"0\":{\"70\":1},\"1\":{\"70\":3}}],[\"solid\",{\"1\":{\"69\":1}}],[\"send\",{\"1\":{\"66\":1}}],[\"selectelement\",{\"1\":{\"68\":2,\"69\":3,\"70\":2,\"72\":2}}],[\"select\",{\"1\":{\"61\":2}}],[\"search\",{\"1\":{\"32\":1,\"35\":11}}],[\"score\",{\"1\":{\"60\":8,\"61\":3}}],[\"size\",{\"1\":{\"22\":2,\"23\":2,\"24\":2,\"28\":1,\"35\":3,\"43\":1,\"44\":7,\"51\":1}}],[\"sizeof\",{\"1\":{\"10\":5,\"15\":1,\"30\":1,\"35\":1,\"43\":2,\"44\":2,\"51\":2,\"52\":2}}],[\"stopimmediatepropagation\",{\"1\":{\"69\":1}}],[\"stoppropagation\",{\"1\":{\"69\":1}}],[\"stringify\",{\"1\":{\"61\":2}}],[\"structure\",{\"0\":{\"76\":1}}],[\"struct\",{\"1\":{\"14\":3,\"28\":5,\"35\":3,\"36\":3,\"43\":3,\"44\":1,\"51\":3,\"52\":1}}],[\"stack\",{\"1\":{\"2\":1,\"22\":4,\"23\":4,\"24\":5,\"51\":34,\"52\":38}}],[\"status\",{\"0\":{\"2\":1}}],[\"而不是实际的对象或数组本身\",{\"1\":{\"60\":1}}],[\"而不是直接改变了原始数值的值\",{\"1\":{\"57\":1}}],[\"而不复制其内部的引用\",{\"1\":{\"60\":1}}],[\"而是创建一个新的数值并重新分配给\",{\"1\":{\"57\":1}}],[\"而对于出栈操作\",{\"1\":{\"51\":1}}],[\"而当数组非常大时\",{\"1\":{\"27\":1}}],[\"而且难以发现\",{\"1\":{\"9\":1}}],[\"而那实际上是其他变量的区域\",{\"1\":{\"9\":1}}],[\"使其对外表现的逻辑符合栈的特性\",{\"1\":{\"50\":1}}],[\"使其与链表彻底隔离\",{\"1\":{\"33\":1,\"35\":1}}],[\"使用该方法读取\",{\"1\":{\"72\":1}}],[\"使用时需注意此项功能仅在一些支持的浏览器的安全上下文\",{\"1\":{\"70\":1}}],[\"使用数组实现栈时\",{\"1\":{\"52\":1}}],[\"使用链表实现栈时\",{\"1\":{\"51\":1}}],[\"使用\",{\"1\":{\"30\":1,\"72\":1}}],[\"使用大括号赋值时\",{\"1\":{\"8\":1}}],[\"使得紧跟在\",{\"1\":{\"9\":1}}],[\"会正常运行\",{\"1\":{\"9\":1}}],[\"会增加读代码的难度\",{\"1\":{\"8\":1}}],[\"这些对象用于读取和写入缓冲区内容\",{\"1\":{\"73\":1}}],[\"这关乎着\",{\"1\":{\"72\":1}}],[\"这也是我们最常用到的\",{\"1\":{\"71\":1}}],[\"这种方法有一些局限性\",{\"1\":{\"61\":1}}],[\"这种节点插入方法被称为\",{\"1\":{\"51\":1}}],[\"这意味着即使原对象中的嵌套对象或数组发生了变化\",{\"1\":{\"61\":1}}],[\"这意味着变量可以在程序执行期间更改其数据类型\",{\"1\":{\"56\":1}}],[\"这主要是因为在引用类型中\",{\"1\":{\"59\":1}}],[\"这是因为我们相当于重写了一个数组\",{\"1\":{\"60\":1}}],[\"这是因为当我们想从新给基础类型赋值来\",{\"1\":{\"57\":1}}],[\"这是创建了两个不同的\",{\"1\":{\"57\":1}}],[\"这有助于编写无副作用的纯函数\",{\"1\":{\"57\":1}}],[\"这样也可以实现深拷贝\",{\"1\":{\"61\":1}}],[\"这样\",{\"1\":{\"59\":1}}],[\"这样的好处在于\",{\"1\":{\"57\":1}}],[\"这样做的原因主要是为了更好地管理链表的状态和提供更清晰的数据封装\",{\"1\":{\"28\":1}}],[\"这个公式计算出的\",{\"1\":{\"44\":1}}],[\"这个位置是不存在的\",{\"1\":{\"9\":1}}],[\"这会导致出队操作效率较低\",{\"1\":{\"44\":1}}],[\"这两部分信息组成的存储结构称之为链表的\",{\"1\":{\"27\":1}}],[\"这两个子节点分别称为左子节点和右子节点\",{\"1\":{\"13\":1}}],[\"这很容易引发错误\",{\"1\":{\"9\":1}}],[\"这时将根据大括号里面的值的数量\",{\"1\":{\"8\":1}}],[\"因为它们各自拥有独立的内存空间\",{\"1\":{\"61\":1}}],[\"因为它们共享相同的引用\",{\"1\":{\"60\":1}}],[\"因为数组中每个元素的类型都是一样的\",{\"1\":{\"10\":1}}],[\"因为是制定的元素赋值\",{\"1\":{\"8\":1}}],[\"因此栈可以视为一种受限制的数组或链表\",{\"1\":{\"50\":1}}],[\"因此我们只能在栈顶添加或删除元素\",{\"1\":{\"50\":1}}],[\"因此在相同数据量下\",{\"1\":{\"28\":1}}],[\"因此不知不觉就更改了其他变量的值\",{\"1\":{\"9\":1}}],[\"因此\",{\"1\":{\"9\":1,\"30\":1,\"59\":1,\"60\":1}}],[\"访问数组元素\",{\"0\":{\"9\":1}}],[\"那么他相当于在堆内存中重新开辟了一块空间这样修改之后的这个数组与之前修改的数组会分别处在两个不同地址的内存空间中且他们互不影响\",{\"1\":{\"60\":1}}],[\"那么这个修改也会反映到浅拷贝后的副本上\",{\"1\":{\"60\":1}}],[\"那么数组长度将是最大的指定位置再加\",{\"1\":{\"8\":1}}],[\"那么未赋值的元素自动初始化为\",{\"1\":{\"8\":1}}],[\"省略成员数量时\",{\"1\":{\"8\":1}}],[\"自动确定数组的长度\",{\"1\":{\"8\":1}}],[\"90\",{\"1\":{\"60\":7,\"61\":3}}],[\"9\",{\"1\":{\"8\":4,\"35\":1,\"73\":1}}],[\"99\",{\"1\":{\"7\":1,\"8\":6}}],[\"可以自定义格式和字节序\",{\"1\":{\"73\":1}}],[\"可以用该事件来监控文件的读取进度\",{\"1\":{\"72\":1}}],[\"可以看出\",{\"1\":{\"66\":1}}],[\"可以使用\",{\"1\":{\"58\":1}}],[\"可以使用大括号\",{\"1\":{\"8\":1}}],[\"可以大致分为两类\",{\"1\":{\"56\":1}}],[\"可以确保下标总是在\",{\"1\":{\"45\":1}}],[\"可以在一端添加元素\",{\"1\":{\"42\":1}}],[\"可以朝两个方向遍历链表\",{\"1\":{\"36\":1}}],[\"可以获得数据类型或变量在内存中所占的字节数\",{\"1\":{\"10\":1}}],[\"可以结合使用\",{\"1\":{\"8\":1}}],[\"可以指定为哪些位置的元素赋值\",{\"1\":{\"8\":1}}],[\"也不会影响到深拷贝后的副本\",{\"1\":{\"61\":1}}],[\"也称为原始值\",{\"1\":{\"56\":1}}],[\"也可以由一个根节点及两棵分别作为其左右子树的二叉树构成\",{\"1\":{\"13\":1}}],[\"也可以获得整个数组在内存中所占的字节数\",{\"1\":{\"10\":1}}],[\"也是不允许的\",{\"1\":{\"8\":1}}],[\"也就是之前所创建的\",{\"1\":{\"69\":1}}],[\"也就是链表中的\",{\"1\":{\"28\":1}}],[\"也就是\",{\"1\":{\"7\":1}}],[\"再用大括号修改值\",{\"1\":{\"8\":1}}],[\"同理此种情况也适用于对象与函数\",{\"1\":{\"60\":1}}],[\"同样\",{\"1\":{\"10\":1}}],[\"同样的原因\",{\"1\":{\"8\":1}}],[\"同时对每一个元素赋值\",{\"1\":{\"8\":1}}],[\"就可以使用\",{\"1\":{\"73\":1}}],[\"就得到了栈这种数据结构\",{\"1\":{\"48\":1}}],[\"就像现实生活中排队等待服务的情景一样\",{\"1\":{\"40\":1}}],[\"就不得修改变量指向的地址\",{\"1\":{\"8\":1}}],[\"就是从第\",{\"1\":{\"7\":1}}],[\"语言允许省略方括号里面的数组元素数量\",{\"1\":{\"8\":1}}],[\"语言规定\",{\"1\":{\"8\":1}}],[\"语言中实现并操作队列\",{\"1\":{\"39\":1}}],[\"语言中二叉树的基本概念\",{\"1\":{\"13\":1}}],[\"语言中\",{\"1\":{\"6\":1,\"13\":1}}],[\"必须在数组声明时赋值\",{\"1\":{\"8\":1}}],[\"但不能用于从文件系统中按路径名简单地读取文件\",{\"1\":{\"72\":1}}],[\"但不建议这样做\",{\"1\":{\"8\":1}}],[\"但此事件还是会继续传播\",{\"1\":{\"69\":1}}],[\"但这个修改没有反映到浅拷贝后的副本上\",{\"1\":{\"60\":1}}],[\"但相应地也需要占用更多的内存空间\",{\"1\":{\"36\":1}}],[\"但为了能够保持节点之间的顺序关系\",{\"1\":{\"28\":1}}],[\"但是\",{\"1\":{\"9\":1,\"61\":1}}],[\"但要注意\",{\"1\":{\"8\":1}}],[\"但大括号里面的值不能多于数组的长度\",{\"1\":{\"8\":1}}],[\"个对象\",{\"1\":{\"73\":1}}],[\"个元素\",{\"1\":{\"9\":1}}],[\"个\",{\"1\":{\"8\":1}}],[\"最后将尾节点变更为当前将要入队的节点\",{\"1\":{\"43\":1}}],[\"最后一个元素的编号会比数组长度小\",{\"1\":{\"7\":1}}],[\"最先到达的元素最先离开\",{\"1\":{\"40\":1}}],[\"最简单的写法就是下面这样\",{\"1\":{\"8\":1}}],[\"少于数组的元素数量\",{\"1\":{\"8\":1}}],[\"报错\",{\"1\":{\"8\":3}}],[\"72\",{\"1\":{\"73\":1}}],[\"7\",{\"1\":{\"8\":1,\"35\":1,\"73\":1}}],[\"5\",{\"1\":{\"8\":9,\"10\":1,\"35\":1,\"60\":1,\"72\":1}}],[\"43\",{\"1\":{\"57\":2}}],[\"42\",{\"1\":{\"57\":2}}],[\"44\",{\"1\":{\"8\":2}}],[\"4\",{\"1\":{\"8\":5,\"10\":1,\"35\":1,\"72\":1}}],[\"32\",{\"1\":{\"73\":1}}],[\"3\",{\"1\":{\"8\":10,\"10\":1,\"35\":1}}],[\"200px\",{\"1\":{\"69\":2}}],[\"2024\",{\"1\":{\"2\":1}}],[\"22\",{\"1\":{\"8\":5}}],[\"2\",{\"1\":{\"8\":14,\"10\":1,\"28\":1,\"35\":1,\"51\":1,\"66\":1,\"72\":1}}],[\"=>\",{\"1\":{\"68\":1,\"69\":2,\"70\":1,\"71\":2,\"72\":2}}],[\"===\",{\"1\":{\"61\":1}}],[\"==\",{\"1\":{\"16\":1,\"18\":1,\"19\":1,\"20\":1,\"24\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":3,\"35\":6,\"43\":4,\"44\":3,\"51\":1,\"52\":3,\"61\":1}}],[\"=\",{\"1\":{\"8\":28,\"10\":3,\"15\":5,\"16\":4,\"18\":2,\"19\":2,\"20\":2,\"22\":8,\"23\":8,\"24\":11,\"28\":3,\"30\":3,\"31\":5,\"32\":2,\"33\":7,\"34\":2,\"35\":23,\"43\":16,\"44\":11,\"51\":12,\"52\":9,\"57\":2,\"58\":1,\"59\":3,\"60\":8,\"61\":4,\"68\":2,\"69\":3,\"70\":4,\"72\":5,\"73\":7}}],[\"60\",{\"1\":{\"60\":7,\"61\":3}}],[\"64\",{\"1\":{\"22\":1,\"23\":1,\"24\":1}}],[\"6\",{\"1\":{\"8\":9,\"10\":1,\"35\":1}}],[\"否则编译时会报错\",{\"1\":{\"8\":2}}],[\"号元素\",{\"1\":{\"7\":1}}],[\"号元素一直到第\",{\"1\":{\"7\":1}}],[\"开始编号\",{\"1\":{\"7\":1}}],[\"0x1\",{\"1\":{\"24\":2}}],[\"0\",{\"1\":{\"7\":2,\"8\":34,\"10\":2,\"22\":1,\"23\":1,\"24\":1,\"28\":2,\"35\":3,\"43\":2,\"44\":3,\"45\":1,\"51\":3,\"52\":2,\"60\":1,\"72\":2,\"73\":1}}],[\"长度为\",{\"1\":{\"7\":1}}],[\"1px\",{\"1\":{\"69\":1}}],[\"18\",{\"1\":{\"59\":3}}],[\"108\",{\"1\":{\"73\":3}}],[\"101\",{\"1\":{\"73\":1}}],[\"10\",{\"1\":{\"8\":1,\"35\":1,\"52\":2}}],[\"100\",{\"1\":{\"7\":3,\"8\":1,\"9\":2,\"60\":5,\"69\":1,\"73\":1}}],[\"114\",{\"1\":{\"73\":1}}],[\"119\",{\"1\":{\"73\":1}}],[\"111\",{\"1\":{\"73\":2}}],[\"11\",{\"1\":{\"8\":3}}],[\"122\",{\"1\":{\"8\":6}}],[\"12\",{\"1\":{\"8\":6}}],[\"1\",{\"1\":{\"7\":2,\"8\":11,\"10\":1,\"14\":1,\"22\":1,\"23\":1,\"24\":3,\"35\":1,\"44\":8,\"45\":1,\"51\":1,\"52\":3,\"57\":1,\"65\":1,\"72\":1}}],[\"+\",{\"1\":{\"7\":2,\"44\":3}}],[\"类型的\",{\"1\":{\"66\":1}}],[\"类型以外\",{\"1\":{\"58\":1}}],[\"类型\",{\"0\":{\"64\":1},\"1\":{\"7\":1}}],[\"声明数组\",{\"0\":{\"7\":1}}],[\"在图\",{\"1\":{\"72\":1}}],[\"在将其用于生产之前\",{\"1\":{\"70\":1}}],[\"在通过用户点击上传后获取\",{\"1\":{\"68\":1}}],[\"在当前数组或链表的索引循环中\",{\"1\":{\"45\":1}}],[\"在数组中删除首元素时需要对当前数组进行遍历以确定首元素所在位置\",{\"1\":{\"44\":1}}],[\"在计算机科学中\",{\"1\":{\"39\":1}}],[\"在环形链表中\",{\"1\":{\"36\":1}}],[\"在链表末尾添加节点函数\",{\"1\":{\"31\":1}}],[\"在链表的实现中\",{\"1\":{\"28\":1}}],[\"在一个复杂的系统运行环境下\",{\"1\":{\"27\":1}}],[\"在解决各种问题时展现出强大的功能\",{\"1\":{\"13\":1}}],[\"在内存中所占的字节数都是相同的\",{\"1\":{\"10\":1}}],[\"在\",{\"1\":{\"6\":1,\"7\":1,\"13\":1,\"57\":1,\"59\":1,\"66\":1}}],[\"fetch\",{\"1\":{\"71\":2}}],[\"false\",{\"1\":{\"70\":1}}],[\"failed\",{\"1\":{\"30\":1,\"35\":1,\"43\":1}}],[\"filehandle\",{\"1\":{\"70\":2}}],[\"files\",{\"1\":{\"68\":1,\"69\":1,\"72\":1}}],[\"filelist\",{\"1\":{\"68\":1}}],[\"filereader\",{\"0\":{\"72\":1},\"1\":{\"66\":1,\"72\":15,\"73\":1}}],[\"file\",{\"0\":{\"66\":1},\"1\":{\"66\":7,\"68\":1,\"72\":5}}],[\"finish\",{\"1\":{\"16\":2}}],[\"find\",{\"1\":{\"16\":1}}],[\"function\",{\"1\":{\"61\":2}}],[\"full\",{\"1\":{\"2\":1,\"44\":1,\"52\":1}}],[\"for\",{\"1\":{\"35\":1,\"52\":1,\"61\":1,\"73\":1}}],[\"fr\",{\"1\":{\"72\":5}}],[\"front\",{\"1\":{\"43\":1,\"44\":6}}],[\"free\",{\"1\":{\"33\":2,\"35\":2,\"43\":1,\"51\":1}}],[\"frameworks\",{\"0\":{\"4\":1}}],[\"assets\",{\"1\":{\"71\":1}}],[\"async\",{\"1\":{\"70\":1,\"71\":1}}],[\"axios\",{\"1\":{\"71\":1}}],[\"await\",{\"1\":{\"70\":1,\"71\":1}}],[\"accept\",{\"1\":{\"70\":1}}],[\"api\",{\"0\":{\"70\":1},\"1\":{\"70\":1,\"72\":1}}],[\"append\",{\"1\":{\"31\":1,\"35\":2}}],[\"age\",{\"1\":{\"59\":3,\"61\":2}}],[\"arr\",{\"1\":{\"58\":3}}],[\"arraybuffer\",{\"0\":{\"73\":1},\"1\":{\"72\":1,\"73\":5}}],[\"array\",{\"1\":{\"7\":3,\"8\":16,\"9\":3,\"10\":3,\"52\":1,\"58\":2,\"61\":1}}],[\"allocate\",{\"1\":{\"43\":1}}],[\"allocation\",{\"1\":{\"30\":1,\"35\":1}}],[\"avl\",{\"1\":{\"13\":1}}],[\"a\",{\"1\":{\"2\":1,\"8\":2}}],[\"and\",{\"0\":{\"4\":1},\"1\":{\"1\":1,\"2\":2}}],[\"gif\",{\"1\":{\"70\":1}}],[\"github\",{\"0\":{\"5\":1}}],[\"getelementbyid\",{\"1\":{\"68\":1,\"69\":1,\"70\":1,\"72\":1}}],[\"group\",{\"1\":{\"2\":1}}],[\"goto\",{\"1\":{\"16\":1}}],[\"goals\",{\"1\":{\"2\":1}}],[\"go\",{\"1\":{\"2\":1}}],[\"obj\",{\"1\":{\"61\":8}}],[\"objb\",{\"1\":{\"59\":2,\"60\":4,\"61\":2}}],[\"obja\",{\"1\":{\"59\":4,\"60\":10,\"61\":3}}],[\"object\",{\"1\":{\"58\":2,\"61\":1,\"65\":1}}],[\"order\",{\"1\":{\"18\":3,\"19\":3,\"20\":3,\"22\":1,\"23\":1,\"24\":1}}],[\"overview\",{\"0\":{\"5\":1}}],[\"opensource\",{\"1\":{\"2\":1}}],[\"onprogress\",{\"1\":{\"72\":1}}],[\"onloadend\",{\"1\":{\"72\":1}}],[\"onloadstart\",{\"1\":{\"72\":1}}],[\"onload\",{\"1\":{\"72\":3}}],[\"onerror\",{\"1\":{\"72\":1}}],[\"onabort\",{\"1\":{\"72\":1}}],[\"onclick\",{\"1\":{\"70\":1}}],[\"onchange\",{\"1\":{\"68\":2,\"72\":1}}],[\"ondrop\",{\"1\":{\"69\":4}}],[\"ondragover\",{\"1\":{\"69\":4}}],[\"on\",{\"1\":{\"2\":2}}],[\"catch\",{\"1\":{\"71\":1}}],[\"cake\",{\"1\":{\"68\":2,\"69\":3,\"70\":2,\"71\":1,\"72\":2}}],[\"capacity\",{\"1\":{\"52\":1}}],[\"cap\",{\"1\":{\"44\":3,\"52\":2}}],[\"createimagebitmap\",{\"1\":{\"66\":1}}],[\"createobjecturl\",{\"1\":{\"66\":1}}],[\"create\",{\"1\":{\"15\":1,\"30\":1,\"35\":2,\"43\":3,\"44\":1,\"51\":2,\"52\":2}}],[\"context\",{\"1\":{\"66\":1}}],[\"const\",{\"1\":{\"68\":1,\"69\":1,\"70\":3,\"72\":3,\"73\":5}}],[\"constructor\",{\"1\":{\"58\":1}}],[\"console\",{\"1\":{\"58\":2,\"59\":2,\"60\":4,\"61\":2,\"68\":1,\"69\":1,\"70\":1,\"71\":2,\"72\":2,\"73\":1}}],[\"copy\",{\"1\":{\"61\":3}}],[\"code\",{\"1\":{\"7\":1,\"14\":1,\"57\":1,\"60\":1}}],[\"collaborate\",{\"1\":{\"2\":1}}],[\"c\",{\"1\":{\"6\":1,\"8\":2,\"13\":2,\"39\":1},\"2\":{\"11\":1,\"12\":1,\"25\":1,\"26\":1,\"37\":1,\"38\":1,\"46\":1,\"47\":1,\"53\":1,\"54\":1}}],[\"currently\",{\"1\":{\"2\":2}}],[\"current\",{\"0\":{\"2\":1},\"1\":{\"16\":9}}],[\"li\",{\"1\":{\"59\":1,\"60\":4,\"61\":3}}],[\"list\",{\"1\":{\"28\":4,\"31\":5,\"32\":7,\"33\":6,\"34\":7,\"35\":55}}],[\"large\",{\"1\":{\"65\":1}}],[\"last\",{\"1\":{\"31\":5,\"33\":6,\"35\":11}}],[\"languages\",{\"0\":{\"3\":1}}],[\"let\",{\"1\":{\"57\":1,\"58\":1,\"59\":2,\"60\":4,\"61\":4,\"73\":1}}],[\"left\",{\"1\":{\"14\":1}}],[\"length\",{\"1\":{\"73\":2}}],[\"len\",{\"1\":{\"10\":3}}],[\"learning\",{\"1\":{\"2\":1}}],[\"learn\",{\"1\":{\"1\":1,\"2\":1}}],[\"loading\",{\"1\":{\"72\":1}}],[\"log\",{\"1\":{\"58\":2,\"59\":2,\"60\":4,\"61\":2,\"68\":1,\"69\":1,\"70\":1,\"71\":2,\"72\":2,\"73\":1}}],[\"long\",{\"1\":{\"24\":3}}],[\"lot\",{\"1\":{\"2\":1}}],[\"looking\",{\"1\":{\"2\":1}}],[\"🥅\",{\"1\":{\"2\":1}}],[\"📚\",{\"1\":{\"2\":1}}],[\"🔭\",{\"1\":{\"2\":1}}],[\"wrapbuffer\",{\"1\":{\"73\":2}}],[\"width\",{\"1\":{\"69\":1}}],[\"window\",{\"1\":{\"58\":2,\"59\":2,\"60\":4,\"61\":2,\"68\":2,\"69\":2,\"70\":5,\"71\":2,\"72\":3,\"73\":1}}],[\"with\",{\"1\":{\"22\":1,\"23\":1,\"24\":1}}],[\"while\",{\"1\":{\"16\":1,\"22\":1,\"23\":1,\"24\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":4}}],[\"web\",{\"1\":{\"2\":1,\"72\":1}}],[\"working\",{\"1\":{\"2\":1}}],[\"target\",{\"1\":{\"68\":1,\"72\":2}}],[\"then\",{\"1\":{\"71\":1}}],[\"there\",{\"0\":{\"1\":1}}],[\"this\",{\"1\":{\"61\":1}}],[\"true\",{\"1\":{\"58\":1,\"70\":1}}],[\"trying\",{\"1\":{\"1\":1}}],[\"typedarrray\",{\"1\":{\"73\":3}}],[\"typedef\",{\"1\":{\"14\":1,\"28\":3,\"35\":2,\"36\":1,\"43\":2,\"44\":1,\"51\":2,\"52\":1}}],[\"typescript\",{\"1\":{\"73\":1}}],[\"types\",{\"1\":{\"70\":1}}],[\"type=\",{\"1\":{\"68\":1,\"72\":1}}],[\"type\",{\"1\":{\"68\":1}}],[\"typeof\",{\"1\":{\"58\":1,\"61\":1}}],[\"temp\",{\"1\":{\"43\":4}}],[\"t\",{\"1\":{\"14\":1,\"15\":1}}],[\"top++\",{\"1\":{\"22\":1,\"23\":1,\"24\":2}}],[\"top\",{\"1\":{\"22\":5,\"23\":5,\"24\":6,\"51\":1,\"52\":1}}],[\"tools\",{\"0\":{\"4\":1}}],[\"to\",{\"1\":{\"1\":1,\"2\":1,\"43\":1}}],[\"zequanr\",{\"0\":{\"1\":1}}],[\"multiple=\",{\"1\":{\"68\":1}}],[\"multiple\",{\"1\":{\"68\":2,\"70\":1}}],[\"ming\",{\"1\":{\"59\":1,\"60\":4,\"61\":3}}],[\"memory\",{\"1\":{\"30\":1,\"35\":1}}],[\"malloc\",{\"1\":{\"15\":1,\"30\":6,\"33\":1,\"35\":2,\"43\":2,\"44\":2,\"51\":2,\"52\":2}}],[\"main\",{\"1\":{\"10\":1,\"28\":2,\"35\":1,\"44\":1,\"51\":1,\"52\":1}}],[\"mynum\",{\"1\":{\"57\":4}}],[\"my\",{\"0\":{\"2\":1}}],[\"more\",{\"1\":{\"1\":1}}],[\"m\",{\"0\":{\"1\":1},\"1\":{\"1\":1,\"2\":3}}],[\"image\",{\"1\":{\"70\":1,\"71\":1}}],[\"images\",{\"1\":{\"70\":1}}],[\"id=\",{\"1\":{\"68\":1,\"69\":1,\"70\":1,\"72\":1}}],[\"isarray\",{\"1\":{\"61\":1}}],[\"is\",{\"1\":{\"43\":1,\"44\":2,\"51\":1,\"52\":2}}],[\"i++\",{\"1\":{\"35\":1,\"52\":1,\"73\":1}}],[\"if\",{\"1\":{\"15\":1,\"16\":2,\"18\":3,\"19\":3,\"20\":3,\"22\":1,\"23\":1,\"24\":2,\"30\":1,\"31\":1,\"32\":1,\"33\":3,\"35\":6,\"43\":5,\"44\":4,\"51\":3,\"52\":4,\"61\":2}}],[\"input\",{\"0\":{\"68\":1},\"1\":{\"68\":1}}],[\"instanceof\",{\"1\":{\"58\":2}}],[\"in\",{\"1\":{\"19\":3,\"23\":1,\"61\":1}}],[\"include\",{\"1\":{\"10\":1,\"28\":2,\"35\":3,\"43\":1,\"44\":1,\"51\":2,\"52\":2}}],[\"int8array\",{\"1\":{\"73\":1}}],[\"int\",{\"1\":{\"7\":2,\"8\":16,\"10\":3,\"14\":1,\"15\":1,\"16\":1,\"22\":1,\"23\":1,\"24\":1,\"28\":5,\"30\":1,\"32\":1,\"35\":6,\"36\":1,\"43\":4,\"44\":11,\"51\":4,\"52\":10}}],[\"i\",{\"0\":{\"1\":1},\"1\":{\"1\":1,\"2\":3,\"35\":3,\"45\":1,\"52\":3,\"73\":4}}],[\"关于我\",{\"0\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
